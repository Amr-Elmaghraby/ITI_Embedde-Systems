
KPD_LCD_task.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002364  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000138  00800060  00002364  000023f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800198  00800198  00002530  2**0
                  ALLOC
  3 .stab         00001f80  00000000  00000000  00002530  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001232  00000000  00000000  000044b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  000056e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d1  00000000  00000000  00005862  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002010  00000000  00000000  00005a33  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001161  00000000  00000000  00007a43  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001003  00000000  00000000  00008ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  00009ba8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002be  00000000  00000000  00009d48  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000090e  00000000  00000000  0000a006  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a914  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e6       	ldi	r30, 0x64	; 100
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 39       	cpi	r26, 0x98	; 152
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e9       	ldi	r26, 0x98	; 152
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 39       	cpi	r26, 0x9B	; 155
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <main>
      8a:	0c 94 b0 11 	jmp	0x2360	; 0x2360 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 34 11 	jmp	0x2268	; 0x2268 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad e6       	ldi	r26, 0x6D	; 109
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 50 11 	jmp	0x22a0	; 0x22a0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 40 11 	jmp	0x2280	; 0x2280 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 5c 11 	jmp	0x22b8	; 0x22b8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 40 11 	jmp	0x2280	; 0x2280 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 5c 11 	jmp	0x22b8	; 0x22b8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 34 11 	jmp	0x2268	; 0x2268 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8d e6       	ldi	r24, 0x6D	; 109
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 50 11 	jmp	0x22a0	; 0x22a0 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 40 11 	jmp	0x2280	; 0x2280 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 5c 11 	jmp	0x22b8	; 0x22b8 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 40 11 	jmp	0x2280	; 0x2280 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 5c 11 	jmp	0x22b8	; 0x22b8 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 40 11 	jmp	0x2280	; 0x2280 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 5c 11 	jmp	0x22b8	; 0x22b8 <__epilogue_restores__+0x18>

00000752 <__floatsisf>:
     752:	a8 e0       	ldi	r26, 0x08	; 8
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 3d 11 	jmp	0x227a	; 0x227a <__prologue_saves__+0x12>
     75e:	9b 01       	movw	r18, r22
     760:	ac 01       	movw	r20, r24
     762:	83 e0       	ldi	r24, 0x03	; 3
     764:	89 83       	std	Y+1, r24	; 0x01
     766:	da 01       	movw	r26, r20
     768:	c9 01       	movw	r24, r18
     76a:	88 27       	eor	r24, r24
     76c:	b7 fd       	sbrc	r27, 7
     76e:	83 95       	inc	r24
     770:	99 27       	eor	r25, r25
     772:	aa 27       	eor	r26, r26
     774:	bb 27       	eor	r27, r27
     776:	b8 2e       	mov	r11, r24
     778:	21 15       	cp	r18, r1
     77a:	31 05       	cpc	r19, r1
     77c:	41 05       	cpc	r20, r1
     77e:	51 05       	cpc	r21, r1
     780:	19 f4       	brne	.+6      	; 0x788 <__floatsisf+0x36>
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	89 83       	std	Y+1, r24	; 0x01
     786:	3a c0       	rjmp	.+116    	; 0x7fc <__floatsisf+0xaa>
     788:	88 23       	and	r24, r24
     78a:	a9 f0       	breq	.+42     	; 0x7b6 <__floatsisf+0x64>
     78c:	20 30       	cpi	r18, 0x00	; 0
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	38 07       	cpc	r19, r24
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	48 07       	cpc	r20, r24
     796:	80 e8       	ldi	r24, 0x80	; 128
     798:	58 07       	cpc	r21, r24
     79a:	29 f4       	brne	.+10     	; 0x7a6 <__floatsisf+0x54>
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	9f ec       	ldi	r25, 0xCF	; 207
     7a4:	30 c0       	rjmp	.+96     	; 0x806 <__floatsisf+0xb4>
     7a6:	ee 24       	eor	r14, r14
     7a8:	ff 24       	eor	r15, r15
     7aa:	87 01       	movw	r16, r14
     7ac:	e2 1a       	sub	r14, r18
     7ae:	f3 0a       	sbc	r15, r19
     7b0:	04 0b       	sbc	r16, r20
     7b2:	15 0b       	sbc	r17, r21
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <__floatsisf+0x68>
     7b6:	79 01       	movw	r14, r18
     7b8:	8a 01       	movw	r16, r20
     7ba:	8e e1       	ldi	r24, 0x1E	; 30
     7bc:	c8 2e       	mov	r12, r24
     7be:	d1 2c       	mov	r13, r1
     7c0:	dc 82       	std	Y+4, r13	; 0x04
     7c2:	cb 82       	std	Y+3, r12	; 0x03
     7c4:	ed 82       	std	Y+5, r14	; 0x05
     7c6:	fe 82       	std	Y+6, r15	; 0x06
     7c8:	0f 83       	std	Y+7, r16	; 0x07
     7ca:	18 87       	std	Y+8, r17	; 0x08
     7cc:	c8 01       	movw	r24, r16
     7ce:	b7 01       	movw	r22, r14
     7d0:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__clzsi2>
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	18 16       	cp	r1, r24
     7d8:	19 06       	cpc	r1, r25
     7da:	84 f4       	brge	.+32     	; 0x7fc <__floatsisf+0xaa>
     7dc:	08 2e       	mov	r0, r24
     7de:	04 c0       	rjmp	.+8      	; 0x7e8 <__floatsisf+0x96>
     7e0:	ee 0c       	add	r14, r14
     7e2:	ff 1c       	adc	r15, r15
     7e4:	00 1f       	adc	r16, r16
     7e6:	11 1f       	adc	r17, r17
     7e8:	0a 94       	dec	r0
     7ea:	d2 f7       	brpl	.-12     	; 0x7e0 <__floatsisf+0x8e>
     7ec:	ed 82       	std	Y+5, r14	; 0x05
     7ee:	fe 82       	std	Y+6, r15	; 0x06
     7f0:	0f 83       	std	Y+7, r16	; 0x07
     7f2:	18 87       	std	Y+8, r17	; 0x08
     7f4:	c8 1a       	sub	r12, r24
     7f6:	d9 0a       	sbc	r13, r25
     7f8:	dc 82       	std	Y+4, r13	; 0x04
     7fa:	cb 82       	std	Y+3, r12	; 0x03
     7fc:	ba 82       	std	Y+2, r11	; 0x02
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     806:	28 96       	adiw	r28, 0x08	; 8
     808:	e9 e0       	ldi	r30, 0x09	; 9
     80a:	0c 94 59 11 	jmp	0x22b2	; 0x22b2 <__epilogue_restores__+0x12>

0000080e <__fixsfsi>:
     80e:	ac e0       	ldi	r26, 0x0C	; 12
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	ed e0       	ldi	r30, 0x0D	; 13
     814:	f4 e0       	ldi	r31, 0x04	; 4
     816:	0c 94 44 11 	jmp	0x2288	; 0x2288 <__prologue_saves__+0x20>
     81a:	69 83       	std	Y+1, r22	; 0x01
     81c:	7a 83       	std	Y+2, r23	; 0x02
     81e:	8b 83       	std	Y+3, r24	; 0x03
     820:	9c 83       	std	Y+4, r25	; 0x04
     822:	ce 01       	movw	r24, r28
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	be 01       	movw	r22, r28
     828:	6b 5f       	subi	r22, 0xFB	; 251
     82a:	7f 4f       	sbci	r23, 0xFF	; 255
     82c:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     830:	8d 81       	ldd	r24, Y+5	; 0x05
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	61 f1       	breq	.+88     	; 0x88e <__stack+0x2f>
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	50 f1       	brcs	.+84     	; 0x88e <__stack+0x2f>
     83a:	84 30       	cpi	r24, 0x04	; 4
     83c:	21 f4       	brne	.+8      	; 0x846 <__fixsfsi+0x38>
     83e:	8e 81       	ldd	r24, Y+6	; 0x06
     840:	88 23       	and	r24, r24
     842:	51 f1       	breq	.+84     	; 0x898 <__stack+0x39>
     844:	2e c0       	rjmp	.+92     	; 0x8a2 <__stack+0x43>
     846:	2f 81       	ldd	r18, Y+7	; 0x07
     848:	38 85       	ldd	r19, Y+8	; 0x08
     84a:	37 fd       	sbrc	r19, 7
     84c:	20 c0       	rjmp	.+64     	; 0x88e <__stack+0x2f>
     84e:	6e 81       	ldd	r22, Y+6	; 0x06
     850:	2f 31       	cpi	r18, 0x1F	; 31
     852:	31 05       	cpc	r19, r1
     854:	1c f0       	brlt	.+6      	; 0x85c <__fixsfsi+0x4e>
     856:	66 23       	and	r22, r22
     858:	f9 f0       	breq	.+62     	; 0x898 <__stack+0x39>
     85a:	23 c0       	rjmp	.+70     	; 0x8a2 <__stack+0x43>
     85c:	8e e1       	ldi	r24, 0x1E	; 30
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	82 1b       	sub	r24, r18
     862:	93 0b       	sbc	r25, r19
     864:	29 85       	ldd	r18, Y+9	; 0x09
     866:	3a 85       	ldd	r19, Y+10	; 0x0a
     868:	4b 85       	ldd	r20, Y+11	; 0x0b
     86a:	5c 85       	ldd	r21, Y+12	; 0x0c
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	56 95       	lsr	r21
     870:	47 95       	ror	r20
     872:	37 95       	ror	r19
     874:	27 95       	ror	r18
     876:	8a 95       	dec	r24
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	66 23       	and	r22, r22
     87c:	b1 f0       	breq	.+44     	; 0x8aa <__stack+0x4b>
     87e:	50 95       	com	r21
     880:	40 95       	com	r20
     882:	30 95       	com	r19
     884:	21 95       	neg	r18
     886:	3f 4f       	sbci	r19, 0xFF	; 255
     888:	4f 4f       	sbci	r20, 0xFF	; 255
     88a:	5f 4f       	sbci	r21, 0xFF	; 255
     88c:	0e c0       	rjmp	.+28     	; 0x8aa <__stack+0x4b>
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	09 c0       	rjmp	.+18     	; 0x8aa <__stack+0x4b>
     898:	2f ef       	ldi	r18, 0xFF	; 255
     89a:	3f ef       	ldi	r19, 0xFF	; 255
     89c:	4f ef       	ldi	r20, 0xFF	; 255
     89e:	5f e7       	ldi	r21, 0x7F	; 127
     8a0:	04 c0       	rjmp	.+8      	; 0x8aa <__stack+0x4b>
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	50 e8       	ldi	r21, 0x80	; 128
     8aa:	b9 01       	movw	r22, r18
     8ac:	ca 01       	movw	r24, r20
     8ae:	2c 96       	adiw	r28, 0x0c	; 12
     8b0:	e2 e0       	ldi	r30, 0x02	; 2
     8b2:	0c 94 60 11 	jmp	0x22c0	; 0x22c0 <__epilogue_restores__+0x20>

000008b6 <__clzsi2>:
     8b6:	ef 92       	push	r14
     8b8:	ff 92       	push	r15
     8ba:	0f 93       	push	r16
     8bc:	1f 93       	push	r17
     8be:	7b 01       	movw	r14, r22
     8c0:	8c 01       	movw	r16, r24
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	e8 16       	cp	r14, r24
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	f8 06       	cpc	r15, r24
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	08 07       	cpc	r16, r24
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	18 07       	cpc	r17, r24
     8d2:	88 f4       	brcc	.+34     	; 0x8f6 <__clzsi2+0x40>
     8d4:	8f ef       	ldi	r24, 0xFF	; 255
     8d6:	e8 16       	cp	r14, r24
     8d8:	f1 04       	cpc	r15, r1
     8da:	01 05       	cpc	r16, r1
     8dc:	11 05       	cpc	r17, r1
     8de:	31 f0       	breq	.+12     	; 0x8ec <__clzsi2+0x36>
     8e0:	28 f0       	brcs	.+10     	; 0x8ec <__clzsi2+0x36>
     8e2:	88 e0       	ldi	r24, 0x08	; 8
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	b0 e0       	ldi	r27, 0x00	; 0
     8ea:	17 c0       	rjmp	.+46     	; 0x91a <__clzsi2+0x64>
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	a0 e0       	ldi	r26, 0x00	; 0
     8f2:	b0 e0       	ldi	r27, 0x00	; 0
     8f4:	12 c0       	rjmp	.+36     	; 0x91a <__clzsi2+0x64>
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	e8 16       	cp	r14, r24
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	f8 06       	cpc	r15, r24
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	08 07       	cpc	r16, r24
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	18 07       	cpc	r17, r24
     906:	28 f0       	brcs	.+10     	; 0x912 <__clzsi2+0x5c>
     908:	88 e1       	ldi	r24, 0x18	; 24
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e0       	ldi	r26, 0x00	; 0
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	04 c0       	rjmp	.+8      	; 0x91a <__clzsi2+0x64>
     912:	80 e1       	ldi	r24, 0x10	; 16
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a0 e0       	ldi	r26, 0x00	; 0
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	20 e2       	ldi	r18, 0x20	; 32
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	28 1b       	sub	r18, r24
     924:	39 0b       	sbc	r19, r25
     926:	4a 0b       	sbc	r20, r26
     928:	5b 0b       	sbc	r21, r27
     92a:	04 c0       	rjmp	.+8      	; 0x934 <__clzsi2+0x7e>
     92c:	16 95       	lsr	r17
     92e:	07 95       	ror	r16
     930:	f7 94       	ror	r15
     932:	e7 94       	ror	r14
     934:	8a 95       	dec	r24
     936:	d2 f7       	brpl	.-12     	; 0x92c <__clzsi2+0x76>
     938:	f7 01       	movw	r30, r14
     93a:	eb 58       	subi	r30, 0x8B	; 139
     93c:	ff 4f       	sbci	r31, 0xFF	; 255
     93e:	80 81       	ld	r24, Z
     940:	28 1b       	sub	r18, r24
     942:	31 09       	sbc	r19, r1
     944:	41 09       	sbc	r20, r1
     946:	51 09       	sbc	r21, r1
     948:	c9 01       	movw	r24, r18
     94a:	1f 91       	pop	r17
     94c:	0f 91       	pop	r16
     94e:	ff 90       	pop	r15
     950:	ef 90       	pop	r14
     952:	08 95       	ret

00000954 <__pack_f>:
     954:	df 92       	push	r13
     956:	ef 92       	push	r14
     958:	ff 92       	push	r15
     95a:	0f 93       	push	r16
     95c:	1f 93       	push	r17
     95e:	fc 01       	movw	r30, r24
     960:	e4 80       	ldd	r14, Z+4	; 0x04
     962:	f5 80       	ldd	r15, Z+5	; 0x05
     964:	06 81       	ldd	r16, Z+6	; 0x06
     966:	17 81       	ldd	r17, Z+7	; 0x07
     968:	d1 80       	ldd	r13, Z+1	; 0x01
     96a:	80 81       	ld	r24, Z
     96c:	82 30       	cpi	r24, 0x02	; 2
     96e:	48 f4       	brcc	.+18     	; 0x982 <__pack_f+0x2e>
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	a0 e1       	ldi	r26, 0x10	; 16
     976:	b0 e0       	ldi	r27, 0x00	; 0
     978:	e8 2a       	or	r14, r24
     97a:	f9 2a       	or	r15, r25
     97c:	0a 2b       	or	r16, r26
     97e:	1b 2b       	or	r17, r27
     980:	a5 c0       	rjmp	.+330    	; 0xacc <__pack_f+0x178>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	09 f4       	brne	.+2      	; 0x988 <__pack_f+0x34>
     986:	9f c0       	rjmp	.+318    	; 0xac6 <__pack_f+0x172>
     988:	82 30       	cpi	r24, 0x02	; 2
     98a:	21 f4       	brne	.+8      	; 0x994 <__pack_f+0x40>
     98c:	ee 24       	eor	r14, r14
     98e:	ff 24       	eor	r15, r15
     990:	87 01       	movw	r16, r14
     992:	05 c0       	rjmp	.+10     	; 0x99e <__pack_f+0x4a>
     994:	e1 14       	cp	r14, r1
     996:	f1 04       	cpc	r15, r1
     998:	01 05       	cpc	r16, r1
     99a:	11 05       	cpc	r17, r1
     99c:	19 f4       	brne	.+6      	; 0x9a4 <__pack_f+0x50>
     99e:	e0 e0       	ldi	r30, 0x00	; 0
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	96 c0       	rjmp	.+300    	; 0xad0 <__pack_f+0x17c>
     9a4:	62 81       	ldd	r22, Z+2	; 0x02
     9a6:	73 81       	ldd	r23, Z+3	; 0x03
     9a8:	9f ef       	ldi	r25, 0xFF	; 255
     9aa:	62 38       	cpi	r22, 0x82	; 130
     9ac:	79 07       	cpc	r23, r25
     9ae:	0c f0       	brlt	.+2      	; 0x9b2 <__pack_f+0x5e>
     9b0:	5b c0       	rjmp	.+182    	; 0xa68 <__pack_f+0x114>
     9b2:	22 e8       	ldi	r18, 0x82	; 130
     9b4:	3f ef       	ldi	r19, 0xFF	; 255
     9b6:	26 1b       	sub	r18, r22
     9b8:	37 0b       	sbc	r19, r23
     9ba:	2a 31       	cpi	r18, 0x1A	; 26
     9bc:	31 05       	cpc	r19, r1
     9be:	2c f0       	brlt	.+10     	; 0x9ca <__pack_f+0x76>
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	40 e0       	ldi	r20, 0x00	; 0
     9c6:	50 e0       	ldi	r21, 0x00	; 0
     9c8:	2a c0       	rjmp	.+84     	; 0xa1e <__pack_f+0xca>
     9ca:	b8 01       	movw	r22, r16
     9cc:	a7 01       	movw	r20, r14
     9ce:	02 2e       	mov	r0, r18
     9d0:	04 c0       	rjmp	.+8      	; 0x9da <__pack_f+0x86>
     9d2:	76 95       	lsr	r23
     9d4:	67 95       	ror	r22
     9d6:	57 95       	ror	r21
     9d8:	47 95       	ror	r20
     9da:	0a 94       	dec	r0
     9dc:	d2 f7       	brpl	.-12     	; 0x9d2 <__pack_f+0x7e>
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	a0 e0       	ldi	r26, 0x00	; 0
     9e4:	b0 e0       	ldi	r27, 0x00	; 0
     9e6:	04 c0       	rjmp	.+8      	; 0x9f0 <__pack_f+0x9c>
     9e8:	88 0f       	add	r24, r24
     9ea:	99 1f       	adc	r25, r25
     9ec:	aa 1f       	adc	r26, r26
     9ee:	bb 1f       	adc	r27, r27
     9f0:	2a 95       	dec	r18
     9f2:	d2 f7       	brpl	.-12     	; 0x9e8 <__pack_f+0x94>
     9f4:	01 97       	sbiw	r24, 0x01	; 1
     9f6:	a1 09       	sbc	r26, r1
     9f8:	b1 09       	sbc	r27, r1
     9fa:	8e 21       	and	r24, r14
     9fc:	9f 21       	and	r25, r15
     9fe:	a0 23       	and	r26, r16
     a00:	b1 23       	and	r27, r17
     a02:	00 97       	sbiw	r24, 0x00	; 0
     a04:	a1 05       	cpc	r26, r1
     a06:	b1 05       	cpc	r27, r1
     a08:	21 f0       	breq	.+8      	; 0xa12 <__pack_f+0xbe>
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	a0 e0       	ldi	r26, 0x00	; 0
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	9a 01       	movw	r18, r20
     a14:	ab 01       	movw	r20, r22
     a16:	28 2b       	or	r18, r24
     a18:	39 2b       	or	r19, r25
     a1a:	4a 2b       	or	r20, r26
     a1c:	5b 2b       	or	r21, r27
     a1e:	da 01       	movw	r26, r20
     a20:	c9 01       	movw	r24, r18
     a22:	8f 77       	andi	r24, 0x7F	; 127
     a24:	90 70       	andi	r25, 0x00	; 0
     a26:	a0 70       	andi	r26, 0x00	; 0
     a28:	b0 70       	andi	r27, 0x00	; 0
     a2a:	80 34       	cpi	r24, 0x40	; 64
     a2c:	91 05       	cpc	r25, r1
     a2e:	a1 05       	cpc	r26, r1
     a30:	b1 05       	cpc	r27, r1
     a32:	39 f4       	brne	.+14     	; 0xa42 <__pack_f+0xee>
     a34:	27 ff       	sbrs	r18, 7
     a36:	09 c0       	rjmp	.+18     	; 0xa4a <__pack_f+0xf6>
     a38:	20 5c       	subi	r18, 0xC0	; 192
     a3a:	3f 4f       	sbci	r19, 0xFF	; 255
     a3c:	4f 4f       	sbci	r20, 0xFF	; 255
     a3e:	5f 4f       	sbci	r21, 0xFF	; 255
     a40:	04 c0       	rjmp	.+8      	; 0xa4a <__pack_f+0xf6>
     a42:	21 5c       	subi	r18, 0xC1	; 193
     a44:	3f 4f       	sbci	r19, 0xFF	; 255
     a46:	4f 4f       	sbci	r20, 0xFF	; 255
     a48:	5f 4f       	sbci	r21, 0xFF	; 255
     a4a:	e0 e0       	ldi	r30, 0x00	; 0
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	20 30       	cpi	r18, 0x00	; 0
     a50:	a0 e0       	ldi	r26, 0x00	; 0
     a52:	3a 07       	cpc	r19, r26
     a54:	a0 e0       	ldi	r26, 0x00	; 0
     a56:	4a 07       	cpc	r20, r26
     a58:	a0 e4       	ldi	r26, 0x40	; 64
     a5a:	5a 07       	cpc	r21, r26
     a5c:	10 f0       	brcs	.+4      	; 0xa62 <__pack_f+0x10e>
     a5e:	e1 e0       	ldi	r30, 0x01	; 1
     a60:	f0 e0       	ldi	r31, 0x00	; 0
     a62:	79 01       	movw	r14, r18
     a64:	8a 01       	movw	r16, r20
     a66:	27 c0       	rjmp	.+78     	; 0xab6 <__pack_f+0x162>
     a68:	60 38       	cpi	r22, 0x80	; 128
     a6a:	71 05       	cpc	r23, r1
     a6c:	64 f5       	brge	.+88     	; 0xac6 <__pack_f+0x172>
     a6e:	fb 01       	movw	r30, r22
     a70:	e1 58       	subi	r30, 0x81	; 129
     a72:	ff 4f       	sbci	r31, 0xFF	; 255
     a74:	d8 01       	movw	r26, r16
     a76:	c7 01       	movw	r24, r14
     a78:	8f 77       	andi	r24, 0x7F	; 127
     a7a:	90 70       	andi	r25, 0x00	; 0
     a7c:	a0 70       	andi	r26, 0x00	; 0
     a7e:	b0 70       	andi	r27, 0x00	; 0
     a80:	80 34       	cpi	r24, 0x40	; 64
     a82:	91 05       	cpc	r25, r1
     a84:	a1 05       	cpc	r26, r1
     a86:	b1 05       	cpc	r27, r1
     a88:	39 f4       	brne	.+14     	; 0xa98 <__pack_f+0x144>
     a8a:	e7 fe       	sbrs	r14, 7
     a8c:	0d c0       	rjmp	.+26     	; 0xaa8 <__pack_f+0x154>
     a8e:	80 e4       	ldi	r24, 0x40	; 64
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	a0 e0       	ldi	r26, 0x00	; 0
     a94:	b0 e0       	ldi	r27, 0x00	; 0
     a96:	04 c0       	rjmp	.+8      	; 0xaa0 <__pack_f+0x14c>
     a98:	8f e3       	ldi	r24, 0x3F	; 63
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	a0 e0       	ldi	r26, 0x00	; 0
     a9e:	b0 e0       	ldi	r27, 0x00	; 0
     aa0:	e8 0e       	add	r14, r24
     aa2:	f9 1e       	adc	r15, r25
     aa4:	0a 1f       	adc	r16, r26
     aa6:	1b 1f       	adc	r17, r27
     aa8:	17 ff       	sbrs	r17, 7
     aaa:	05 c0       	rjmp	.+10     	; 0xab6 <__pack_f+0x162>
     aac:	16 95       	lsr	r17
     aae:	07 95       	ror	r16
     ab0:	f7 94       	ror	r15
     ab2:	e7 94       	ror	r14
     ab4:	31 96       	adiw	r30, 0x01	; 1
     ab6:	87 e0       	ldi	r24, 0x07	; 7
     ab8:	16 95       	lsr	r17
     aba:	07 95       	ror	r16
     abc:	f7 94       	ror	r15
     abe:	e7 94       	ror	r14
     ac0:	8a 95       	dec	r24
     ac2:	d1 f7       	brne	.-12     	; 0xab8 <__pack_f+0x164>
     ac4:	05 c0       	rjmp	.+10     	; 0xad0 <__pack_f+0x17c>
     ac6:	ee 24       	eor	r14, r14
     ac8:	ff 24       	eor	r15, r15
     aca:	87 01       	movw	r16, r14
     acc:	ef ef       	ldi	r30, 0xFF	; 255
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	6e 2f       	mov	r22, r30
     ad2:	67 95       	ror	r22
     ad4:	66 27       	eor	r22, r22
     ad6:	67 95       	ror	r22
     ad8:	90 2f       	mov	r25, r16
     ada:	9f 77       	andi	r25, 0x7F	; 127
     adc:	d7 94       	ror	r13
     ade:	dd 24       	eor	r13, r13
     ae0:	d7 94       	ror	r13
     ae2:	8e 2f       	mov	r24, r30
     ae4:	86 95       	lsr	r24
     ae6:	49 2f       	mov	r20, r25
     ae8:	46 2b       	or	r20, r22
     aea:	58 2f       	mov	r21, r24
     aec:	5d 29       	or	r21, r13
     aee:	b7 01       	movw	r22, r14
     af0:	ca 01       	movw	r24, r20
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	ff 90       	pop	r15
     af8:	ef 90       	pop	r14
     afa:	df 90       	pop	r13
     afc:	08 95       	ret

00000afe <__unpack_f>:
     afe:	fc 01       	movw	r30, r24
     b00:	db 01       	movw	r26, r22
     b02:	40 81       	ld	r20, Z
     b04:	51 81       	ldd	r21, Z+1	; 0x01
     b06:	22 81       	ldd	r18, Z+2	; 0x02
     b08:	62 2f       	mov	r22, r18
     b0a:	6f 77       	andi	r22, 0x7F	; 127
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	22 1f       	adc	r18, r18
     b10:	22 27       	eor	r18, r18
     b12:	22 1f       	adc	r18, r18
     b14:	93 81       	ldd	r25, Z+3	; 0x03
     b16:	89 2f       	mov	r24, r25
     b18:	88 0f       	add	r24, r24
     b1a:	82 2b       	or	r24, r18
     b1c:	28 2f       	mov	r18, r24
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	99 1f       	adc	r25, r25
     b22:	99 27       	eor	r25, r25
     b24:	99 1f       	adc	r25, r25
     b26:	11 96       	adiw	r26, 0x01	; 1
     b28:	9c 93       	st	X, r25
     b2a:	11 97       	sbiw	r26, 0x01	; 1
     b2c:	21 15       	cp	r18, r1
     b2e:	31 05       	cpc	r19, r1
     b30:	a9 f5       	brne	.+106    	; 0xb9c <__unpack_f+0x9e>
     b32:	41 15       	cp	r20, r1
     b34:	51 05       	cpc	r21, r1
     b36:	61 05       	cpc	r22, r1
     b38:	71 05       	cpc	r23, r1
     b3a:	11 f4       	brne	.+4      	; 0xb40 <__unpack_f+0x42>
     b3c:	82 e0       	ldi	r24, 0x02	; 2
     b3e:	37 c0       	rjmp	.+110    	; 0xbae <__unpack_f+0xb0>
     b40:	82 e8       	ldi	r24, 0x82	; 130
     b42:	9f ef       	ldi	r25, 0xFF	; 255
     b44:	13 96       	adiw	r26, 0x03	; 3
     b46:	9c 93       	st	X, r25
     b48:	8e 93       	st	-X, r24
     b4a:	12 97       	sbiw	r26, 0x02	; 2
     b4c:	9a 01       	movw	r18, r20
     b4e:	ab 01       	movw	r20, r22
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	6a 95       	dec	r22
     b5c:	d1 f7       	brne	.-12     	; 0xb52 <__unpack_f+0x54>
     b5e:	83 e0       	ldi	r24, 0x03	; 3
     b60:	8c 93       	st	X, r24
     b62:	0d c0       	rjmp	.+26     	; 0xb7e <__unpack_f+0x80>
     b64:	22 0f       	add	r18, r18
     b66:	33 1f       	adc	r19, r19
     b68:	44 1f       	adc	r20, r20
     b6a:	55 1f       	adc	r21, r21
     b6c:	12 96       	adiw	r26, 0x02	; 2
     b6e:	8d 91       	ld	r24, X+
     b70:	9c 91       	ld	r25, X
     b72:	13 97       	sbiw	r26, 0x03	; 3
     b74:	01 97       	sbiw	r24, 0x01	; 1
     b76:	13 96       	adiw	r26, 0x03	; 3
     b78:	9c 93       	st	X, r25
     b7a:	8e 93       	st	-X, r24
     b7c:	12 97       	sbiw	r26, 0x02	; 2
     b7e:	20 30       	cpi	r18, 0x00	; 0
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	38 07       	cpc	r19, r24
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	48 07       	cpc	r20, r24
     b88:	80 e4       	ldi	r24, 0x40	; 64
     b8a:	58 07       	cpc	r21, r24
     b8c:	58 f3       	brcs	.-42     	; 0xb64 <__unpack_f+0x66>
     b8e:	14 96       	adiw	r26, 0x04	; 4
     b90:	2d 93       	st	X+, r18
     b92:	3d 93       	st	X+, r19
     b94:	4d 93       	st	X+, r20
     b96:	5c 93       	st	X, r21
     b98:	17 97       	sbiw	r26, 0x07	; 7
     b9a:	08 95       	ret
     b9c:	2f 3f       	cpi	r18, 0xFF	; 255
     b9e:	31 05       	cpc	r19, r1
     ba0:	79 f4       	brne	.+30     	; 0xbc0 <__unpack_f+0xc2>
     ba2:	41 15       	cp	r20, r1
     ba4:	51 05       	cpc	r21, r1
     ba6:	61 05       	cpc	r22, r1
     ba8:	71 05       	cpc	r23, r1
     baa:	19 f4       	brne	.+6      	; 0xbb2 <__unpack_f+0xb4>
     bac:	84 e0       	ldi	r24, 0x04	; 4
     bae:	8c 93       	st	X, r24
     bb0:	08 95       	ret
     bb2:	64 ff       	sbrs	r22, 4
     bb4:	03 c0       	rjmp	.+6      	; 0xbbc <__unpack_f+0xbe>
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	8c 93       	st	X, r24
     bba:	12 c0       	rjmp	.+36     	; 0xbe0 <__unpack_f+0xe2>
     bbc:	1c 92       	st	X, r1
     bbe:	10 c0       	rjmp	.+32     	; 0xbe0 <__unpack_f+0xe2>
     bc0:	2f 57       	subi	r18, 0x7F	; 127
     bc2:	30 40       	sbci	r19, 0x00	; 0
     bc4:	13 96       	adiw	r26, 0x03	; 3
     bc6:	3c 93       	st	X, r19
     bc8:	2e 93       	st	-X, r18
     bca:	12 97       	sbiw	r26, 0x02	; 2
     bcc:	83 e0       	ldi	r24, 0x03	; 3
     bce:	8c 93       	st	X, r24
     bd0:	87 e0       	ldi	r24, 0x07	; 7
     bd2:	44 0f       	add	r20, r20
     bd4:	55 1f       	adc	r21, r21
     bd6:	66 1f       	adc	r22, r22
     bd8:	77 1f       	adc	r23, r23
     bda:	8a 95       	dec	r24
     bdc:	d1 f7       	brne	.-12     	; 0xbd2 <__unpack_f+0xd4>
     bde:	70 64       	ori	r23, 0x40	; 64
     be0:	14 96       	adiw	r26, 0x04	; 4
     be2:	4d 93       	st	X+, r20
     be4:	5d 93       	st	X+, r21
     be6:	6d 93       	st	X+, r22
     be8:	7c 93       	st	X, r23
     bea:	17 97       	sbiw	r26, 0x07	; 7
     bec:	08 95       	ret

00000bee <__fpcmp_parts_f>:
     bee:	1f 93       	push	r17
     bf0:	dc 01       	movw	r26, r24
     bf2:	fb 01       	movw	r30, r22
     bf4:	9c 91       	ld	r25, X
     bf6:	92 30       	cpi	r25, 0x02	; 2
     bf8:	08 f4       	brcc	.+2      	; 0xbfc <__fpcmp_parts_f+0xe>
     bfa:	47 c0       	rjmp	.+142    	; 0xc8a <__fpcmp_parts_f+0x9c>
     bfc:	80 81       	ld	r24, Z
     bfe:	82 30       	cpi	r24, 0x02	; 2
     c00:	08 f4       	brcc	.+2      	; 0xc04 <__fpcmp_parts_f+0x16>
     c02:	43 c0       	rjmp	.+134    	; 0xc8a <__fpcmp_parts_f+0x9c>
     c04:	94 30       	cpi	r25, 0x04	; 4
     c06:	51 f4       	brne	.+20     	; 0xc1c <__fpcmp_parts_f+0x2e>
     c08:	11 96       	adiw	r26, 0x01	; 1
     c0a:	1c 91       	ld	r17, X
     c0c:	84 30       	cpi	r24, 0x04	; 4
     c0e:	99 f5       	brne	.+102    	; 0xc76 <__fpcmp_parts_f+0x88>
     c10:	81 81       	ldd	r24, Z+1	; 0x01
     c12:	68 2f       	mov	r22, r24
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	61 1b       	sub	r22, r17
     c18:	71 09       	sbc	r23, r1
     c1a:	3f c0       	rjmp	.+126    	; 0xc9a <__fpcmp_parts_f+0xac>
     c1c:	84 30       	cpi	r24, 0x04	; 4
     c1e:	21 f0       	breq	.+8      	; 0xc28 <__fpcmp_parts_f+0x3a>
     c20:	92 30       	cpi	r25, 0x02	; 2
     c22:	31 f4       	brne	.+12     	; 0xc30 <__fpcmp_parts_f+0x42>
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	b9 f1       	breq	.+110    	; 0xc96 <__fpcmp_parts_f+0xa8>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	88 23       	and	r24, r24
     c2c:	89 f1       	breq	.+98     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c2e:	2d c0       	rjmp	.+90     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c30:	11 96       	adiw	r26, 0x01	; 1
     c32:	1c 91       	ld	r17, X
     c34:	11 97       	sbiw	r26, 0x01	; 1
     c36:	82 30       	cpi	r24, 0x02	; 2
     c38:	f1 f0       	breq	.+60     	; 0xc76 <__fpcmp_parts_f+0x88>
     c3a:	81 81       	ldd	r24, Z+1	; 0x01
     c3c:	18 17       	cp	r17, r24
     c3e:	d9 f4       	brne	.+54     	; 0xc76 <__fpcmp_parts_f+0x88>
     c40:	12 96       	adiw	r26, 0x02	; 2
     c42:	2d 91       	ld	r18, X+
     c44:	3c 91       	ld	r19, X
     c46:	13 97       	sbiw	r26, 0x03	; 3
     c48:	82 81       	ldd	r24, Z+2	; 0x02
     c4a:	93 81       	ldd	r25, Z+3	; 0x03
     c4c:	82 17       	cp	r24, r18
     c4e:	93 07       	cpc	r25, r19
     c50:	94 f0       	brlt	.+36     	; 0xc76 <__fpcmp_parts_f+0x88>
     c52:	28 17       	cp	r18, r24
     c54:	39 07       	cpc	r19, r25
     c56:	bc f0       	brlt	.+46     	; 0xc86 <__fpcmp_parts_f+0x98>
     c58:	14 96       	adiw	r26, 0x04	; 4
     c5a:	8d 91       	ld	r24, X+
     c5c:	9d 91       	ld	r25, X+
     c5e:	0d 90       	ld	r0, X+
     c60:	bc 91       	ld	r27, X
     c62:	a0 2d       	mov	r26, r0
     c64:	24 81       	ldd	r18, Z+4	; 0x04
     c66:	35 81       	ldd	r19, Z+5	; 0x05
     c68:	46 81       	ldd	r20, Z+6	; 0x06
     c6a:	57 81       	ldd	r21, Z+7	; 0x07
     c6c:	28 17       	cp	r18, r24
     c6e:	39 07       	cpc	r19, r25
     c70:	4a 07       	cpc	r20, r26
     c72:	5b 07       	cpc	r21, r27
     c74:	18 f4       	brcc	.+6      	; 0xc7c <__fpcmp_parts_f+0x8e>
     c76:	11 23       	and	r17, r17
     c78:	41 f0       	breq	.+16     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c7a:	0a c0       	rjmp	.+20     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c7c:	82 17       	cp	r24, r18
     c7e:	93 07       	cpc	r25, r19
     c80:	a4 07       	cpc	r26, r20
     c82:	b5 07       	cpc	r27, r21
     c84:	40 f4       	brcc	.+16     	; 0xc96 <__fpcmp_parts_f+0xa8>
     c86:	11 23       	and	r17, r17
     c88:	19 f0       	breq	.+6      	; 0xc90 <__fpcmp_parts_f+0xa2>
     c8a:	61 e0       	ldi	r22, 0x01	; 1
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	05 c0       	rjmp	.+10     	; 0xc9a <__fpcmp_parts_f+0xac>
     c90:	6f ef       	ldi	r22, 0xFF	; 255
     c92:	7f ef       	ldi	r23, 0xFF	; 255
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <__fpcmp_parts_f+0xac>
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	cb 01       	movw	r24, r22
     c9c:	1f 91       	pop	r17
     c9e:	08 95       	ret

00000ca0 <DIO_VoidSetPinDirection>:
#include"../../LIB/STD_Type.h"

#include"DIO_Interface.h"


void DIO_VoidSetPinDirection(u8 Copy_u8PortName,u8 Copy_u8PinNumber,u8 Copy_PinState){
     ca0:	df 93       	push	r29
     ca2:	cf 93       	push	r28
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
     ca8:	2d 97       	sbiw	r28, 0x0d	; 13
     caa:	0f b6       	in	r0, 0x3f	; 63
     cac:	f8 94       	cli
     cae:	de bf       	out	0x3e, r29	; 62
     cb0:	0f be       	out	0x3f, r0	; 63
     cb2:	cd bf       	out	0x3d, r28	; 61
     cb4:	89 83       	std	Y+1, r24	; 0x01
     cb6:	6a 83       	std	Y+2, r22	; 0x02
     cb8:	4b 83       	std	Y+3, r20	; 0x03
	//Better Array to Be {&DDRA,&DDRB,&DDRC,&DDRD}
	//u8* arr={&DDRA,&DDRB,&DDRC,&DDRD};
	//arr[Copy_u8PortName]
	switch(Copy_u8PortName){
     cba:	89 81       	ldd	r24, Y+1	; 0x01
     cbc:	28 2f       	mov	r18, r24
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	3d 87       	std	Y+13, r19	; 0x0d
     cc2:	2c 87       	std	Y+12, r18	; 0x0c
     cc4:	8c 85       	ldd	r24, Y+12	; 0x0c
     cc6:	9d 85       	ldd	r25, Y+13	; 0x0d
     cc8:	81 30       	cpi	r24, 0x01	; 1
     cca:	91 05       	cpc	r25, r1
     ccc:	09 f4       	brne	.+2      	; 0xcd0 <DIO_VoidSetPinDirection+0x30>
     cce:	4f c0       	rjmp	.+158    	; 0xd6e <DIO_VoidSetPinDirection+0xce>
     cd0:	2c 85       	ldd	r18, Y+12	; 0x0c
     cd2:	3d 85       	ldd	r19, Y+13	; 0x0d
     cd4:	22 30       	cpi	r18, 0x02	; 2
     cd6:	31 05       	cpc	r19, r1
     cd8:	2c f4       	brge	.+10     	; 0xce4 <DIO_VoidSetPinDirection+0x44>
     cda:	8c 85       	ldd	r24, Y+12	; 0x0c
     cdc:	9d 85       	ldd	r25, Y+13	; 0x0d
     cde:	00 97       	sbiw	r24, 0x00	; 0
     ce0:	71 f0       	breq	.+28     	; 0xcfe <DIO_VoidSetPinDirection+0x5e>
     ce2:	eb c0       	rjmp	.+470    	; 0xeba <DIO_VoidSetPinDirection+0x21a>
     ce4:	2c 85       	ldd	r18, Y+12	; 0x0c
     ce6:	3d 85       	ldd	r19, Y+13	; 0x0d
     ce8:	22 30       	cpi	r18, 0x02	; 2
     cea:	31 05       	cpc	r19, r1
     cec:	09 f4       	brne	.+2      	; 0xcf0 <DIO_VoidSetPinDirection+0x50>
     cee:	77 c0       	rjmp	.+238    	; 0xdde <DIO_VoidSetPinDirection+0x13e>
     cf0:	8c 85       	ldd	r24, Y+12	; 0x0c
     cf2:	9d 85       	ldd	r25, Y+13	; 0x0d
     cf4:	83 30       	cpi	r24, 0x03	; 3
     cf6:	91 05       	cpc	r25, r1
     cf8:	09 f4       	brne	.+2      	; 0xcfc <DIO_VoidSetPinDirection+0x5c>
     cfa:	a9 c0       	rjmp	.+338    	; 0xe4e <DIO_VoidSetPinDirection+0x1ae>
     cfc:	de c0       	rjmp	.+444    	; 0xeba <DIO_VoidSetPinDirection+0x21a>
	case DIO_PORTA:
		switch(Copy_PinState){
     cfe:	8b 81       	ldd	r24, Y+3	; 0x03
     d00:	28 2f       	mov	r18, r24
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	3b 87       	std	Y+11, r19	; 0x0b
     d06:	2a 87       	std	Y+10, r18	; 0x0a
     d08:	8a 85       	ldd	r24, Y+10	; 0x0a
     d0a:	9b 85       	ldd	r25, Y+11	; 0x0b
     d0c:	00 97       	sbiw	r24, 0x00	; 0
     d0e:	d1 f0       	breq	.+52     	; 0xd44 <DIO_VoidSetPinDirection+0xa4>
     d10:	2a 85       	ldd	r18, Y+10	; 0x0a
     d12:	3b 85       	ldd	r19, Y+11	; 0x0b
     d14:	21 30       	cpi	r18, 0x01	; 1
     d16:	31 05       	cpc	r19, r1
     d18:	09 f0       	breq	.+2      	; 0xd1c <DIO_VoidSetPinDirection+0x7c>
     d1a:	cf c0       	rjmp	.+414    	; 0xeba <DIO_VoidSetPinDirection+0x21a>
		case OUTPUT:
			Set_Bit(DDRA,Copy_u8PinNumber);
     d1c:	aa e3       	ldi	r26, 0x3A	; 58
     d1e:	b0 e0       	ldi	r27, 0x00	; 0
     d20:	ea e3       	ldi	r30, 0x3A	; 58
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	80 81       	ld	r24, Z
     d26:	48 2f       	mov	r20, r24
     d28:	8a 81       	ldd	r24, Y+2	; 0x02
     d2a:	28 2f       	mov	r18, r24
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	81 e0       	ldi	r24, 0x01	; 1
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	02 2e       	mov	r0, r18
     d34:	02 c0       	rjmp	.+4      	; 0xd3a <DIO_VoidSetPinDirection+0x9a>
     d36:	88 0f       	add	r24, r24
     d38:	99 1f       	adc	r25, r25
     d3a:	0a 94       	dec	r0
     d3c:	e2 f7       	brpl	.-8      	; 0xd36 <DIO_VoidSetPinDirection+0x96>
     d3e:	84 2b       	or	r24, r20
     d40:	8c 93       	st	X, r24
     d42:	bb c0       	rjmp	.+374    	; 0xeba <DIO_VoidSetPinDirection+0x21a>
			break;
		case INPUT:
			CLR_Bit(DDRA,Copy_u8PinNumber);
     d44:	aa e3       	ldi	r26, 0x3A	; 58
     d46:	b0 e0       	ldi	r27, 0x00	; 0
     d48:	ea e3       	ldi	r30, 0x3A	; 58
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	80 81       	ld	r24, Z
     d4e:	48 2f       	mov	r20, r24
     d50:	8a 81       	ldd	r24, Y+2	; 0x02
     d52:	28 2f       	mov	r18, r24
     d54:	30 e0       	ldi	r19, 0x00	; 0
     d56:	81 e0       	ldi	r24, 0x01	; 1
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	02 2e       	mov	r0, r18
     d5c:	02 c0       	rjmp	.+4      	; 0xd62 <DIO_VoidSetPinDirection+0xc2>
     d5e:	88 0f       	add	r24, r24
     d60:	99 1f       	adc	r25, r25
     d62:	0a 94       	dec	r0
     d64:	e2 f7       	brpl	.-8      	; 0xd5e <DIO_VoidSetPinDirection+0xbe>
     d66:	80 95       	com	r24
     d68:	84 23       	and	r24, r20
     d6a:	8c 93       	st	X, r24
     d6c:	a6 c0       	rjmp	.+332    	; 0xeba <DIO_VoidSetPinDirection+0x21a>
			break;
		}
		break;
	case DIO_PORTB:
		switch(Copy_PinState){
     d6e:	8b 81       	ldd	r24, Y+3	; 0x03
     d70:	28 2f       	mov	r18, r24
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	39 87       	std	Y+9, r19	; 0x09
     d76:	28 87       	std	Y+8, r18	; 0x08
     d78:	88 85       	ldd	r24, Y+8	; 0x08
     d7a:	99 85       	ldd	r25, Y+9	; 0x09
     d7c:	00 97       	sbiw	r24, 0x00	; 0
     d7e:	d1 f0       	breq	.+52     	; 0xdb4 <DIO_VoidSetPinDirection+0x114>
     d80:	28 85       	ldd	r18, Y+8	; 0x08
     d82:	39 85       	ldd	r19, Y+9	; 0x09
     d84:	21 30       	cpi	r18, 0x01	; 1
     d86:	31 05       	cpc	r19, r1
     d88:	09 f0       	breq	.+2      	; 0xd8c <DIO_VoidSetPinDirection+0xec>
     d8a:	97 c0       	rjmp	.+302    	; 0xeba <DIO_VoidSetPinDirection+0x21a>
			case OUTPUT:
				Set_Bit(DDRB,Copy_u8PinNumber);
     d8c:	a7 e3       	ldi	r26, 0x37	; 55
     d8e:	b0 e0       	ldi	r27, 0x00	; 0
     d90:	e7 e3       	ldi	r30, 0x37	; 55
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	80 81       	ld	r24, Z
     d96:	48 2f       	mov	r20, r24
     d98:	8a 81       	ldd	r24, Y+2	; 0x02
     d9a:	28 2f       	mov	r18, r24
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	02 2e       	mov	r0, r18
     da4:	02 c0       	rjmp	.+4      	; 0xdaa <DIO_VoidSetPinDirection+0x10a>
     da6:	88 0f       	add	r24, r24
     da8:	99 1f       	adc	r25, r25
     daa:	0a 94       	dec	r0
     dac:	e2 f7       	brpl	.-8      	; 0xda6 <DIO_VoidSetPinDirection+0x106>
     dae:	84 2b       	or	r24, r20
     db0:	8c 93       	st	X, r24
     db2:	83 c0       	rjmp	.+262    	; 0xeba <DIO_VoidSetPinDirection+0x21a>
				break;
			case INPUT:
				CLR_Bit(DDRB,Copy_u8PinNumber);
     db4:	a7 e3       	ldi	r26, 0x37	; 55
     db6:	b0 e0       	ldi	r27, 0x00	; 0
     db8:	e7 e3       	ldi	r30, 0x37	; 55
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	80 81       	ld	r24, Z
     dbe:	48 2f       	mov	r20, r24
     dc0:	8a 81       	ldd	r24, Y+2	; 0x02
     dc2:	28 2f       	mov	r18, r24
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	81 e0       	ldi	r24, 0x01	; 1
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	02 2e       	mov	r0, r18
     dcc:	02 c0       	rjmp	.+4      	; 0xdd2 <DIO_VoidSetPinDirection+0x132>
     dce:	88 0f       	add	r24, r24
     dd0:	99 1f       	adc	r25, r25
     dd2:	0a 94       	dec	r0
     dd4:	e2 f7       	brpl	.-8      	; 0xdce <DIO_VoidSetPinDirection+0x12e>
     dd6:	80 95       	com	r24
     dd8:	84 23       	and	r24, r20
     dda:	8c 93       	st	X, r24
     ddc:	6e c0       	rjmp	.+220    	; 0xeba <DIO_VoidSetPinDirection+0x21a>
				break;}
		break;
	case DIO_PORTC:
		switch(Copy_PinState){
     dde:	8b 81       	ldd	r24, Y+3	; 0x03
     de0:	28 2f       	mov	r18, r24
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	3f 83       	std	Y+7, r19	; 0x07
     de6:	2e 83       	std	Y+6, r18	; 0x06
     de8:	8e 81       	ldd	r24, Y+6	; 0x06
     dea:	9f 81       	ldd	r25, Y+7	; 0x07
     dec:	00 97       	sbiw	r24, 0x00	; 0
     dee:	d1 f0       	breq	.+52     	; 0xe24 <DIO_VoidSetPinDirection+0x184>
     df0:	2e 81       	ldd	r18, Y+6	; 0x06
     df2:	3f 81       	ldd	r19, Y+7	; 0x07
     df4:	21 30       	cpi	r18, 0x01	; 1
     df6:	31 05       	cpc	r19, r1
     df8:	09 f0       	breq	.+2      	; 0xdfc <DIO_VoidSetPinDirection+0x15c>
     dfa:	5f c0       	rjmp	.+190    	; 0xeba <DIO_VoidSetPinDirection+0x21a>
			case OUTPUT:
				Set_Bit(DDRC,Copy_u8PinNumber);
     dfc:	a4 e3       	ldi	r26, 0x34	; 52
     dfe:	b0 e0       	ldi	r27, 0x00	; 0
     e00:	e4 e3       	ldi	r30, 0x34	; 52
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	80 81       	ld	r24, Z
     e06:	48 2f       	mov	r20, r24
     e08:	8a 81       	ldd	r24, Y+2	; 0x02
     e0a:	28 2f       	mov	r18, r24
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	02 2e       	mov	r0, r18
     e14:	02 c0       	rjmp	.+4      	; 0xe1a <DIO_VoidSetPinDirection+0x17a>
     e16:	88 0f       	add	r24, r24
     e18:	99 1f       	adc	r25, r25
     e1a:	0a 94       	dec	r0
     e1c:	e2 f7       	brpl	.-8      	; 0xe16 <DIO_VoidSetPinDirection+0x176>
     e1e:	84 2b       	or	r24, r20
     e20:	8c 93       	st	X, r24
     e22:	4b c0       	rjmp	.+150    	; 0xeba <DIO_VoidSetPinDirection+0x21a>
				break;
			case INPUT:
				CLR_Bit(DDRC,Copy_u8PinNumber);
     e24:	a4 e3       	ldi	r26, 0x34	; 52
     e26:	b0 e0       	ldi	r27, 0x00	; 0
     e28:	e4 e3       	ldi	r30, 0x34	; 52
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	80 81       	ld	r24, Z
     e2e:	48 2f       	mov	r20, r24
     e30:	8a 81       	ldd	r24, Y+2	; 0x02
     e32:	28 2f       	mov	r18, r24
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	02 2e       	mov	r0, r18
     e3c:	02 c0       	rjmp	.+4      	; 0xe42 <DIO_VoidSetPinDirection+0x1a2>
     e3e:	88 0f       	add	r24, r24
     e40:	99 1f       	adc	r25, r25
     e42:	0a 94       	dec	r0
     e44:	e2 f7       	brpl	.-8      	; 0xe3e <DIO_VoidSetPinDirection+0x19e>
     e46:	80 95       	com	r24
     e48:	84 23       	and	r24, r20
     e4a:	8c 93       	st	X, r24
     e4c:	36 c0       	rjmp	.+108    	; 0xeba <DIO_VoidSetPinDirection+0x21a>
				break;}
		break;
	case DIO_PORTD:
		switch(Copy_PinState){
     e4e:	8b 81       	ldd	r24, Y+3	; 0x03
     e50:	28 2f       	mov	r18, r24
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	3d 83       	std	Y+5, r19	; 0x05
     e56:	2c 83       	std	Y+4, r18	; 0x04
     e58:	8c 81       	ldd	r24, Y+4	; 0x04
     e5a:	9d 81       	ldd	r25, Y+5	; 0x05
     e5c:	00 97       	sbiw	r24, 0x00	; 0
     e5e:	c9 f0       	breq	.+50     	; 0xe92 <DIO_VoidSetPinDirection+0x1f2>
     e60:	2c 81       	ldd	r18, Y+4	; 0x04
     e62:	3d 81       	ldd	r19, Y+5	; 0x05
     e64:	21 30       	cpi	r18, 0x01	; 1
     e66:	31 05       	cpc	r19, r1
     e68:	41 f5       	brne	.+80     	; 0xeba <DIO_VoidSetPinDirection+0x21a>
			case OUTPUT:
				Set_Bit(DDRD,Copy_u8PinNumber);
     e6a:	a1 e3       	ldi	r26, 0x31	; 49
     e6c:	b0 e0       	ldi	r27, 0x00	; 0
     e6e:	e1 e3       	ldi	r30, 0x31	; 49
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	80 81       	ld	r24, Z
     e74:	48 2f       	mov	r20, r24
     e76:	8a 81       	ldd	r24, Y+2	; 0x02
     e78:	28 2f       	mov	r18, r24
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	81 e0       	ldi	r24, 0x01	; 1
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	02 2e       	mov	r0, r18
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <DIO_VoidSetPinDirection+0x1e8>
     e84:	88 0f       	add	r24, r24
     e86:	99 1f       	adc	r25, r25
     e88:	0a 94       	dec	r0
     e8a:	e2 f7       	brpl	.-8      	; 0xe84 <DIO_VoidSetPinDirection+0x1e4>
     e8c:	84 2b       	or	r24, r20
     e8e:	8c 93       	st	X, r24
     e90:	14 c0       	rjmp	.+40     	; 0xeba <DIO_VoidSetPinDirection+0x21a>
				break;
			case INPUT:
				CLR_Bit(DDRD,Copy_u8PinNumber);
     e92:	a1 e3       	ldi	r26, 0x31	; 49
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	e1 e3       	ldi	r30, 0x31	; 49
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	48 2f       	mov	r20, r24
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	02 2e       	mov	r0, r18
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <DIO_VoidSetPinDirection+0x210>
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	0a 94       	dec	r0
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <DIO_VoidSetPinDirection+0x20c>
     eb4:	80 95       	com	r24
     eb6:	84 23       	and	r24, r20
     eb8:	8c 93       	st	X, r24
				break;}
		break;

	}
}
     eba:	2d 96       	adiw	r28, 0x0d	; 13
     ebc:	0f b6       	in	r0, 0x3f	; 63
     ebe:	f8 94       	cli
     ec0:	de bf       	out	0x3e, r29	; 62
     ec2:	0f be       	out	0x3f, r0	; 63
     ec4:	cd bf       	out	0x3d, r28	; 61
     ec6:	cf 91       	pop	r28
     ec8:	df 91       	pop	r29
     eca:	08 95       	ret

00000ecc <DIO_VoidSetPinValue>:

void DIO_VoidSetPinValue(u8 Copy_u8PortName,u8 Copy_u8PinNumber,u8 Copy_PinValue){
     ecc:	df 93       	push	r29
     ece:	cf 93       	push	r28
     ed0:	cd b7       	in	r28, 0x3d	; 61
     ed2:	de b7       	in	r29, 0x3e	; 62
     ed4:	2d 97       	sbiw	r28, 0x0d	; 13
     ed6:	0f b6       	in	r0, 0x3f	; 63
     ed8:	f8 94       	cli
     eda:	de bf       	out	0x3e, r29	; 62
     edc:	0f be       	out	0x3f, r0	; 63
     ede:	cd bf       	out	0x3d, r28	; 61
     ee0:	89 83       	std	Y+1, r24	; 0x01
     ee2:	6a 83       	std	Y+2, r22	; 0x02
     ee4:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_u8PortName){
     ee6:	89 81       	ldd	r24, Y+1	; 0x01
     ee8:	28 2f       	mov	r18, r24
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	3d 87       	std	Y+13, r19	; 0x0d
     eee:	2c 87       	std	Y+12, r18	; 0x0c
     ef0:	8c 85       	ldd	r24, Y+12	; 0x0c
     ef2:	9d 85       	ldd	r25, Y+13	; 0x0d
     ef4:	81 30       	cpi	r24, 0x01	; 1
     ef6:	91 05       	cpc	r25, r1
     ef8:	09 f4       	brne	.+2      	; 0xefc <DIO_VoidSetPinValue+0x30>
     efa:	4f c0       	rjmp	.+158    	; 0xf9a <DIO_VoidSetPinValue+0xce>
     efc:	2c 85       	ldd	r18, Y+12	; 0x0c
     efe:	3d 85       	ldd	r19, Y+13	; 0x0d
     f00:	22 30       	cpi	r18, 0x02	; 2
     f02:	31 05       	cpc	r19, r1
     f04:	2c f4       	brge	.+10     	; 0xf10 <DIO_VoidSetPinValue+0x44>
     f06:	8c 85       	ldd	r24, Y+12	; 0x0c
     f08:	9d 85       	ldd	r25, Y+13	; 0x0d
     f0a:	00 97       	sbiw	r24, 0x00	; 0
     f0c:	71 f0       	breq	.+28     	; 0xf2a <DIO_VoidSetPinValue+0x5e>
     f0e:	eb c0       	rjmp	.+470    	; 0x10e6 <DIO_VoidSetPinValue+0x21a>
     f10:	2c 85       	ldd	r18, Y+12	; 0x0c
     f12:	3d 85       	ldd	r19, Y+13	; 0x0d
     f14:	22 30       	cpi	r18, 0x02	; 2
     f16:	31 05       	cpc	r19, r1
     f18:	09 f4       	brne	.+2      	; 0xf1c <DIO_VoidSetPinValue+0x50>
     f1a:	77 c0       	rjmp	.+238    	; 0x100a <DIO_VoidSetPinValue+0x13e>
     f1c:	8c 85       	ldd	r24, Y+12	; 0x0c
     f1e:	9d 85       	ldd	r25, Y+13	; 0x0d
     f20:	83 30       	cpi	r24, 0x03	; 3
     f22:	91 05       	cpc	r25, r1
     f24:	09 f4       	brne	.+2      	; 0xf28 <DIO_VoidSetPinValue+0x5c>
     f26:	a9 c0       	rjmp	.+338    	; 0x107a <DIO_VoidSetPinValue+0x1ae>
     f28:	de c0       	rjmp	.+444    	; 0x10e6 <DIO_VoidSetPinValue+0x21a>
	case DIO_PORTA:
		switch(Copy_PinValue){
     f2a:	8b 81       	ldd	r24, Y+3	; 0x03
     f2c:	28 2f       	mov	r18, r24
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	3b 87       	std	Y+11, r19	; 0x0b
     f32:	2a 87       	std	Y+10, r18	; 0x0a
     f34:	8a 85       	ldd	r24, Y+10	; 0x0a
     f36:	9b 85       	ldd	r25, Y+11	; 0x0b
     f38:	00 97       	sbiw	r24, 0x00	; 0
     f3a:	d1 f0       	breq	.+52     	; 0xf70 <DIO_VoidSetPinValue+0xa4>
     f3c:	2a 85       	ldd	r18, Y+10	; 0x0a
     f3e:	3b 85       	ldd	r19, Y+11	; 0x0b
     f40:	21 30       	cpi	r18, 0x01	; 1
     f42:	31 05       	cpc	r19, r1
     f44:	09 f0       	breq	.+2      	; 0xf48 <DIO_VoidSetPinValue+0x7c>
     f46:	cf c0       	rjmp	.+414    	; 0x10e6 <DIO_VoidSetPinValue+0x21a>
		case HIGH:
			Set_Bit(PORTA,Copy_u8PinNumber);
     f48:	ab e3       	ldi	r26, 0x3B	; 59
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	eb e3       	ldi	r30, 0x3B	; 59
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	80 81       	ld	r24, Z
     f52:	48 2f       	mov	r20, r24
     f54:	8a 81       	ldd	r24, Y+2	; 0x02
     f56:	28 2f       	mov	r18, r24
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	02 2e       	mov	r0, r18
     f60:	02 c0       	rjmp	.+4      	; 0xf66 <DIO_VoidSetPinValue+0x9a>
     f62:	88 0f       	add	r24, r24
     f64:	99 1f       	adc	r25, r25
     f66:	0a 94       	dec	r0
     f68:	e2 f7       	brpl	.-8      	; 0xf62 <DIO_VoidSetPinValue+0x96>
     f6a:	84 2b       	or	r24, r20
     f6c:	8c 93       	st	X, r24
     f6e:	bb c0       	rjmp	.+374    	; 0x10e6 <DIO_VoidSetPinValue+0x21a>
			break;
		case LOW:
			CLR_Bit(PORTA,Copy_u8PinNumber);
     f70:	ab e3       	ldi	r26, 0x3B	; 59
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	eb e3       	ldi	r30, 0x3B	; 59
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	48 2f       	mov	r20, r24
     f7c:	8a 81       	ldd	r24, Y+2	; 0x02
     f7e:	28 2f       	mov	r18, r24
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	02 2e       	mov	r0, r18
     f88:	02 c0       	rjmp	.+4      	; 0xf8e <DIO_VoidSetPinValue+0xc2>
     f8a:	88 0f       	add	r24, r24
     f8c:	99 1f       	adc	r25, r25
     f8e:	0a 94       	dec	r0
     f90:	e2 f7       	brpl	.-8      	; 0xf8a <DIO_VoidSetPinValue+0xbe>
     f92:	80 95       	com	r24
     f94:	84 23       	and	r24, r20
     f96:	8c 93       	st	X, r24
     f98:	a6 c0       	rjmp	.+332    	; 0x10e6 <DIO_VoidSetPinValue+0x21a>
			break;
		}
		break;
	case DIO_PORTB:
		switch(Copy_PinValue){
     f9a:	8b 81       	ldd	r24, Y+3	; 0x03
     f9c:	28 2f       	mov	r18, r24
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	39 87       	std	Y+9, r19	; 0x09
     fa2:	28 87       	std	Y+8, r18	; 0x08
     fa4:	88 85       	ldd	r24, Y+8	; 0x08
     fa6:	99 85       	ldd	r25, Y+9	; 0x09
     fa8:	00 97       	sbiw	r24, 0x00	; 0
     faa:	d1 f0       	breq	.+52     	; 0xfe0 <DIO_VoidSetPinValue+0x114>
     fac:	28 85       	ldd	r18, Y+8	; 0x08
     fae:	39 85       	ldd	r19, Y+9	; 0x09
     fb0:	21 30       	cpi	r18, 0x01	; 1
     fb2:	31 05       	cpc	r19, r1
     fb4:	09 f0       	breq	.+2      	; 0xfb8 <DIO_VoidSetPinValue+0xec>
     fb6:	97 c0       	rjmp	.+302    	; 0x10e6 <DIO_VoidSetPinValue+0x21a>
			case HIGH:
				Set_Bit(PORTB,Copy_u8PinNumber);
     fb8:	a8 e3       	ldi	r26, 0x38	; 56
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	e8 e3       	ldi	r30, 0x38	; 56
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	48 2f       	mov	r20, r24
     fc4:	8a 81       	ldd	r24, Y+2	; 0x02
     fc6:	28 2f       	mov	r18, r24
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	02 2e       	mov	r0, r18
     fd0:	02 c0       	rjmp	.+4      	; 0xfd6 <DIO_VoidSetPinValue+0x10a>
     fd2:	88 0f       	add	r24, r24
     fd4:	99 1f       	adc	r25, r25
     fd6:	0a 94       	dec	r0
     fd8:	e2 f7       	brpl	.-8      	; 0xfd2 <DIO_VoidSetPinValue+0x106>
     fda:	84 2b       	or	r24, r20
     fdc:	8c 93       	st	X, r24
     fde:	83 c0       	rjmp	.+262    	; 0x10e6 <DIO_VoidSetPinValue+0x21a>
				break;
			case LOW:
				CLR_Bit(PORTB,Copy_u8PinNumber);
     fe0:	a8 e3       	ldi	r26, 0x38	; 56
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	e8 e3       	ldi	r30, 0x38	; 56
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	48 2f       	mov	r20, r24
     fec:	8a 81       	ldd	r24, Y+2	; 0x02
     fee:	28 2f       	mov	r18, r24
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	02 2e       	mov	r0, r18
     ff8:	02 c0       	rjmp	.+4      	; 0xffe <DIO_VoidSetPinValue+0x132>
     ffa:	88 0f       	add	r24, r24
     ffc:	99 1f       	adc	r25, r25
     ffe:	0a 94       	dec	r0
    1000:	e2 f7       	brpl	.-8      	; 0xffa <DIO_VoidSetPinValue+0x12e>
    1002:	80 95       	com	r24
    1004:	84 23       	and	r24, r20
    1006:	8c 93       	st	X, r24
    1008:	6e c0       	rjmp	.+220    	; 0x10e6 <DIO_VoidSetPinValue+0x21a>
				break;}
		break;
	case DIO_PORTC:
		switch(Copy_PinValue){
    100a:	8b 81       	ldd	r24, Y+3	; 0x03
    100c:	28 2f       	mov	r18, r24
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	3f 83       	std	Y+7, r19	; 0x07
    1012:	2e 83       	std	Y+6, r18	; 0x06
    1014:	8e 81       	ldd	r24, Y+6	; 0x06
    1016:	9f 81       	ldd	r25, Y+7	; 0x07
    1018:	00 97       	sbiw	r24, 0x00	; 0
    101a:	d1 f0       	breq	.+52     	; 0x1050 <DIO_VoidSetPinValue+0x184>
    101c:	2e 81       	ldd	r18, Y+6	; 0x06
    101e:	3f 81       	ldd	r19, Y+7	; 0x07
    1020:	21 30       	cpi	r18, 0x01	; 1
    1022:	31 05       	cpc	r19, r1
    1024:	09 f0       	breq	.+2      	; 0x1028 <DIO_VoidSetPinValue+0x15c>
    1026:	5f c0       	rjmp	.+190    	; 0x10e6 <DIO_VoidSetPinValue+0x21a>
			case HIGH:
				Set_Bit(PORTC,Copy_u8PinNumber);
    1028:	a5 e3       	ldi	r26, 0x35	; 53
    102a:	b0 e0       	ldi	r27, 0x00	; 0
    102c:	e5 e3       	ldi	r30, 0x35	; 53
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 81       	ld	r24, Z
    1032:	48 2f       	mov	r20, r24
    1034:	8a 81       	ldd	r24, Y+2	; 0x02
    1036:	28 2f       	mov	r18, r24
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	02 2e       	mov	r0, r18
    1040:	02 c0       	rjmp	.+4      	; 0x1046 <DIO_VoidSetPinValue+0x17a>
    1042:	88 0f       	add	r24, r24
    1044:	99 1f       	adc	r25, r25
    1046:	0a 94       	dec	r0
    1048:	e2 f7       	brpl	.-8      	; 0x1042 <DIO_VoidSetPinValue+0x176>
    104a:	84 2b       	or	r24, r20
    104c:	8c 93       	st	X, r24
    104e:	4b c0       	rjmp	.+150    	; 0x10e6 <DIO_VoidSetPinValue+0x21a>
				break;
			case LOW:
				CLR_Bit(PORTC,Copy_u8PinNumber);
    1050:	a5 e3       	ldi	r26, 0x35	; 53
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	e5 e3       	ldi	r30, 0x35	; 53
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	48 2f       	mov	r20, r24
    105c:	8a 81       	ldd	r24, Y+2	; 0x02
    105e:	28 2f       	mov	r18, r24
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	81 e0       	ldi	r24, 0x01	; 1
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	02 2e       	mov	r0, r18
    1068:	02 c0       	rjmp	.+4      	; 0x106e <DIO_VoidSetPinValue+0x1a2>
    106a:	88 0f       	add	r24, r24
    106c:	99 1f       	adc	r25, r25
    106e:	0a 94       	dec	r0
    1070:	e2 f7       	brpl	.-8      	; 0x106a <DIO_VoidSetPinValue+0x19e>
    1072:	80 95       	com	r24
    1074:	84 23       	and	r24, r20
    1076:	8c 93       	st	X, r24
    1078:	36 c0       	rjmp	.+108    	; 0x10e6 <DIO_VoidSetPinValue+0x21a>
				break;}
		break;
	case DIO_PORTD:
		switch(Copy_PinValue){
    107a:	8b 81       	ldd	r24, Y+3	; 0x03
    107c:	28 2f       	mov	r18, r24
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	3d 83       	std	Y+5, r19	; 0x05
    1082:	2c 83       	std	Y+4, r18	; 0x04
    1084:	8c 81       	ldd	r24, Y+4	; 0x04
    1086:	9d 81       	ldd	r25, Y+5	; 0x05
    1088:	00 97       	sbiw	r24, 0x00	; 0
    108a:	c9 f0       	breq	.+50     	; 0x10be <DIO_VoidSetPinValue+0x1f2>
    108c:	2c 81       	ldd	r18, Y+4	; 0x04
    108e:	3d 81       	ldd	r19, Y+5	; 0x05
    1090:	21 30       	cpi	r18, 0x01	; 1
    1092:	31 05       	cpc	r19, r1
    1094:	41 f5       	brne	.+80     	; 0x10e6 <DIO_VoidSetPinValue+0x21a>
			case HIGH:
				Set_Bit(PORTD,Copy_u8PinNumber);
    1096:	a2 e3       	ldi	r26, 0x32	; 50
    1098:	b0 e0       	ldi	r27, 0x00	; 0
    109a:	e2 e3       	ldi	r30, 0x32	; 50
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	80 81       	ld	r24, Z
    10a0:	48 2f       	mov	r20, r24
    10a2:	8a 81       	ldd	r24, Y+2	; 0x02
    10a4:	28 2f       	mov	r18, r24
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	02 2e       	mov	r0, r18
    10ae:	02 c0       	rjmp	.+4      	; 0x10b4 <DIO_VoidSetPinValue+0x1e8>
    10b0:	88 0f       	add	r24, r24
    10b2:	99 1f       	adc	r25, r25
    10b4:	0a 94       	dec	r0
    10b6:	e2 f7       	brpl	.-8      	; 0x10b0 <DIO_VoidSetPinValue+0x1e4>
    10b8:	84 2b       	or	r24, r20
    10ba:	8c 93       	st	X, r24
    10bc:	14 c0       	rjmp	.+40     	; 0x10e6 <DIO_VoidSetPinValue+0x21a>
				break;
			case LOW:
				CLR_Bit(PORTD,Copy_u8PinNumber);
    10be:	a2 e3       	ldi	r26, 0x32	; 50
    10c0:	b0 e0       	ldi	r27, 0x00	; 0
    10c2:	e2 e3       	ldi	r30, 0x32	; 50
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	80 81       	ld	r24, Z
    10c8:	48 2f       	mov	r20, r24
    10ca:	8a 81       	ldd	r24, Y+2	; 0x02
    10cc:	28 2f       	mov	r18, r24
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	02 2e       	mov	r0, r18
    10d6:	02 c0       	rjmp	.+4      	; 0x10dc <DIO_VoidSetPinValue+0x210>
    10d8:	88 0f       	add	r24, r24
    10da:	99 1f       	adc	r25, r25
    10dc:	0a 94       	dec	r0
    10de:	e2 f7       	brpl	.-8      	; 0x10d8 <DIO_VoidSetPinValue+0x20c>
    10e0:	80 95       	com	r24
    10e2:	84 23       	and	r24, r20
    10e4:	8c 93       	st	X, r24
				break;}
		break;

	}
}
    10e6:	2d 96       	adiw	r28, 0x0d	; 13
    10e8:	0f b6       	in	r0, 0x3f	; 63
    10ea:	f8 94       	cli
    10ec:	de bf       	out	0x3e, r29	; 62
    10ee:	0f be       	out	0x3f, r0	; 63
    10f0:	cd bf       	out	0x3d, r28	; 61
    10f2:	cf 91       	pop	r28
    10f4:	df 91       	pop	r29
    10f6:	08 95       	ret

000010f8 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortName,u8 Copy_u8PinNumber){
    10f8:	df 93       	push	r29
    10fa:	cf 93       	push	r28
    10fc:	00 d0       	rcall	.+0      	; 0x10fe <DIO_u8GetPinValue+0x6>
    10fe:	00 d0       	rcall	.+0      	; 0x1100 <DIO_u8GetPinValue+0x8>
    1100:	0f 92       	push	r0
    1102:	cd b7       	in	r28, 0x3d	; 61
    1104:	de b7       	in	r29, 0x3e	; 62
    1106:	8a 83       	std	Y+2, r24	; 0x02
    1108:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8PinValue;
	switch(Copy_u8PortName){
    110a:	8a 81       	ldd	r24, Y+2	; 0x02
    110c:	28 2f       	mov	r18, r24
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	3d 83       	std	Y+5, r19	; 0x05
    1112:	2c 83       	std	Y+4, r18	; 0x04
    1114:	4c 81       	ldd	r20, Y+4	; 0x04
    1116:	5d 81       	ldd	r21, Y+5	; 0x05
    1118:	41 30       	cpi	r20, 0x01	; 1
    111a:	51 05       	cpc	r21, r1
    111c:	41 f1       	breq	.+80     	; 0x116e <DIO_u8GetPinValue+0x76>
    111e:	8c 81       	ldd	r24, Y+4	; 0x04
    1120:	9d 81       	ldd	r25, Y+5	; 0x05
    1122:	82 30       	cpi	r24, 0x02	; 2
    1124:	91 05       	cpc	r25, r1
    1126:	34 f4       	brge	.+12     	; 0x1134 <DIO_u8GetPinValue+0x3c>
    1128:	2c 81       	ldd	r18, Y+4	; 0x04
    112a:	3d 81       	ldd	r19, Y+5	; 0x05
    112c:	21 15       	cp	r18, r1
    112e:	31 05       	cpc	r19, r1
    1130:	61 f0       	breq	.+24     	; 0x114a <DIO_u8GetPinValue+0x52>
    1132:	52 c0       	rjmp	.+164    	; 0x11d8 <DIO_u8GetPinValue+0xe0>
    1134:	4c 81       	ldd	r20, Y+4	; 0x04
    1136:	5d 81       	ldd	r21, Y+5	; 0x05
    1138:	42 30       	cpi	r20, 0x02	; 2
    113a:	51 05       	cpc	r21, r1
    113c:	51 f1       	breq	.+84     	; 0x1192 <DIO_u8GetPinValue+0x9a>
    113e:	8c 81       	ldd	r24, Y+4	; 0x04
    1140:	9d 81       	ldd	r25, Y+5	; 0x05
    1142:	83 30       	cpi	r24, 0x03	; 3
    1144:	91 05       	cpc	r25, r1
    1146:	b9 f1       	breq	.+110    	; 0x11b6 <DIO_u8GetPinValue+0xbe>
    1148:	47 c0       	rjmp	.+142    	; 0x11d8 <DIO_u8GetPinValue+0xe0>
	case DIO_PORTA:
		Local_u8PinValue = Get_Bit(PINA,Copy_u8PinNumber);
    114a:	e9 e3       	ldi	r30, 0x39	; 57
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	80 81       	ld	r24, Z
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	8b 81       	ldd	r24, Y+3	; 0x03
    1156:	88 2f       	mov	r24, r24
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	a9 01       	movw	r20, r18
    115c:	02 c0       	rjmp	.+4      	; 0x1162 <DIO_u8GetPinValue+0x6a>
    115e:	55 95       	asr	r21
    1160:	47 95       	ror	r20
    1162:	8a 95       	dec	r24
    1164:	e2 f7       	brpl	.-8      	; 0x115e <DIO_u8GetPinValue+0x66>
    1166:	ca 01       	movw	r24, r20
    1168:	81 70       	andi	r24, 0x01	; 1
    116a:	89 83       	std	Y+1, r24	; 0x01
    116c:	35 c0       	rjmp	.+106    	; 0x11d8 <DIO_u8GetPinValue+0xe0>
		break;
	case DIO_PORTB:
		Local_u8PinValue = Get_Bit(PINB,Copy_u8PinNumber);
    116e:	e6 e3       	ldi	r30, 0x36	; 54
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	28 2f       	mov	r18, r24
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	8b 81       	ldd	r24, Y+3	; 0x03
    117a:	88 2f       	mov	r24, r24
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	a9 01       	movw	r20, r18
    1180:	02 c0       	rjmp	.+4      	; 0x1186 <DIO_u8GetPinValue+0x8e>
    1182:	55 95       	asr	r21
    1184:	47 95       	ror	r20
    1186:	8a 95       	dec	r24
    1188:	e2 f7       	brpl	.-8      	; 0x1182 <DIO_u8GetPinValue+0x8a>
    118a:	ca 01       	movw	r24, r20
    118c:	81 70       	andi	r24, 0x01	; 1
    118e:	89 83       	std	Y+1, r24	; 0x01
    1190:	23 c0       	rjmp	.+70     	; 0x11d8 <DIO_u8GetPinValue+0xe0>
		break;
	case DIO_PORTC:
		Local_u8PinValue = Get_Bit(PINC,Copy_u8PinNumber);
    1192:	e3 e3       	ldi	r30, 0x33	; 51
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	28 2f       	mov	r18, r24
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	8b 81       	ldd	r24, Y+3	; 0x03
    119e:	88 2f       	mov	r24, r24
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	a9 01       	movw	r20, r18
    11a4:	02 c0       	rjmp	.+4      	; 0x11aa <DIO_u8GetPinValue+0xb2>
    11a6:	55 95       	asr	r21
    11a8:	47 95       	ror	r20
    11aa:	8a 95       	dec	r24
    11ac:	e2 f7       	brpl	.-8      	; 0x11a6 <DIO_u8GetPinValue+0xae>
    11ae:	ca 01       	movw	r24, r20
    11b0:	81 70       	andi	r24, 0x01	; 1
    11b2:	89 83       	std	Y+1, r24	; 0x01
    11b4:	11 c0       	rjmp	.+34     	; 0x11d8 <DIO_u8GetPinValue+0xe0>
		break;
	case DIO_PORTD:
		Local_u8PinValue = Get_Bit(PIND,Copy_u8PinNumber);
    11b6:	e0 e3       	ldi	r30, 0x30	; 48
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	28 2f       	mov	r18, r24
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	8b 81       	ldd	r24, Y+3	; 0x03
    11c2:	88 2f       	mov	r24, r24
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	a9 01       	movw	r20, r18
    11c8:	02 c0       	rjmp	.+4      	; 0x11ce <DIO_u8GetPinValue+0xd6>
    11ca:	55 95       	asr	r21
    11cc:	47 95       	ror	r20
    11ce:	8a 95       	dec	r24
    11d0:	e2 f7       	brpl	.-8      	; 0x11ca <DIO_u8GetPinValue+0xd2>
    11d2:	ca 01       	movw	r24, r20
    11d4:	81 70       	andi	r24, 0x01	; 1
    11d6:	89 83       	std	Y+1, r24	; 0x01
			break;
	}


	return Local_u8PinValue;
    11d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    11da:	0f 90       	pop	r0
    11dc:	0f 90       	pop	r0
    11de:	0f 90       	pop	r0
    11e0:	0f 90       	pop	r0
    11e2:	0f 90       	pop	r0
    11e4:	cf 91       	pop	r28
    11e6:	df 91       	pop	r29
    11e8:	08 95       	ret

000011ea <DIO_VoidSetPortDirection>:


void DIO_VoidSetPortDirection(u8 Copy_u8PortName, u8 Copy_u8PortDirection){
    11ea:	df 93       	push	r29
    11ec:	cf 93       	push	r28
    11ee:	00 d0       	rcall	.+0      	; 0x11f0 <DIO_VoidSetPortDirection+0x6>
    11f0:	00 d0       	rcall	.+0      	; 0x11f2 <DIO_VoidSetPortDirection+0x8>
    11f2:	00 d0       	rcall	.+0      	; 0x11f4 <DIO_VoidSetPortDirection+0xa>
    11f4:	cd b7       	in	r28, 0x3d	; 61
    11f6:	de b7       	in	r29, 0x3e	; 62
    11f8:	8b 83       	std	Y+3, r24	; 0x03
    11fa:	6c 83       	std	Y+4, r22	; 0x04
	u8* SelPort = 0x00;
    11fc:	1a 82       	std	Y+2, r1	; 0x02
    11fe:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8PortName){
    1200:	8b 81       	ldd	r24, Y+3	; 0x03
    1202:	28 2f       	mov	r18, r24
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	3e 83       	std	Y+6, r19	; 0x06
    1208:	2d 83       	std	Y+5, r18	; 0x05
    120a:	8d 81       	ldd	r24, Y+5	; 0x05
    120c:	9e 81       	ldd	r25, Y+6	; 0x06
    120e:	81 30       	cpi	r24, 0x01	; 1
    1210:	91 05       	cpc	r25, r1
    1212:	d1 f0       	breq	.+52     	; 0x1248 <DIO_VoidSetPortDirection+0x5e>
    1214:	2d 81       	ldd	r18, Y+5	; 0x05
    1216:	3e 81       	ldd	r19, Y+6	; 0x06
    1218:	22 30       	cpi	r18, 0x02	; 2
    121a:	31 05       	cpc	r19, r1
    121c:	2c f4       	brge	.+10     	; 0x1228 <DIO_VoidSetPortDirection+0x3e>
    121e:	8d 81       	ldd	r24, Y+5	; 0x05
    1220:	9e 81       	ldd	r25, Y+6	; 0x06
    1222:	00 97       	sbiw	r24, 0x00	; 0
    1224:	61 f0       	breq	.+24     	; 0x123e <DIO_VoidSetPortDirection+0x54>
    1226:	1e c0       	rjmp	.+60     	; 0x1264 <DIO_VoidSetPortDirection+0x7a>
    1228:	2d 81       	ldd	r18, Y+5	; 0x05
    122a:	3e 81       	ldd	r19, Y+6	; 0x06
    122c:	22 30       	cpi	r18, 0x02	; 2
    122e:	31 05       	cpc	r19, r1
    1230:	81 f0       	breq	.+32     	; 0x1252 <DIO_VoidSetPortDirection+0x68>
    1232:	8d 81       	ldd	r24, Y+5	; 0x05
    1234:	9e 81       	ldd	r25, Y+6	; 0x06
    1236:	83 30       	cpi	r24, 0x03	; 3
    1238:	91 05       	cpc	r25, r1
    123a:	81 f0       	breq	.+32     	; 0x125c <DIO_VoidSetPortDirection+0x72>
    123c:	13 c0       	rjmp	.+38     	; 0x1264 <DIO_VoidSetPortDirection+0x7a>
		case DIO_PORTA:
			SelPort = &DDRA;
    123e:	8a e3       	ldi	r24, 0x3A	; 58
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	9a 83       	std	Y+2, r25	; 0x02
    1244:	89 83       	std	Y+1, r24	; 0x01
    1246:	0e c0       	rjmp	.+28     	; 0x1264 <DIO_VoidSetPortDirection+0x7a>
			break;
		case DIO_PORTB:
			SelPort = &DDRB;
    1248:	87 e3       	ldi	r24, 0x37	; 55
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	9a 83       	std	Y+2, r25	; 0x02
    124e:	89 83       	std	Y+1, r24	; 0x01
    1250:	09 c0       	rjmp	.+18     	; 0x1264 <DIO_VoidSetPortDirection+0x7a>
			break;
		case DIO_PORTC:
			SelPort = &DDRC;
    1252:	84 e3       	ldi	r24, 0x34	; 52
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	9a 83       	std	Y+2, r25	; 0x02
    1258:	89 83       	std	Y+1, r24	; 0x01
    125a:	04 c0       	rjmp	.+8      	; 0x1264 <DIO_VoidSetPortDirection+0x7a>
			break;
		case DIO_PORTD:
			SelPort = &DDRD;
    125c:	81 e3       	ldi	r24, 0x31	; 49
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	9a 83       	std	Y+2, r25	; 0x02
    1262:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	* SelPort = Copy_u8PortDirection;
    1264:	e9 81       	ldd	r30, Y+1	; 0x01
    1266:	fa 81       	ldd	r31, Y+2	; 0x02
    1268:	8c 81       	ldd	r24, Y+4	; 0x04
    126a:	80 83       	st	Z, r24
}
    126c:	26 96       	adiw	r28, 0x06	; 6
    126e:	0f b6       	in	r0, 0x3f	; 63
    1270:	f8 94       	cli
    1272:	de bf       	out	0x3e, r29	; 62
    1274:	0f be       	out	0x3f, r0	; 63
    1276:	cd bf       	out	0x3d, r28	; 61
    1278:	cf 91       	pop	r28
    127a:	df 91       	pop	r29
    127c:	08 95       	ret

0000127e <DIO_VoidSetPortValue>:

void DIO_VoidSetPortValue(u8 Copy_u8PortName, u8 Copy_u8PortValue){
    127e:	df 93       	push	r29
    1280:	cf 93       	push	r28
    1282:	00 d0       	rcall	.+0      	; 0x1284 <DIO_VoidSetPortValue+0x6>
    1284:	00 d0       	rcall	.+0      	; 0x1286 <DIO_VoidSetPortValue+0x8>
    1286:	00 d0       	rcall	.+0      	; 0x1288 <DIO_VoidSetPortValue+0xa>
    1288:	cd b7       	in	r28, 0x3d	; 61
    128a:	de b7       	in	r29, 0x3e	; 62
    128c:	8b 83       	std	Y+3, r24	; 0x03
    128e:	6c 83       	std	Y+4, r22	; 0x04
	u8* SelPort = 0x00;
    1290:	1a 82       	std	Y+2, r1	; 0x02
    1292:	19 82       	std	Y+1, r1	; 0x01
		switch(Copy_u8PortName){
    1294:	8b 81       	ldd	r24, Y+3	; 0x03
    1296:	28 2f       	mov	r18, r24
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	3e 83       	std	Y+6, r19	; 0x06
    129c:	2d 83       	std	Y+5, r18	; 0x05
    129e:	8d 81       	ldd	r24, Y+5	; 0x05
    12a0:	9e 81       	ldd	r25, Y+6	; 0x06
    12a2:	81 30       	cpi	r24, 0x01	; 1
    12a4:	91 05       	cpc	r25, r1
    12a6:	d1 f0       	breq	.+52     	; 0x12dc <DIO_VoidSetPortValue+0x5e>
    12a8:	2d 81       	ldd	r18, Y+5	; 0x05
    12aa:	3e 81       	ldd	r19, Y+6	; 0x06
    12ac:	22 30       	cpi	r18, 0x02	; 2
    12ae:	31 05       	cpc	r19, r1
    12b0:	2c f4       	brge	.+10     	; 0x12bc <DIO_VoidSetPortValue+0x3e>
    12b2:	8d 81       	ldd	r24, Y+5	; 0x05
    12b4:	9e 81       	ldd	r25, Y+6	; 0x06
    12b6:	00 97       	sbiw	r24, 0x00	; 0
    12b8:	61 f0       	breq	.+24     	; 0x12d2 <DIO_VoidSetPortValue+0x54>
    12ba:	1e c0       	rjmp	.+60     	; 0x12f8 <DIO_VoidSetPortValue+0x7a>
    12bc:	2d 81       	ldd	r18, Y+5	; 0x05
    12be:	3e 81       	ldd	r19, Y+6	; 0x06
    12c0:	22 30       	cpi	r18, 0x02	; 2
    12c2:	31 05       	cpc	r19, r1
    12c4:	81 f0       	breq	.+32     	; 0x12e6 <DIO_VoidSetPortValue+0x68>
    12c6:	8d 81       	ldd	r24, Y+5	; 0x05
    12c8:	9e 81       	ldd	r25, Y+6	; 0x06
    12ca:	83 30       	cpi	r24, 0x03	; 3
    12cc:	91 05       	cpc	r25, r1
    12ce:	81 f0       	breq	.+32     	; 0x12f0 <DIO_VoidSetPortValue+0x72>
    12d0:	13 c0       	rjmp	.+38     	; 0x12f8 <DIO_VoidSetPortValue+0x7a>
			case DIO_PORTA:
				SelPort = &PORTA;
    12d2:	8b e3       	ldi	r24, 0x3B	; 59
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	9a 83       	std	Y+2, r25	; 0x02
    12d8:	89 83       	std	Y+1, r24	; 0x01
    12da:	0e c0       	rjmp	.+28     	; 0x12f8 <DIO_VoidSetPortValue+0x7a>
				break;
			case DIO_PORTB:
				SelPort = &PORTB;
    12dc:	88 e3       	ldi	r24, 0x38	; 56
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	9a 83       	std	Y+2, r25	; 0x02
    12e2:	89 83       	std	Y+1, r24	; 0x01
    12e4:	09 c0       	rjmp	.+18     	; 0x12f8 <DIO_VoidSetPortValue+0x7a>
				break;
			case DIO_PORTC:
				SelPort = &PORTC;
    12e6:	85 e3       	ldi	r24, 0x35	; 53
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	9a 83       	std	Y+2, r25	; 0x02
    12ec:	89 83       	std	Y+1, r24	; 0x01
    12ee:	04 c0       	rjmp	.+8      	; 0x12f8 <DIO_VoidSetPortValue+0x7a>
				break;
			case DIO_PORTD:
				SelPort = &PORTD;
    12f0:	82 e3       	ldi	r24, 0x32	; 50
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	9a 83       	std	Y+2, r25	; 0x02
    12f6:	89 83       	std	Y+1, r24	; 0x01
				break;
		}
		* SelPort = Copy_u8PortValue;
    12f8:	e9 81       	ldd	r30, Y+1	; 0x01
    12fa:	fa 81       	ldd	r31, Y+2	; 0x02
    12fc:	8c 81       	ldd	r24, Y+4	; 0x04
    12fe:	80 83       	st	Z, r24
}
    1300:	26 96       	adiw	r28, 0x06	; 6
    1302:	0f b6       	in	r0, 0x3f	; 63
    1304:	f8 94       	cli
    1306:	de bf       	out	0x3e, r29	; 62
    1308:	0f be       	out	0x3f, r0	; 63
    130a:	cd bf       	out	0x3d, r28	; 61
    130c:	cf 91       	pop	r28
    130e:	df 91       	pop	r29
    1310:	08 95       	ret

00001312 <LCD_VoidSendData>:
#include"../../LIB/BIT_MATH.h"
#include"../../MCAL/Driver_DIO/DIO_Interface.h"
#include"LCD_Interface.h"


void LCD_VoidSendData(u8 Copy_u8Data){
    1312:	df 93       	push	r29
    1314:	cf 93       	push	r28
    1316:	cd b7       	in	r28, 0x3d	; 61
    1318:	de b7       	in	r29, 0x3e	; 62
    131a:	2f 97       	sbiw	r28, 0x0f	; 15
    131c:	0f b6       	in	r0, 0x3f	; 63
    131e:	f8 94       	cli
    1320:	de bf       	out	0x3e, r29	; 62
    1322:	0f be       	out	0x3f, r0	; 63
    1324:	cd bf       	out	0x3d, r28	; 61
    1326:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_VoidSetPinValue(LCD_RS_PORT,LCD_RS_PIN,HIGH);//Send Command
    1328:	81 e0       	ldi	r24, 0x01	; 1
    132a:	60 e0       	ldi	r22, 0x00	; 0
    132c:	41 e0       	ldi	r20, 0x01	; 1
    132e:	0e 94 66 07 	call	0xecc	; 0xecc <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(LCD_RW_PORT,LCD_RW_PIN,LOW); //Write
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	61 e0       	ldi	r22, 0x01	; 1
    1336:	40 e0       	ldi	r20, 0x00	; 0
    1338:	0e 94 66 07 	call	0xecc	; 0xecc <DIO_VoidSetPinValue>
	DIO_VoidSetPortValue(LCD_DATA_PORT,Copy_u8Data);
    133c:	80 e0       	ldi	r24, 0x00	; 0
    133e:	6f 85       	ldd	r22, Y+15	; 0x0f
    1340:	0e 94 3f 09 	call	0x127e	; 0x127e <DIO_VoidSetPortValue>

	DIO_VoidSetPinValue(LCD_EN_PORT,LCD_EN_PIN,HIGH);
    1344:	81 e0       	ldi	r24, 0x01	; 1
    1346:	62 e0       	ldi	r22, 0x02	; 2
    1348:	41 e0       	ldi	r20, 0x01	; 1
    134a:	0e 94 66 07 	call	0xecc	; 0xecc <DIO_VoidSetPinValue>
    134e:	80 e0       	ldi	r24, 0x00	; 0
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	a0 e0       	ldi	r26, 0x00	; 0
    1354:	b0 e4       	ldi	r27, 0x40	; 64
    1356:	8b 87       	std	Y+11, r24	; 0x0b
    1358:	9c 87       	std	Y+12, r25	; 0x0c
    135a:	ad 87       	std	Y+13, r26	; 0x0d
    135c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    135e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1360:	7c 85       	ldd	r23, Y+12	; 0x0c
    1362:	8d 85       	ldd	r24, Y+13	; 0x0d
    1364:	9e 85       	ldd	r25, Y+14	; 0x0e
    1366:	20 e0       	ldi	r18, 0x00	; 0
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	4a ef       	ldi	r20, 0xFA	; 250
    136c:	54 e4       	ldi	r21, 0x44	; 68
    136e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1372:	dc 01       	movw	r26, r24
    1374:	cb 01       	movw	r24, r22
    1376:	8f 83       	std	Y+7, r24	; 0x07
    1378:	98 87       	std	Y+8, r25	; 0x08
    137a:	a9 87       	std	Y+9, r26	; 0x09
    137c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    137e:	6f 81       	ldd	r22, Y+7	; 0x07
    1380:	78 85       	ldd	r23, Y+8	; 0x08
    1382:	89 85       	ldd	r24, Y+9	; 0x09
    1384:	9a 85       	ldd	r25, Y+10	; 0x0a
    1386:	20 e0       	ldi	r18, 0x00	; 0
    1388:	30 e0       	ldi	r19, 0x00	; 0
    138a:	40 e8       	ldi	r20, 0x80	; 128
    138c:	5f e3       	ldi	r21, 0x3F	; 63
    138e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1392:	88 23       	and	r24, r24
    1394:	2c f4       	brge	.+10     	; 0x13a0 <LCD_VoidSendData+0x8e>
		__ticks = 1;
    1396:	81 e0       	ldi	r24, 0x01	; 1
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	9e 83       	std	Y+6, r25	; 0x06
    139c:	8d 83       	std	Y+5, r24	; 0x05
    139e:	3f c0       	rjmp	.+126    	; 0x141e <LCD_VoidSendData+0x10c>
	else if (__tmp > 65535)
    13a0:	6f 81       	ldd	r22, Y+7	; 0x07
    13a2:	78 85       	ldd	r23, Y+8	; 0x08
    13a4:	89 85       	ldd	r24, Y+9	; 0x09
    13a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    13a8:	20 e0       	ldi	r18, 0x00	; 0
    13aa:	3f ef       	ldi	r19, 0xFF	; 255
    13ac:	4f e7       	ldi	r20, 0x7F	; 127
    13ae:	57 e4       	ldi	r21, 0x47	; 71
    13b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13b4:	18 16       	cp	r1, r24
    13b6:	4c f5       	brge	.+82     	; 0x140a <LCD_VoidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    13ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    13bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    13be:	9e 85       	ldd	r25, Y+14	; 0x0e
    13c0:	20 e0       	ldi	r18, 0x00	; 0
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	40 e2       	ldi	r20, 0x20	; 32
    13c6:	51 e4       	ldi	r21, 0x41	; 65
    13c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13cc:	dc 01       	movw	r26, r24
    13ce:	cb 01       	movw	r24, r22
    13d0:	bc 01       	movw	r22, r24
    13d2:	cd 01       	movw	r24, r26
    13d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13d8:	dc 01       	movw	r26, r24
    13da:	cb 01       	movw	r24, r22
    13dc:	9e 83       	std	Y+6, r25	; 0x06
    13de:	8d 83       	std	Y+5, r24	; 0x05
    13e0:	0f c0       	rjmp	.+30     	; 0x1400 <LCD_VoidSendData+0xee>
    13e2:	88 ec       	ldi	r24, 0xC8	; 200
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	9c 83       	std	Y+4, r25	; 0x04
    13e8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13ea:	8b 81       	ldd	r24, Y+3	; 0x03
    13ec:	9c 81       	ldd	r25, Y+4	; 0x04
    13ee:	01 97       	sbiw	r24, 0x01	; 1
    13f0:	f1 f7       	brne	.-4      	; 0x13ee <LCD_VoidSendData+0xdc>
    13f2:	9c 83       	std	Y+4, r25	; 0x04
    13f4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13f6:	8d 81       	ldd	r24, Y+5	; 0x05
    13f8:	9e 81       	ldd	r25, Y+6	; 0x06
    13fa:	01 97       	sbiw	r24, 0x01	; 1
    13fc:	9e 83       	std	Y+6, r25	; 0x06
    13fe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1400:	8d 81       	ldd	r24, Y+5	; 0x05
    1402:	9e 81       	ldd	r25, Y+6	; 0x06
    1404:	00 97       	sbiw	r24, 0x00	; 0
    1406:	69 f7       	brne	.-38     	; 0x13e2 <LCD_VoidSendData+0xd0>
    1408:	14 c0       	rjmp	.+40     	; 0x1432 <LCD_VoidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    140a:	6f 81       	ldd	r22, Y+7	; 0x07
    140c:	78 85       	ldd	r23, Y+8	; 0x08
    140e:	89 85       	ldd	r24, Y+9	; 0x09
    1410:	9a 85       	ldd	r25, Y+10	; 0x0a
    1412:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1416:	dc 01       	movw	r26, r24
    1418:	cb 01       	movw	r24, r22
    141a:	9e 83       	std	Y+6, r25	; 0x06
    141c:	8d 83       	std	Y+5, r24	; 0x05
    141e:	8d 81       	ldd	r24, Y+5	; 0x05
    1420:	9e 81       	ldd	r25, Y+6	; 0x06
    1422:	9a 83       	std	Y+2, r25	; 0x02
    1424:	89 83       	std	Y+1, r24	; 0x01
    1426:	89 81       	ldd	r24, Y+1	; 0x01
    1428:	9a 81       	ldd	r25, Y+2	; 0x02
    142a:	01 97       	sbiw	r24, 0x01	; 1
    142c:	f1 f7       	brne	.-4      	; 0x142a <LCD_VoidSendData+0x118>
    142e:	9a 83       	std	Y+2, r25	; 0x02
    1430:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_VoidSetPinValue(LCD_EN_PORT,LCD_EN_PIN,LOW);
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	62 e0       	ldi	r22, 0x02	; 2
    1436:	40 e0       	ldi	r20, 0x00	; 0
    1438:	0e 94 66 07 	call	0xecc	; 0xecc <DIO_VoidSetPinValue>
}
    143c:	2f 96       	adiw	r28, 0x0f	; 15
    143e:	0f b6       	in	r0, 0x3f	; 63
    1440:	f8 94       	cli
    1442:	de bf       	out	0x3e, r29	; 62
    1444:	0f be       	out	0x3f, r0	; 63
    1446:	cd bf       	out	0x3d, r28	; 61
    1448:	cf 91       	pop	r28
    144a:	df 91       	pop	r29
    144c:	08 95       	ret

0000144e <LCD_VoidSendCommand>:

void LCD_VoidSendCommand(u8 Copy_u8Command){
    144e:	df 93       	push	r29
    1450:	cf 93       	push	r28
    1452:	cd b7       	in	r28, 0x3d	; 61
    1454:	de b7       	in	r29, 0x3e	; 62
    1456:	60 97       	sbiw	r28, 0x10	; 16
    1458:	0f b6       	in	r0, 0x3f	; 63
    145a:	f8 94       	cli
    145c:	de bf       	out	0x3e, r29	; 62
    145e:	0f be       	out	0x3f, r0	; 63
    1460:	cd bf       	out	0x3d, r28	; 61
    1462:	88 8b       	std	Y+16, r24	; 0x10
	DIO_VoidSetPinValue(LCD_RS_PORT,LCD_RS_PIN,LOW);//Send Command
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	60 e0       	ldi	r22, 0x00	; 0
    1468:	40 e0       	ldi	r20, 0x00	; 0
    146a:	0e 94 66 07 	call	0xecc	; 0xecc <DIO_VoidSetPinValue>
		DIO_VoidSetPinValue(LCD_RW_PORT,LCD_RW_PIN,LOW); //Write
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	61 e0       	ldi	r22, 0x01	; 1
    1472:	40 e0       	ldi	r20, 0x00	; 0
    1474:	0e 94 66 07 	call	0xecc	; 0xecc <DIO_VoidSetPinValue>
		for(u8 i=0;i<8;i++){
    1478:	1f 86       	std	Y+15, r1	; 0x0f
    147a:	17 c0       	rjmp	.+46     	; 0x14aa <LCD_VoidSendCommand+0x5c>
			DIO_VoidSetPinValue(LCD_DATA_PORT,i,Get_Bit(Copy_u8Command,i));
    147c:	88 89       	ldd	r24, Y+16	; 0x10
    147e:	28 2f       	mov	r18, r24
    1480:	30 e0       	ldi	r19, 0x00	; 0
    1482:	8f 85       	ldd	r24, Y+15	; 0x0f
    1484:	88 2f       	mov	r24, r24
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	a9 01       	movw	r20, r18
    148a:	02 c0       	rjmp	.+4      	; 0x1490 <LCD_VoidSendCommand+0x42>
    148c:	55 95       	asr	r21
    148e:	47 95       	ror	r20
    1490:	8a 95       	dec	r24
    1492:	e2 f7       	brpl	.-8      	; 0x148c <LCD_VoidSendCommand+0x3e>
    1494:	ca 01       	movw	r24, r20
    1496:	98 2f       	mov	r25, r24
    1498:	91 70       	andi	r25, 0x01	; 1
    149a:	80 e0       	ldi	r24, 0x00	; 0
    149c:	6f 85       	ldd	r22, Y+15	; 0x0f
    149e:	49 2f       	mov	r20, r25
    14a0:	0e 94 66 07 	call	0xecc	; 0xecc <DIO_VoidSetPinValue>
}

void LCD_VoidSendCommand(u8 Copy_u8Command){
	DIO_VoidSetPinValue(LCD_RS_PORT,LCD_RS_PIN,LOW);//Send Command
		DIO_VoidSetPinValue(LCD_RW_PORT,LCD_RW_PIN,LOW); //Write
		for(u8 i=0;i<8;i++){
    14a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    14a6:	8f 5f       	subi	r24, 0xFF	; 255
    14a8:	8f 87       	std	Y+15, r24	; 0x0f
    14aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    14ac:	88 30       	cpi	r24, 0x08	; 8
    14ae:	30 f3       	brcs	.-52     	; 0x147c <LCD_VoidSendCommand+0x2e>
			DIO_VoidSetPinValue(LCD_DATA_PORT,i,Get_Bit(Copy_u8Command,i));
		}
		DIO_VoidSetPinValue(LCD_EN_PORT,LCD_EN_PIN,HIGH);
    14b0:	81 e0       	ldi	r24, 0x01	; 1
    14b2:	62 e0       	ldi	r22, 0x02	; 2
    14b4:	41 e0       	ldi	r20, 0x01	; 1
    14b6:	0e 94 66 07 	call	0xecc	; 0xecc <DIO_VoidSetPinValue>
    14ba:	80 e0       	ldi	r24, 0x00	; 0
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	a0 e0       	ldi	r26, 0x00	; 0
    14c0:	b0 e4       	ldi	r27, 0x40	; 64
    14c2:	8b 87       	std	Y+11, r24	; 0x0b
    14c4:	9c 87       	std	Y+12, r25	; 0x0c
    14c6:	ad 87       	std	Y+13, r26	; 0x0d
    14c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    14cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    14ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    14d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    14d2:	20 e0       	ldi	r18, 0x00	; 0
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	4a ef       	ldi	r20, 0xFA	; 250
    14d8:	54 e4       	ldi	r21, 0x44	; 68
    14da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14de:	dc 01       	movw	r26, r24
    14e0:	cb 01       	movw	r24, r22
    14e2:	8f 83       	std	Y+7, r24	; 0x07
    14e4:	98 87       	std	Y+8, r25	; 0x08
    14e6:	a9 87       	std	Y+9, r26	; 0x09
    14e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14ea:	6f 81       	ldd	r22, Y+7	; 0x07
    14ec:	78 85       	ldd	r23, Y+8	; 0x08
    14ee:	89 85       	ldd	r24, Y+9	; 0x09
    14f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    14f2:	20 e0       	ldi	r18, 0x00	; 0
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	40 e8       	ldi	r20, 0x80	; 128
    14f8:	5f e3       	ldi	r21, 0x3F	; 63
    14fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14fe:	88 23       	and	r24, r24
    1500:	2c f4       	brge	.+10     	; 0x150c <LCD_VoidSendCommand+0xbe>
		__ticks = 1;
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	9e 83       	std	Y+6, r25	; 0x06
    1508:	8d 83       	std	Y+5, r24	; 0x05
    150a:	3f c0       	rjmp	.+126    	; 0x158a <LCD_VoidSendCommand+0x13c>
	else if (__tmp > 65535)
    150c:	6f 81       	ldd	r22, Y+7	; 0x07
    150e:	78 85       	ldd	r23, Y+8	; 0x08
    1510:	89 85       	ldd	r24, Y+9	; 0x09
    1512:	9a 85       	ldd	r25, Y+10	; 0x0a
    1514:	20 e0       	ldi	r18, 0x00	; 0
    1516:	3f ef       	ldi	r19, 0xFF	; 255
    1518:	4f e7       	ldi	r20, 0x7F	; 127
    151a:	57 e4       	ldi	r21, 0x47	; 71
    151c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1520:	18 16       	cp	r1, r24
    1522:	4c f5       	brge	.+82     	; 0x1576 <LCD_VoidSendCommand+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1524:	6b 85       	ldd	r22, Y+11	; 0x0b
    1526:	7c 85       	ldd	r23, Y+12	; 0x0c
    1528:	8d 85       	ldd	r24, Y+13	; 0x0d
    152a:	9e 85       	ldd	r25, Y+14	; 0x0e
    152c:	20 e0       	ldi	r18, 0x00	; 0
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	40 e2       	ldi	r20, 0x20	; 32
    1532:	51 e4       	ldi	r21, 0x41	; 65
    1534:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1538:	dc 01       	movw	r26, r24
    153a:	cb 01       	movw	r24, r22
    153c:	bc 01       	movw	r22, r24
    153e:	cd 01       	movw	r24, r26
    1540:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1544:	dc 01       	movw	r26, r24
    1546:	cb 01       	movw	r24, r22
    1548:	9e 83       	std	Y+6, r25	; 0x06
    154a:	8d 83       	std	Y+5, r24	; 0x05
    154c:	0f c0       	rjmp	.+30     	; 0x156c <LCD_VoidSendCommand+0x11e>
    154e:	88 ec       	ldi	r24, 0xC8	; 200
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	9c 83       	std	Y+4, r25	; 0x04
    1554:	8b 83       	std	Y+3, r24	; 0x03
    1556:	8b 81       	ldd	r24, Y+3	; 0x03
    1558:	9c 81       	ldd	r25, Y+4	; 0x04
    155a:	01 97       	sbiw	r24, 0x01	; 1
    155c:	f1 f7       	brne	.-4      	; 0x155a <LCD_VoidSendCommand+0x10c>
    155e:	9c 83       	std	Y+4, r25	; 0x04
    1560:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1562:	8d 81       	ldd	r24, Y+5	; 0x05
    1564:	9e 81       	ldd	r25, Y+6	; 0x06
    1566:	01 97       	sbiw	r24, 0x01	; 1
    1568:	9e 83       	std	Y+6, r25	; 0x06
    156a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    156c:	8d 81       	ldd	r24, Y+5	; 0x05
    156e:	9e 81       	ldd	r25, Y+6	; 0x06
    1570:	00 97       	sbiw	r24, 0x00	; 0
    1572:	69 f7       	brne	.-38     	; 0x154e <LCD_VoidSendCommand+0x100>
    1574:	14 c0       	rjmp	.+40     	; 0x159e <LCD_VoidSendCommand+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1576:	6f 81       	ldd	r22, Y+7	; 0x07
    1578:	78 85       	ldd	r23, Y+8	; 0x08
    157a:	89 85       	ldd	r24, Y+9	; 0x09
    157c:	9a 85       	ldd	r25, Y+10	; 0x0a
    157e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1582:	dc 01       	movw	r26, r24
    1584:	cb 01       	movw	r24, r22
    1586:	9e 83       	std	Y+6, r25	; 0x06
    1588:	8d 83       	std	Y+5, r24	; 0x05
    158a:	8d 81       	ldd	r24, Y+5	; 0x05
    158c:	9e 81       	ldd	r25, Y+6	; 0x06
    158e:	9a 83       	std	Y+2, r25	; 0x02
    1590:	89 83       	std	Y+1, r24	; 0x01
    1592:	89 81       	ldd	r24, Y+1	; 0x01
    1594:	9a 81       	ldd	r25, Y+2	; 0x02
    1596:	01 97       	sbiw	r24, 0x01	; 1
    1598:	f1 f7       	brne	.-4      	; 0x1596 <LCD_VoidSendCommand+0x148>
    159a:	9a 83       	std	Y+2, r25	; 0x02
    159c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		DIO_VoidSetPinValue(LCD_EN_PORT,LCD_EN_PIN,LOW);
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	62 e0       	ldi	r22, 0x02	; 2
    15a2:	40 e0       	ldi	r20, 0x00	; 0
    15a4:	0e 94 66 07 	call	0xecc	; 0xecc <DIO_VoidSetPinValue>
}
    15a8:	60 96       	adiw	r28, 0x10	; 16
    15aa:	0f b6       	in	r0, 0x3f	; 63
    15ac:	f8 94       	cli
    15ae:	de bf       	out	0x3e, r29	; 62
    15b0:	0f be       	out	0x3f, r0	; 63
    15b2:	cd bf       	out	0x3d, r28	; 61
    15b4:	cf 91       	pop	r28
    15b6:	df 91       	pop	r29
    15b8:	08 95       	ret

000015ba <LCD_VoidInit>:

void LCD_VoidInit(void){
    15ba:	df 93       	push	r29
    15bc:	cf 93       	push	r28
    15be:	cd b7       	in	r28, 0x3d	; 61
    15c0:	de b7       	in	r29, 0x3e	; 62
    15c2:	2e 97       	sbiw	r28, 0x0e	; 14
    15c4:	0f b6       	in	r0, 0x3f	; 63
    15c6:	f8 94       	cli
    15c8:	de bf       	out	0x3e, r29	; 62
    15ca:	0f be       	out	0x3f, r0	; 63
    15cc:	cd bf       	out	0x3d, r28	; 61
		DIO_VoidSetPortDirection(LCD_DATA_PORT,0x11);
    15ce:	80 e0       	ldi	r24, 0x00	; 0
    15d0:	61 e1       	ldi	r22, 0x11	; 17
    15d2:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_VoidSetPortDirection>
		DIO_VoidSetPinDirection(LCD_RS_PORT,LCD_RS_PIN,OUTPUT);
    15d6:	81 e0       	ldi	r24, 0x01	; 1
    15d8:	60 e0       	ldi	r22, 0x00	; 0
    15da:	41 e0       	ldi	r20, 0x01	; 1
    15dc:	0e 94 50 06 	call	0xca0	; 0xca0 <DIO_VoidSetPinDirection>
		DIO_VoidSetPinDirection(LCD_RW_PORT,LCD_RW_PIN,OUTPUT);
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	61 e0       	ldi	r22, 0x01	; 1
    15e4:	41 e0       	ldi	r20, 0x01	; 1
    15e6:	0e 94 50 06 	call	0xca0	; 0xca0 <DIO_VoidSetPinDirection>
		DIO_VoidSetPinDirection(LCD_EN_PORT,LCD_EN_PIN,OUTPUT);
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	62 e0       	ldi	r22, 0x02	; 2
    15ee:	41 e0       	ldi	r20, 0x01	; 1
    15f0:	0e 94 50 06 	call	0xca0	; 0xca0 <DIO_VoidSetPinDirection>
    15f4:	80 e0       	ldi	r24, 0x00	; 0
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	a0 e2       	ldi	r26, 0x20	; 32
    15fa:	b2 e4       	ldi	r27, 0x42	; 66
    15fc:	8b 87       	std	Y+11, r24	; 0x0b
    15fe:	9c 87       	std	Y+12, r25	; 0x0c
    1600:	ad 87       	std	Y+13, r26	; 0x0d
    1602:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1604:	6b 85       	ldd	r22, Y+11	; 0x0b
    1606:	7c 85       	ldd	r23, Y+12	; 0x0c
    1608:	8d 85       	ldd	r24, Y+13	; 0x0d
    160a:	9e 85       	ldd	r25, Y+14	; 0x0e
    160c:	20 e0       	ldi	r18, 0x00	; 0
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	4a ef       	ldi	r20, 0xFA	; 250
    1612:	54 e4       	ldi	r21, 0x44	; 68
    1614:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1618:	dc 01       	movw	r26, r24
    161a:	cb 01       	movw	r24, r22
    161c:	8f 83       	std	Y+7, r24	; 0x07
    161e:	98 87       	std	Y+8, r25	; 0x08
    1620:	a9 87       	std	Y+9, r26	; 0x09
    1622:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1624:	6f 81       	ldd	r22, Y+7	; 0x07
    1626:	78 85       	ldd	r23, Y+8	; 0x08
    1628:	89 85       	ldd	r24, Y+9	; 0x09
    162a:	9a 85       	ldd	r25, Y+10	; 0x0a
    162c:	20 e0       	ldi	r18, 0x00	; 0
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	40 e8       	ldi	r20, 0x80	; 128
    1632:	5f e3       	ldi	r21, 0x3F	; 63
    1634:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1638:	88 23       	and	r24, r24
    163a:	2c f4       	brge	.+10     	; 0x1646 <LCD_VoidInit+0x8c>
		__ticks = 1;
    163c:	81 e0       	ldi	r24, 0x01	; 1
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	9e 83       	std	Y+6, r25	; 0x06
    1642:	8d 83       	std	Y+5, r24	; 0x05
    1644:	3f c0       	rjmp	.+126    	; 0x16c4 <LCD_VoidInit+0x10a>
	else if (__tmp > 65535)
    1646:	6f 81       	ldd	r22, Y+7	; 0x07
    1648:	78 85       	ldd	r23, Y+8	; 0x08
    164a:	89 85       	ldd	r24, Y+9	; 0x09
    164c:	9a 85       	ldd	r25, Y+10	; 0x0a
    164e:	20 e0       	ldi	r18, 0x00	; 0
    1650:	3f ef       	ldi	r19, 0xFF	; 255
    1652:	4f e7       	ldi	r20, 0x7F	; 127
    1654:	57 e4       	ldi	r21, 0x47	; 71
    1656:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    165a:	18 16       	cp	r1, r24
    165c:	4c f5       	brge	.+82     	; 0x16b0 <LCD_VoidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    165e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1660:	7c 85       	ldd	r23, Y+12	; 0x0c
    1662:	8d 85       	ldd	r24, Y+13	; 0x0d
    1664:	9e 85       	ldd	r25, Y+14	; 0x0e
    1666:	20 e0       	ldi	r18, 0x00	; 0
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	40 e2       	ldi	r20, 0x20	; 32
    166c:	51 e4       	ldi	r21, 0x41	; 65
    166e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1672:	dc 01       	movw	r26, r24
    1674:	cb 01       	movw	r24, r22
    1676:	bc 01       	movw	r22, r24
    1678:	cd 01       	movw	r24, r26
    167a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    167e:	dc 01       	movw	r26, r24
    1680:	cb 01       	movw	r24, r22
    1682:	9e 83       	std	Y+6, r25	; 0x06
    1684:	8d 83       	std	Y+5, r24	; 0x05
    1686:	0f c0       	rjmp	.+30     	; 0x16a6 <LCD_VoidInit+0xec>
    1688:	88 ec       	ldi	r24, 0xC8	; 200
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	9c 83       	std	Y+4, r25	; 0x04
    168e:	8b 83       	std	Y+3, r24	; 0x03
    1690:	8b 81       	ldd	r24, Y+3	; 0x03
    1692:	9c 81       	ldd	r25, Y+4	; 0x04
    1694:	01 97       	sbiw	r24, 0x01	; 1
    1696:	f1 f7       	brne	.-4      	; 0x1694 <LCD_VoidInit+0xda>
    1698:	9c 83       	std	Y+4, r25	; 0x04
    169a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    169c:	8d 81       	ldd	r24, Y+5	; 0x05
    169e:	9e 81       	ldd	r25, Y+6	; 0x06
    16a0:	01 97       	sbiw	r24, 0x01	; 1
    16a2:	9e 83       	std	Y+6, r25	; 0x06
    16a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16a6:	8d 81       	ldd	r24, Y+5	; 0x05
    16a8:	9e 81       	ldd	r25, Y+6	; 0x06
    16aa:	00 97       	sbiw	r24, 0x00	; 0
    16ac:	69 f7       	brne	.-38     	; 0x1688 <LCD_VoidInit+0xce>
    16ae:	14 c0       	rjmp	.+40     	; 0x16d8 <LCD_VoidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16b0:	6f 81       	ldd	r22, Y+7	; 0x07
    16b2:	78 85       	ldd	r23, Y+8	; 0x08
    16b4:	89 85       	ldd	r24, Y+9	; 0x09
    16b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    16b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16bc:	dc 01       	movw	r26, r24
    16be:	cb 01       	movw	r24, r22
    16c0:	9e 83       	std	Y+6, r25	; 0x06
    16c2:	8d 83       	std	Y+5, r24	; 0x05
    16c4:	8d 81       	ldd	r24, Y+5	; 0x05
    16c6:	9e 81       	ldd	r25, Y+6	; 0x06
    16c8:	9a 83       	std	Y+2, r25	; 0x02
    16ca:	89 83       	std	Y+1, r24	; 0x01
    16cc:	89 81       	ldd	r24, Y+1	; 0x01
    16ce:	9a 81       	ldd	r25, Y+2	; 0x02
    16d0:	01 97       	sbiw	r24, 0x01	; 1
    16d2:	f1 f7       	brne	.-4      	; 0x16d0 <LCD_VoidInit+0x116>
    16d4:	9a 83       	std	Y+2, r25	; 0x02
    16d6:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(40);
		LCD_VoidSendCommand(0b00111000);
    16d8:	88 e3       	ldi	r24, 0x38	; 56
    16da:	0e 94 27 0a 	call	0x144e	; 0x144e <LCD_VoidSendCommand>
		LCD_VoidSendCommand(0b00001100);
    16de:	8c e0       	ldi	r24, 0x0C	; 12
    16e0:	0e 94 27 0a 	call	0x144e	; 0x144e <LCD_VoidSendCommand>
		LCD_VoidSendCommand(0b00000001);
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	0e 94 27 0a 	call	0x144e	; 0x144e <LCD_VoidSendCommand>
}
    16ea:	2e 96       	adiw	r28, 0x0e	; 14
    16ec:	0f b6       	in	r0, 0x3f	; 63
    16ee:	f8 94       	cli
    16f0:	de bf       	out	0x3e, r29	; 62
    16f2:	0f be       	out	0x3f, r0	; 63
    16f4:	cd bf       	out	0x3d, r28	; 61
    16f6:	cf 91       	pop	r28
    16f8:	df 91       	pop	r29
    16fa:	08 95       	ret

000016fc <LCD_VoidClearDisplay>:

void LCD_VoidClearDisplay(void){
    16fc:	df 93       	push	r29
    16fe:	cf 93       	push	r28
    1700:	cd b7       	in	r28, 0x3d	; 61
    1702:	de b7       	in	r29, 0x3e	; 62
	LCD_VoidSendCommand(0b00000001);
    1704:	81 e0       	ldi	r24, 0x01	; 1
    1706:	0e 94 27 0a 	call	0x144e	; 0x144e <LCD_VoidSendCommand>
}
    170a:	cf 91       	pop	r28
    170c:	df 91       	pop	r29
    170e:	08 95       	ret

00001710 <LCD_GoTOXY>:

void LCD_GoTOXY(u8 Copy_u8X,u8 Copy_u8Y){
    1710:	df 93       	push	r29
    1712:	cf 93       	push	r28
    1714:	00 d0       	rcall	.+0      	; 0x1716 <LCD_GoTOXY+0x6>
    1716:	0f 92       	push	r0
    1718:	cd b7       	in	r28, 0x3d	; 61
    171a:	de b7       	in	r29, 0x3e	; 62
    171c:	8a 83       	std	Y+2, r24	; 0x02
    171e:	6b 83       	std	Y+3, r22	; 0x03
	 *  at x=1, y=3   address=0x43
	 *
	 *  at x=0  address = y position
	 *  at x=1 address = y+0x40
	 * */
	u8 Local_add=0;
    1720:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8X==0){
    1722:	8a 81       	ldd	r24, Y+2	; 0x02
    1724:	88 23       	and	r24, r24
    1726:	19 f4       	brne	.+6      	; 0x172e <LCD_GoTOXY+0x1e>
		Local_add = Copy_u8Y;
    1728:	8b 81       	ldd	r24, Y+3	; 0x03
    172a:	89 83       	std	Y+1, r24	; 0x01
    172c:	03 c0       	rjmp	.+6      	; 0x1734 <LCD_GoTOXY+0x24>
	}
	else{
		Local_add = Copy_u8Y+0x40;
    172e:	8b 81       	ldd	r24, Y+3	; 0x03
    1730:	80 5c       	subi	r24, 0xC0	; 192
    1732:	89 83       	std	Y+1, r24	; 0x01
	}

	Set_Bit(Local_add,7); //lcd understand that is an address of postion
    1734:	89 81       	ldd	r24, Y+1	; 0x01
    1736:	80 68       	ori	r24, 0x80	; 128
    1738:	89 83       	std	Y+1, r24	; 0x01
	LCD_VoidSendCommand(Local_add);
    173a:	89 81       	ldd	r24, Y+1	; 0x01
    173c:	0e 94 27 0a 	call	0x144e	; 0x144e <LCD_VoidSendCommand>


}
    1740:	0f 90       	pop	r0
    1742:	0f 90       	pop	r0
    1744:	0f 90       	pop	r0
    1746:	cf 91       	pop	r28
    1748:	df 91       	pop	r29
    174a:	08 95       	ret

0000174c <LCD_voidSendString>:

void LCD_voidSendString(u8* Copy_pcString)
{
    174c:	df 93       	push	r29
    174e:	cf 93       	push	r28
    1750:	00 d0       	rcall	.+0      	; 0x1752 <LCD_voidSendString+0x6>
    1752:	0f 92       	push	r0
    1754:	cd b7       	in	r28, 0x3d	; 61
    1756:	de b7       	in	r29, 0x3e	; 62
    1758:	9b 83       	std	Y+3, r25	; 0x03
    175a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Index=0;
    175c:	19 82       	std	Y+1, r1	; 0x01
    175e:	0e c0       	rjmp	.+28     	; 0x177c <LCD_voidSendString+0x30>

	while(Copy_pcString[Local_u8Index]!='\0')
	{
		LCD_VoidSendData(Copy_pcString[Local_u8Index]);
    1760:	89 81       	ldd	r24, Y+1	; 0x01
    1762:	28 2f       	mov	r18, r24
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	8a 81       	ldd	r24, Y+2	; 0x02
    1768:	9b 81       	ldd	r25, Y+3	; 0x03
    176a:	fc 01       	movw	r30, r24
    176c:	e2 0f       	add	r30, r18
    176e:	f3 1f       	adc	r31, r19
    1770:	80 81       	ld	r24, Z
    1772:	0e 94 89 09 	call	0x1312	; 0x1312 <LCD_VoidSendData>
		Local_u8Index++;
    1776:	89 81       	ldd	r24, Y+1	; 0x01
    1778:	8f 5f       	subi	r24, 0xFF	; 255
    177a:	89 83       	std	Y+1, r24	; 0x01

void LCD_voidSendString(u8* Copy_pcString)
{
	u8 Local_u8Index=0;

	while(Copy_pcString[Local_u8Index]!='\0')
    177c:	89 81       	ldd	r24, Y+1	; 0x01
    177e:	28 2f       	mov	r18, r24
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	8a 81       	ldd	r24, Y+2	; 0x02
    1784:	9b 81       	ldd	r25, Y+3	; 0x03
    1786:	fc 01       	movw	r30, r24
    1788:	e2 0f       	add	r30, r18
    178a:	f3 1f       	adc	r31, r19
    178c:	80 81       	ld	r24, Z
    178e:	88 23       	and	r24, r24
    1790:	39 f7       	brne	.-50     	; 0x1760 <LCD_voidSendString+0x14>
	{
		LCD_VoidSendData(Copy_pcString[Local_u8Index]);
		Local_u8Index++;
	}
}
    1792:	0f 90       	pop	r0
    1794:	0f 90       	pop	r0
    1796:	0f 90       	pop	r0
    1798:	cf 91       	pop	r28
    179a:	df 91       	pop	r29
    179c:	08 95       	ret

0000179e <LCD_voidSendNumber>:

void LCD_voidSendNumber(u32 Copy_u32Number)
{
    179e:	df 93       	push	r29
    17a0:	cf 93       	push	r28
    17a2:	cd b7       	in	r28, 0x3d	; 61
    17a4:	de b7       	in	r29, 0x3e	; 62
    17a6:	2e 97       	sbiw	r28, 0x0e	; 14
    17a8:	0f b6       	in	r0, 0x3f	; 63
    17aa:	f8 94       	cli
    17ac:	de bf       	out	0x3e, r29	; 62
    17ae:	0f be       	out	0x3f, r0	; 63
    17b0:	cd bf       	out	0x3d, r28	; 61
    17b2:	6b 87       	std	Y+11, r22	; 0x0b
    17b4:	7c 87       	std	Y+12, r23	; 0x0c
    17b6:	8d 87       	std	Y+13, r24	; 0x0d
    17b8:	9e 87       	std	Y+14, r25	; 0x0e
   //sec par: represent buffer to store string convention
   //third par: represent number base 10==>Decimal   2==>Binary

   //OR:
   //  sprintf(str, "%d", number); // Convert integer to string
   itoa(Copy_u32Number, Local_u8Str,10);
    17ba:	8b 85       	ldd	r24, Y+11	; 0x0b
    17bc:	9c 85       	ldd	r25, Y+12	; 0x0c
    17be:	9e 01       	movw	r18, r28
    17c0:	2f 5f       	subi	r18, 0xFF	; 255
    17c2:	3f 4f       	sbci	r19, 0xFF	; 255
    17c4:	b9 01       	movw	r22, r18
    17c6:	4a e0       	ldi	r20, 0x0A	; 10
    17c8:	50 e0       	ldi	r21, 0x00	; 0
    17ca:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <itoa>
   LCD_voidSendString(Local_u8Str);
    17ce:	ce 01       	movw	r24, r28
    17d0:	01 96       	adiw	r24, 0x01	; 1
    17d2:	0e 94 a6 0b 	call	0x174c	; 0x174c <LCD_voidSendString>

}
    17d6:	2e 96       	adiw	r28, 0x0e	; 14
    17d8:	0f b6       	in	r0, 0x3f	; 63
    17da:	f8 94       	cli
    17dc:	de bf       	out	0x3e, r29	; 62
    17de:	0f be       	out	0x3f, r0	; 63
    17e0:	cd bf       	out	0x3d, r28	; 61
    17e2:	cf 91       	pop	r28
    17e4:	df 91       	pop	r29
    17e6:	08 95       	ret

000017e8 <KPD_VoidInit>:
#include"KPD_Interface.h"


u8 ROW_PORT; u8 COL_PORT;

void KPD_VoidInit(u8 Copy_ROW_PORT,u8  Copy_Col_PORT){
    17e8:	df 93       	push	r29
    17ea:	cf 93       	push	r28
    17ec:	00 d0       	rcall	.+0      	; 0x17ee <KPD_VoidInit+0x6>
    17ee:	cd b7       	in	r28, 0x3d	; 61
    17f0:	de b7       	in	r29, 0x3e	; 62
    17f2:	89 83       	std	Y+1, r24	; 0x01
    17f4:	6a 83       	std	Y+2, r22	; 0x02
	ROW_PORT = Copy_ROW_PORT;
    17f6:	89 81       	ldd	r24, Y+1	; 0x01
    17f8:	80 93 98 01 	sts	0x0198, r24
	COL_PORT = Copy_Col_PORT;
    17fc:	8a 81       	ldd	r24, Y+2	; 0x02
    17fe:	80 93 99 01 	sts	0x0199, r24

	DIO_VoidSetPinDirection(Copy_Col_PORT,KPD_COL0_PIN,OUTPUT);
    1802:	8a 81       	ldd	r24, Y+2	; 0x02
    1804:	60 e0       	ldi	r22, 0x00	; 0
    1806:	41 e0       	ldi	r20, 0x01	; 1
    1808:	0e 94 50 06 	call	0xca0	; 0xca0 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(Copy_Col_PORT,KPD_COL1_PIN,OUTPUT);
    180c:	8a 81       	ldd	r24, Y+2	; 0x02
    180e:	61 e0       	ldi	r22, 0x01	; 1
    1810:	41 e0       	ldi	r20, 0x01	; 1
    1812:	0e 94 50 06 	call	0xca0	; 0xca0 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(Copy_Col_PORT,KPD_COL2_PIN,OUTPUT);
    1816:	8a 81       	ldd	r24, Y+2	; 0x02
    1818:	62 e0       	ldi	r22, 0x02	; 2
    181a:	41 e0       	ldi	r20, 0x01	; 1
    181c:	0e 94 50 06 	call	0xca0	; 0xca0 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(Copy_Col_PORT,KPD_COL3_PIN,OUTPUT);
    1820:	8a 81       	ldd	r24, Y+2	; 0x02
    1822:	63 e0       	ldi	r22, 0x03	; 3
    1824:	41 e0       	ldi	r20, 0x01	; 1
    1826:	0e 94 50 06 	call	0xca0	; 0xca0 <DIO_VoidSetPinDirection>

	DIO_VoidSetPinValue(Copy_Col_PORT,KPD_COL0_PIN,HIGH);
    182a:	8a 81       	ldd	r24, Y+2	; 0x02
    182c:	60 e0       	ldi	r22, 0x00	; 0
    182e:	41 e0       	ldi	r20, 0x01	; 1
    1830:	0e 94 66 07 	call	0xecc	; 0xecc <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(Copy_Col_PORT,KPD_COL1_PIN,HIGH);
    1834:	8a 81       	ldd	r24, Y+2	; 0x02
    1836:	61 e0       	ldi	r22, 0x01	; 1
    1838:	41 e0       	ldi	r20, 0x01	; 1
    183a:	0e 94 66 07 	call	0xecc	; 0xecc <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(Copy_Col_PORT,KPD_COL2_PIN,HIGH);
    183e:	8a 81       	ldd	r24, Y+2	; 0x02
    1840:	62 e0       	ldi	r22, 0x02	; 2
    1842:	41 e0       	ldi	r20, 0x01	; 1
    1844:	0e 94 66 07 	call	0xecc	; 0xecc <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(Copy_Col_PORT,KPD_COL3_PIN,HIGH);
    1848:	8a 81       	ldd	r24, Y+2	; 0x02
    184a:	63 e0       	ldi	r22, 0x03	; 3
    184c:	41 e0       	ldi	r20, 0x01	; 1
    184e:	0e 94 66 07 	call	0xecc	; 0xecc <DIO_VoidSetPinValue>

	DIO_VoidSetPinDirection(Copy_ROW_PORT,KPD_ROW0_PIN,INPUT);
    1852:	89 81       	ldd	r24, Y+1	; 0x01
    1854:	64 e0       	ldi	r22, 0x04	; 4
    1856:	40 e0       	ldi	r20, 0x00	; 0
    1858:	0e 94 50 06 	call	0xca0	; 0xca0 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(Copy_ROW_PORT,KPD_ROW1_PIN,INPUT);
    185c:	89 81       	ldd	r24, Y+1	; 0x01
    185e:	65 e0       	ldi	r22, 0x05	; 5
    1860:	40 e0       	ldi	r20, 0x00	; 0
    1862:	0e 94 50 06 	call	0xca0	; 0xca0 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(Copy_ROW_PORT,KPD_ROW2_PIN,INPUT);
    1866:	89 81       	ldd	r24, Y+1	; 0x01
    1868:	66 e0       	ldi	r22, 0x06	; 6
    186a:	40 e0       	ldi	r20, 0x00	; 0
    186c:	0e 94 50 06 	call	0xca0	; 0xca0 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(Copy_ROW_PORT,KPD_ROW3_PIN,INPUT);
    1870:	89 81       	ldd	r24, Y+1	; 0x01
    1872:	67 e0       	ldi	r22, 0x07	; 7
    1874:	40 e0       	ldi	r20, 0x00	; 0
    1876:	0e 94 50 06 	call	0xca0	; 0xca0 <DIO_VoidSetPinDirection>

	DIO_VoidSetPinValue(Copy_ROW_PORT,KPD_ROW0_PIN,HIGH);
    187a:	89 81       	ldd	r24, Y+1	; 0x01
    187c:	64 e0       	ldi	r22, 0x04	; 4
    187e:	41 e0       	ldi	r20, 0x01	; 1
    1880:	0e 94 66 07 	call	0xecc	; 0xecc <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(Copy_ROW_PORT,KPD_ROW1_PIN,HIGH);
    1884:	89 81       	ldd	r24, Y+1	; 0x01
    1886:	65 e0       	ldi	r22, 0x05	; 5
    1888:	41 e0       	ldi	r20, 0x01	; 1
    188a:	0e 94 66 07 	call	0xecc	; 0xecc <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(Copy_ROW_PORT,KPD_ROW2_PIN,HIGH);
    188e:	89 81       	ldd	r24, Y+1	; 0x01
    1890:	66 e0       	ldi	r22, 0x06	; 6
    1892:	41 e0       	ldi	r20, 0x01	; 1
    1894:	0e 94 66 07 	call	0xecc	; 0xecc <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(Copy_ROW_PORT,KPD_ROW3_PIN,HIGH);
    1898:	89 81       	ldd	r24, Y+1	; 0x01
    189a:	67 e0       	ldi	r22, 0x07	; 7
    189c:	41 e0       	ldi	r20, 0x01	; 1
    189e:	0e 94 66 07 	call	0xecc	; 0xecc <DIO_VoidSetPinValue>

}
    18a2:	0f 90       	pop	r0
    18a4:	0f 90       	pop	r0
    18a6:	cf 91       	pop	r28
    18a8:	df 91       	pop	r29
    18aa:	08 95       	ret

000018ac <KPD_u8GetPressedKey>:

u8 KPD_u8GetPressedKey(void){
    18ac:	df 93       	push	r29
    18ae:	cf 93       	push	r28
    18b0:	cd b7       	in	r28, 0x3d	; 61
    18b2:	de b7       	in	r29, 0x3e	; 62
    18b4:	a2 97       	sbiw	r28, 0x22	; 34
    18b6:	0f b6       	in	r0, 0x3f	; 63
    18b8:	f8 94       	cli
    18ba:	de bf       	out	0x3e, r29	; 62
    18bc:	0f be       	out	0x3f, r0	; 63
    18be:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8PressedKey=0xFF;
    18c0:	8f ef       	ldi	r24, 0xFF	; 255
    18c2:	8c 83       	std	Y+4, r24	; 0x04

	u8 Local_u8ColumsArray[4]={KPD_COL0_PIN,KPD_COL1_PIN,KPD_COL2_PIN,KPD_COL3_PIN};
    18c4:	1d 82       	std	Y+5, r1	; 0x05
    18c6:	81 e0       	ldi	r24, 0x01	; 1
    18c8:	8e 83       	std	Y+6, r24	; 0x06
    18ca:	82 e0       	ldi	r24, 0x02	; 2
    18cc:	8f 83       	std	Y+7, r24	; 0x07
    18ce:	83 e0       	ldi	r24, 0x03	; 3
    18d0:	88 87       	std	Y+8, r24	; 0x08
	u8 Local_u8RowsArray[4]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};
    18d2:	84 e0       	ldi	r24, 0x04	; 4
    18d4:	89 87       	std	Y+9, r24	; 0x09
    18d6:	85 e0       	ldi	r24, 0x05	; 5
    18d8:	8a 87       	std	Y+10, r24	; 0x0a
    18da:	86 e0       	ldi	r24, 0x06	; 6
    18dc:	8b 87       	std	Y+11, r24	; 0x0b
    18de:	87 e0       	ldi	r24, 0x07	; 7
    18e0:	8c 87       	std	Y+12, r24	; 0x0c

	u8 Local_u8KeyArray[4][4]={{7,8,9,'/'},{4,5,6,'*'},{1,2,3,'-'},{'&',0,'=','+'}};
    18e2:	ce 01       	movw	r24, r28
    18e4:	0d 96       	adiw	r24, 0x0d	; 13
    18e6:	9f 8f       	std	Y+31, r25	; 0x1f
    18e8:	8e 8f       	std	Y+30, r24	; 0x1e
    18ea:	ef e7       	ldi	r30, 0x7F	; 127
    18ec:	f1 e0       	ldi	r31, 0x01	; 1
    18ee:	f9 a3       	std	Y+33, r31	; 0x21
    18f0:	e8 a3       	std	Y+32, r30	; 0x20
    18f2:	f0 e1       	ldi	r31, 0x10	; 16
    18f4:	fa a3       	std	Y+34, r31	; 0x22
    18f6:	e8 a1       	ldd	r30, Y+32	; 0x20
    18f8:	f9 a1       	ldd	r31, Y+33	; 0x21
    18fa:	00 80       	ld	r0, Z
    18fc:	88 a1       	ldd	r24, Y+32	; 0x20
    18fe:	99 a1       	ldd	r25, Y+33	; 0x21
    1900:	01 96       	adiw	r24, 0x01	; 1
    1902:	99 a3       	std	Y+33, r25	; 0x21
    1904:	88 a3       	std	Y+32, r24	; 0x20
    1906:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1908:	ff 8d       	ldd	r31, Y+31	; 0x1f
    190a:	00 82       	st	Z, r0
    190c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    190e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1910:	01 96       	adiw	r24, 0x01	; 1
    1912:	9f 8f       	std	Y+31, r25	; 0x1f
    1914:	8e 8f       	std	Y+30, r24	; 0x1e
    1916:	9a a1       	ldd	r25, Y+34	; 0x22
    1918:	91 50       	subi	r25, 0x01	; 1
    191a:	9a a3       	std	Y+34, r25	; 0x22
    191c:	ea a1       	ldd	r30, Y+34	; 0x22
    191e:	ee 23       	and	r30, r30
    1920:	51 f7       	brne	.-44     	; 0x18f6 <KPD_u8GetPressedKey+0x4a>

	for(u8 Local_u8ColumsIndex=0;Local_u8ColumsIndex<4;Local_u8ColumsIndex++){
    1922:	1b 82       	std	Y+3, r1	; 0x03
    1924:	6a c0       	rjmp	.+212    	; 0x19fa <KPD_u8GetPressedKey+0x14e>

		DIO_VoidSetPinValue(COL_PORT,Local_u8ColumsArray[Local_u8ColumsIndex],LOW);
    1926:	40 91 99 01 	lds	r20, 0x0199
    192a:	8b 81       	ldd	r24, Y+3	; 0x03
    192c:	28 2f       	mov	r18, r24
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	ce 01       	movw	r24, r28
    1932:	05 96       	adiw	r24, 0x05	; 5
    1934:	fc 01       	movw	r30, r24
    1936:	e2 0f       	add	r30, r18
    1938:	f3 1f       	adc	r31, r19
    193a:	90 81       	ld	r25, Z
    193c:	84 2f       	mov	r24, r20
    193e:	69 2f       	mov	r22, r25
    1940:	40 e0       	ldi	r20, 0x00	; 0
    1942:	0e 94 66 07 	call	0xecc	; 0xecc <DIO_VoidSetPinValue>

		for(u8 Local_u8RowsIndex=0;Local_u8RowsIndex < 4;Local_u8RowsIndex++){
    1946:	1a 82       	std	Y+2, r1	; 0x02
    1948:	41 c0       	rjmp	.+130    	; 0x19cc <KPD_u8GetPressedKey+0x120>

			u8 Local_u8PinState=DIO_u8GetPinValue(ROW_PORT,Local_u8RowsArray[Local_u8RowsIndex]);
    194a:	40 91 98 01 	lds	r20, 0x0198
    194e:	8a 81       	ldd	r24, Y+2	; 0x02
    1950:	28 2f       	mov	r18, r24
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	ce 01       	movw	r24, r28
    1956:	09 96       	adiw	r24, 0x09	; 9
    1958:	fc 01       	movw	r30, r24
    195a:	e2 0f       	add	r30, r18
    195c:	f3 1f       	adc	r31, r19
    195e:	90 81       	ld	r25, Z
    1960:	84 2f       	mov	r24, r20
    1962:	69 2f       	mov	r22, r25
    1964:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <DIO_u8GetPinValue>
    1968:	89 83       	std	Y+1, r24	; 0x01

			if(Local_u8PinState==0){
    196a:	89 81       	ldd	r24, Y+1	; 0x01
    196c:	88 23       	and	r24, r24
    196e:	59 f5       	brne	.+86     	; 0x19c6 <KPD_u8GetPressedKey+0x11a>
				Local_u8PressedKey=Local_u8KeyArray[Local_u8RowsIndex][Local_u8ColumsIndex];
    1970:	8a 81       	ldd	r24, Y+2	; 0x02
    1972:	28 2f       	mov	r18, r24
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	8b 81       	ldd	r24, Y+3	; 0x03
    1978:	48 2f       	mov	r20, r24
    197a:	50 e0       	ldi	r21, 0x00	; 0
    197c:	22 0f       	add	r18, r18
    197e:	33 1f       	adc	r19, r19
    1980:	22 0f       	add	r18, r18
    1982:	33 1f       	adc	r19, r19
    1984:	ce 01       	movw	r24, r28
    1986:	01 96       	adiw	r24, 0x01	; 1
    1988:	82 0f       	add	r24, r18
    198a:	93 1f       	adc	r25, r19
    198c:	84 0f       	add	r24, r20
    198e:	95 1f       	adc	r25, r21
    1990:	fc 01       	movw	r30, r24
    1992:	3c 96       	adiw	r30, 0x0c	; 12
    1994:	80 81       	ld	r24, Z
    1996:	8c 83       	std	Y+4, r24	; 0x04
    1998:	10 c0       	rjmp	.+32     	; 0x19ba <KPD_u8GetPressedKey+0x10e>
				while(Local_u8PinState==0){
					Local_u8PinState=DIO_u8GetPinValue(ROW_PORT,Local_u8RowsArray[Local_u8RowsIndex]);
    199a:	40 91 98 01 	lds	r20, 0x0198
    199e:	8a 81       	ldd	r24, Y+2	; 0x02
    19a0:	28 2f       	mov	r18, r24
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	ce 01       	movw	r24, r28
    19a6:	09 96       	adiw	r24, 0x09	; 9
    19a8:	fc 01       	movw	r30, r24
    19aa:	e2 0f       	add	r30, r18
    19ac:	f3 1f       	adc	r31, r19
    19ae:	90 81       	ld	r25, Z
    19b0:	84 2f       	mov	r24, r20
    19b2:	69 2f       	mov	r22, r25
    19b4:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <DIO_u8GetPinValue>
    19b8:	89 83       	std	Y+1, r24	; 0x01

			u8 Local_u8PinState=DIO_u8GetPinValue(ROW_PORT,Local_u8RowsArray[Local_u8RowsIndex]);

			if(Local_u8PinState==0){
				Local_u8PressedKey=Local_u8KeyArray[Local_u8RowsIndex][Local_u8ColumsIndex];
				while(Local_u8PinState==0){
    19ba:	89 81       	ldd	r24, Y+1	; 0x01
    19bc:	88 23       	and	r24, r24
    19be:	69 f3       	breq	.-38     	; 0x199a <KPD_u8GetPressedKey+0xee>
					Local_u8PinState=DIO_u8GetPinValue(ROW_PORT,Local_u8RowsArray[Local_u8RowsIndex]);
				}
				return Local_u8PressedKey;
    19c0:	fc 81       	ldd	r31, Y+4	; 0x04
    19c2:	fd 8f       	std	Y+29, r31	; 0x1d
    19c4:	20 c0       	rjmp	.+64     	; 0x1a06 <KPD_u8GetPressedKey+0x15a>

	for(u8 Local_u8ColumsIndex=0;Local_u8ColumsIndex<4;Local_u8ColumsIndex++){

		DIO_VoidSetPinValue(COL_PORT,Local_u8ColumsArray[Local_u8ColumsIndex],LOW);

		for(u8 Local_u8RowsIndex=0;Local_u8RowsIndex < 4;Local_u8RowsIndex++){
    19c6:	8a 81       	ldd	r24, Y+2	; 0x02
    19c8:	8f 5f       	subi	r24, 0xFF	; 255
    19ca:	8a 83       	std	Y+2, r24	; 0x02
    19cc:	8a 81       	ldd	r24, Y+2	; 0x02
    19ce:	84 30       	cpi	r24, 0x04	; 4
    19d0:	08 f4       	brcc	.+2      	; 0x19d4 <KPD_u8GetPressedKey+0x128>
    19d2:	bb cf       	rjmp	.-138    	; 0x194a <KPD_u8GetPressedKey+0x9e>
					Local_u8PinState=DIO_u8GetPinValue(ROW_PORT,Local_u8RowsArray[Local_u8RowsIndex]);
				}
				return Local_u8PressedKey;
			}
		}
		DIO_VoidSetPinValue(COL_PORT,Local_u8ColumsArray[Local_u8ColumsIndex],HIGH);
    19d4:	40 91 99 01 	lds	r20, 0x0199
    19d8:	8b 81       	ldd	r24, Y+3	; 0x03
    19da:	28 2f       	mov	r18, r24
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	ce 01       	movw	r24, r28
    19e0:	05 96       	adiw	r24, 0x05	; 5
    19e2:	fc 01       	movw	r30, r24
    19e4:	e2 0f       	add	r30, r18
    19e6:	f3 1f       	adc	r31, r19
    19e8:	90 81       	ld	r25, Z
    19ea:	84 2f       	mov	r24, r20
    19ec:	69 2f       	mov	r22, r25
    19ee:	41 e0       	ldi	r20, 0x01	; 1
    19f0:	0e 94 66 07 	call	0xecc	; 0xecc <DIO_VoidSetPinValue>
	u8 Local_u8ColumsArray[4]={KPD_COL0_PIN,KPD_COL1_PIN,KPD_COL2_PIN,KPD_COL3_PIN};
	u8 Local_u8RowsArray[4]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};

	u8 Local_u8KeyArray[4][4]={{7,8,9,'/'},{4,5,6,'*'},{1,2,3,'-'},{'&',0,'=','+'}};

	for(u8 Local_u8ColumsIndex=0;Local_u8ColumsIndex<4;Local_u8ColumsIndex++){
    19f4:	8b 81       	ldd	r24, Y+3	; 0x03
    19f6:	8f 5f       	subi	r24, 0xFF	; 255
    19f8:	8b 83       	std	Y+3, r24	; 0x03
    19fa:	8b 81       	ldd	r24, Y+3	; 0x03
    19fc:	84 30       	cpi	r24, 0x04	; 4
    19fe:	08 f4       	brcc	.+2      	; 0x1a02 <KPD_u8GetPressedKey+0x156>
    1a00:	92 cf       	rjmp	.-220    	; 0x1926 <KPD_u8GetPressedKey+0x7a>
				return Local_u8PressedKey;
			}
		}
		DIO_VoidSetPinValue(COL_PORT,Local_u8ColumsArray[Local_u8ColumsIndex],HIGH);
	}
	return Local_u8PressedKey;
    1a02:	8c 81       	ldd	r24, Y+4	; 0x04
    1a04:	8d 8f       	std	Y+29, r24	; 0x1d
    1a06:	8d 8d       	ldd	r24, Y+29	; 0x1d

}
    1a08:	a2 96       	adiw	r28, 0x22	; 34
    1a0a:	0f b6       	in	r0, 0x3f	; 63
    1a0c:	f8 94       	cli
    1a0e:	de bf       	out	0x3e, r29	; 62
    1a10:	0f be       	out	0x3f, r0	; 63
    1a12:	cd bf       	out	0x3d, r28	; 61
    1a14:	cf 91       	pop	r28
    1a16:	df 91       	pop	r29
    1a18:	08 95       	ret

00001a1a <SvSeg_VoidCounter>:
	             0b01111101, //6
	             0b00000111, //7
	             0b01111111, //8
	             0b01101111, //9
	             };
void SvSeg_VoidCounter(u8 Copy_Port, u8 del_Sec){
    1a1a:	df 93       	push	r29
    1a1c:	cf 93       	push	r28
    1a1e:	cd b7       	in	r28, 0x3d	; 61
    1a20:	de b7       	in	r29, 0x3e	; 62
    1a22:	61 97       	sbiw	r28, 0x11	; 17
    1a24:	0f b6       	in	r0, 0x3f	; 63
    1a26:	f8 94       	cli
    1a28:	de bf       	out	0x3e, r29	; 62
    1a2a:	0f be       	out	0x3f, r0	; 63
    1a2c:	cd bf       	out	0x3d, r28	; 61
    1a2e:	88 8b       	std	Y+16, r24	; 0x10
    1a30:	69 8b       	std	Y+17, r22	; 0x11
	Port = Copy_Port;
    1a32:	88 89       	ldd	r24, Y+16	; 0x10
    1a34:	80 93 9a 01 	sts	0x019A, r24
	DIO_VoidSetPortDirection(Copy_Port,0x11);
    1a38:	88 89       	ldd	r24, Y+16	; 0x10
    1a3a:	61 e1       	ldi	r22, 0x11	; 17
    1a3c:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_VoidSetPortDirection>
	for(u8 i=0;i<10;i++){
    1a40:	1f 86       	std	Y+15, r1	; 0x0f
    1a42:	93 c0       	rjmp	.+294    	; 0x1b6a <SvSeg_VoidCounter+0x150>
		DIO_VoidSetPortValue(Copy_Port,arr[i]);
    1a44:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a46:	88 2f       	mov	r24, r24
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	fc 01       	movw	r30, r24
    1a4c:	eb 58       	subi	r30, 0x8B	; 139
    1a4e:	fe 4f       	sbci	r31, 0xFE	; 254
    1a50:	90 81       	ld	r25, Z
    1a52:	88 89       	ldd	r24, Y+16	; 0x10
    1a54:	69 2f       	mov	r22, r25
    1a56:	0e 94 3f 09 	call	0x127e	; 0x127e <DIO_VoidSetPortValue>
		_delay_ms(del_Sec*1000);
    1a5a:	89 89       	ldd	r24, Y+17	; 0x11
    1a5c:	28 2f       	mov	r18, r24
    1a5e:	30 e0       	ldi	r19, 0x00	; 0
    1a60:	88 ee       	ldi	r24, 0xE8	; 232
    1a62:	93 e0       	ldi	r25, 0x03	; 3
    1a64:	ac 01       	movw	r20, r24
    1a66:	24 9f       	mul	r18, r20
    1a68:	c0 01       	movw	r24, r0
    1a6a:	25 9f       	mul	r18, r21
    1a6c:	90 0d       	add	r25, r0
    1a6e:	34 9f       	mul	r19, r20
    1a70:	90 0d       	add	r25, r0
    1a72:	11 24       	eor	r1, r1
    1a74:	aa 27       	eor	r26, r26
    1a76:	97 fd       	sbrc	r25, 7
    1a78:	a0 95       	com	r26
    1a7a:	ba 2f       	mov	r27, r26
    1a7c:	bc 01       	movw	r22, r24
    1a7e:	cd 01       	movw	r24, r26
    1a80:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    1a84:	dc 01       	movw	r26, r24
    1a86:	cb 01       	movw	r24, r22
    1a88:	8b 87       	std	Y+11, r24	; 0x0b
    1a8a:	9c 87       	std	Y+12, r25	; 0x0c
    1a8c:	ad 87       	std	Y+13, r26	; 0x0d
    1a8e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a90:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a92:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a94:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a96:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a98:	20 e0       	ldi	r18, 0x00	; 0
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	4a ef       	ldi	r20, 0xFA	; 250
    1a9e:	54 e4       	ldi	r21, 0x44	; 68
    1aa0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aa4:	dc 01       	movw	r26, r24
    1aa6:	cb 01       	movw	r24, r22
    1aa8:	8f 83       	std	Y+7, r24	; 0x07
    1aaa:	98 87       	std	Y+8, r25	; 0x08
    1aac:	a9 87       	std	Y+9, r26	; 0x09
    1aae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ab0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ab2:	78 85       	ldd	r23, Y+8	; 0x08
    1ab4:	89 85       	ldd	r24, Y+9	; 0x09
    1ab6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ab8:	20 e0       	ldi	r18, 0x00	; 0
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	40 e8       	ldi	r20, 0x80	; 128
    1abe:	5f e3       	ldi	r21, 0x3F	; 63
    1ac0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ac4:	88 23       	and	r24, r24
    1ac6:	2c f4       	brge	.+10     	; 0x1ad2 <SvSeg_VoidCounter+0xb8>
		__ticks = 1;
    1ac8:	81 e0       	ldi	r24, 0x01	; 1
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	9e 83       	std	Y+6, r25	; 0x06
    1ace:	8d 83       	std	Y+5, r24	; 0x05
    1ad0:	3f c0       	rjmp	.+126    	; 0x1b50 <SvSeg_VoidCounter+0x136>
	else if (__tmp > 65535)
    1ad2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ad4:	78 85       	ldd	r23, Y+8	; 0x08
    1ad6:	89 85       	ldd	r24, Y+9	; 0x09
    1ad8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ada:	20 e0       	ldi	r18, 0x00	; 0
    1adc:	3f ef       	ldi	r19, 0xFF	; 255
    1ade:	4f e7       	ldi	r20, 0x7F	; 127
    1ae0:	57 e4       	ldi	r21, 0x47	; 71
    1ae2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ae6:	18 16       	cp	r1, r24
    1ae8:	4c f5       	brge	.+82     	; 0x1b3c <SvSeg_VoidCounter+0x122>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aea:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aec:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aee:	8d 85       	ldd	r24, Y+13	; 0x0d
    1af0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1af2:	20 e0       	ldi	r18, 0x00	; 0
    1af4:	30 e0       	ldi	r19, 0x00	; 0
    1af6:	40 e2       	ldi	r20, 0x20	; 32
    1af8:	51 e4       	ldi	r21, 0x41	; 65
    1afa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1afe:	dc 01       	movw	r26, r24
    1b00:	cb 01       	movw	r24, r22
    1b02:	bc 01       	movw	r22, r24
    1b04:	cd 01       	movw	r24, r26
    1b06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b0a:	dc 01       	movw	r26, r24
    1b0c:	cb 01       	movw	r24, r22
    1b0e:	9e 83       	std	Y+6, r25	; 0x06
    1b10:	8d 83       	std	Y+5, r24	; 0x05
    1b12:	0f c0       	rjmp	.+30     	; 0x1b32 <SvSeg_VoidCounter+0x118>
    1b14:	88 ec       	ldi	r24, 0xC8	; 200
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	9c 83       	std	Y+4, r25	; 0x04
    1b1a:	8b 83       	std	Y+3, r24	; 0x03
    1b1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b20:	01 97       	sbiw	r24, 0x01	; 1
    1b22:	f1 f7       	brne	.-4      	; 0x1b20 <SvSeg_VoidCounter+0x106>
    1b24:	9c 83       	std	Y+4, r25	; 0x04
    1b26:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b28:	8d 81       	ldd	r24, Y+5	; 0x05
    1b2a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b2c:	01 97       	sbiw	r24, 0x01	; 1
    1b2e:	9e 83       	std	Y+6, r25	; 0x06
    1b30:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b32:	8d 81       	ldd	r24, Y+5	; 0x05
    1b34:	9e 81       	ldd	r25, Y+6	; 0x06
    1b36:	00 97       	sbiw	r24, 0x00	; 0
    1b38:	69 f7       	brne	.-38     	; 0x1b14 <SvSeg_VoidCounter+0xfa>
    1b3a:	14 c0       	rjmp	.+40     	; 0x1b64 <SvSeg_VoidCounter+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b3c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b3e:	78 85       	ldd	r23, Y+8	; 0x08
    1b40:	89 85       	ldd	r24, Y+9	; 0x09
    1b42:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b48:	dc 01       	movw	r26, r24
    1b4a:	cb 01       	movw	r24, r22
    1b4c:	9e 83       	std	Y+6, r25	; 0x06
    1b4e:	8d 83       	std	Y+5, r24	; 0x05
    1b50:	8d 81       	ldd	r24, Y+5	; 0x05
    1b52:	9e 81       	ldd	r25, Y+6	; 0x06
    1b54:	9a 83       	std	Y+2, r25	; 0x02
    1b56:	89 83       	std	Y+1, r24	; 0x01
    1b58:	89 81       	ldd	r24, Y+1	; 0x01
    1b5a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b5c:	01 97       	sbiw	r24, 0x01	; 1
    1b5e:	f1 f7       	brne	.-4      	; 0x1b5c <SvSeg_VoidCounter+0x142>
    1b60:	9a 83       	std	Y+2, r25	; 0x02
    1b62:	89 83       	std	Y+1, r24	; 0x01
	             0b01101111, //9
	             };
void SvSeg_VoidCounter(u8 Copy_Port, u8 del_Sec){
	Port = Copy_Port;
	DIO_VoidSetPortDirection(Copy_Port,0x11);
	for(u8 i=0;i<10;i++){
    1b64:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b66:	8f 5f       	subi	r24, 0xFF	; 255
    1b68:	8f 87       	std	Y+15, r24	; 0x0f
    1b6a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b6c:	8a 30       	cpi	r24, 0x0A	; 10
    1b6e:	08 f4       	brcc	.+2      	; 0x1b72 <SvSeg_VoidCounter+0x158>
    1b70:	69 cf       	rjmp	.-302    	; 0x1a44 <SvSeg_VoidCounter+0x2a>
		DIO_VoidSetPortValue(Copy_Port,arr[i]);
		_delay_ms(del_Sec*1000);
	}
}
    1b72:	61 96       	adiw	r28, 0x11	; 17
    1b74:	0f b6       	in	r0, 0x3f	; 63
    1b76:	f8 94       	cli
    1b78:	de bf       	out	0x3e, r29	; 62
    1b7a:	0f be       	out	0x3f, r0	; 63
    1b7c:	cd bf       	out	0x3d, r28	; 61
    1b7e:	cf 91       	pop	r28
    1b80:	df 91       	pop	r29
    1b82:	08 95       	ret

00001b84 <SvSeg_VoidDisplay>:

void SvSeg_VoidDisplay(u8 Copy_Port,u8 number){
    1b84:	df 93       	push	r29
    1b86:	cf 93       	push	r28
    1b88:	00 d0       	rcall	.+0      	; 0x1b8a <SvSeg_VoidDisplay+0x6>
    1b8a:	cd b7       	in	r28, 0x3d	; 61
    1b8c:	de b7       	in	r29, 0x3e	; 62
    1b8e:	89 83       	std	Y+1, r24	; 0x01
    1b90:	6a 83       	std	Y+2, r22	; 0x02
	Port = Copy_Port;
    1b92:	89 81       	ldd	r24, Y+1	; 0x01
    1b94:	80 93 9a 01 	sts	0x019A, r24
	DIO_VoidSetPortDirection(Copy_Port,0x11);
    1b98:	89 81       	ldd	r24, Y+1	; 0x01
    1b9a:	61 e1       	ldi	r22, 0x11	; 17
    1b9c:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_VoidSetPortDirection>
	DIO_VoidSetPortValue(Copy_Port,arr[number]);
    1ba0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba2:	88 2f       	mov	r24, r24
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	fc 01       	movw	r30, r24
    1ba8:	eb 58       	subi	r30, 0x8B	; 139
    1baa:	fe 4f       	sbci	r31, 0xFE	; 254
    1bac:	90 81       	ld	r25, Z
    1bae:	89 81       	ldd	r24, Y+1	; 0x01
    1bb0:	69 2f       	mov	r22, r25
    1bb2:	0e 94 3f 09 	call	0x127e	; 0x127e <DIO_VoidSetPortValue>
}
    1bb6:	0f 90       	pop	r0
    1bb8:	0f 90       	pop	r0
    1bba:	cf 91       	pop	r28
    1bbc:	df 91       	pop	r29
    1bbe:	08 95       	ret

00001bc0 <SvSeg_CLR>:

void SvSeg_CLR(void){
    1bc0:	df 93       	push	r29
    1bc2:	cf 93       	push	r28
    1bc4:	cd b7       	in	r28, 0x3d	; 61
    1bc6:	de b7       	in	r29, 0x3e	; 62
	DIO_VoidSetPortValue(Port,OFF);
    1bc8:	80 91 9a 01 	lds	r24, 0x019A
    1bcc:	60 e0       	ldi	r22, 0x00	; 0
    1bce:	0e 94 3f 09 	call	0x127e	; 0x127e <DIO_VoidSetPortValue>
}
    1bd2:	cf 91       	pop	r28
    1bd4:	df 91       	pop	r29
    1bd6:	08 95       	ret

00001bd8 <power>:
#include"../HAL/KPD_Handler/KPD_Interface.h"
#include"../HAL/7Seg/7Seg_Interface.h"
#include"../MCAL/Driver_DIO/DIO_Interface.h"


u16 power(u8 base,u8 exp){
    1bd8:	df 93       	push	r29
    1bda:	cf 93       	push	r28
    1bdc:	00 d0       	rcall	.+0      	; 0x1bde <power+0x6>
    1bde:	00 d0       	rcall	.+0      	; 0x1be0 <power+0x8>
    1be0:	00 d0       	rcall	.+0      	; 0x1be2 <power+0xa>
    1be2:	cd b7       	in	r28, 0x3d	; 61
    1be4:	de b7       	in	r29, 0x3e	; 62
    1be6:	8b 83       	std	Y+3, r24	; 0x03
    1be8:	6c 83       	std	Y+4, r22	; 0x04
	u16 val=1;
    1bea:	81 e0       	ldi	r24, 0x01	; 1
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	9a 83       	std	Y+2, r25	; 0x02
    1bf0:	89 83       	std	Y+1, r24	; 0x01
	if(exp==0){return 1;}
    1bf2:	8c 81       	ldd	r24, Y+4	; 0x04
    1bf4:	88 23       	and	r24, r24
    1bf6:	b9 f4       	brne	.+46     	; 0x1c26 <power+0x4e>
    1bf8:	41 e0       	ldi	r20, 0x01	; 1
    1bfa:	50 e0       	ldi	r21, 0x00	; 0
    1bfc:	5e 83       	std	Y+6, r21	; 0x06
    1bfe:	4d 83       	std	Y+5, r20	; 0x05
    1c00:	19 c0       	rjmp	.+50     	; 0x1c34 <power+0x5c>
	else{
		while(exp!=0){
			val *= base;
    1c02:	8b 81       	ldd	r24, Y+3	; 0x03
    1c04:	28 2f       	mov	r18, r24
    1c06:	30 e0       	ldi	r19, 0x00	; 0
    1c08:	89 81       	ldd	r24, Y+1	; 0x01
    1c0a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c0c:	ac 01       	movw	r20, r24
    1c0e:	42 9f       	mul	r20, r18
    1c10:	c0 01       	movw	r24, r0
    1c12:	43 9f       	mul	r20, r19
    1c14:	90 0d       	add	r25, r0
    1c16:	52 9f       	mul	r21, r18
    1c18:	90 0d       	add	r25, r0
    1c1a:	11 24       	eor	r1, r1
    1c1c:	9a 83       	std	Y+2, r25	; 0x02
    1c1e:	89 83       	std	Y+1, r24	; 0x01
			exp--;
    1c20:	8c 81       	ldd	r24, Y+4	; 0x04
    1c22:	81 50       	subi	r24, 0x01	; 1
    1c24:	8c 83       	std	Y+4, r24	; 0x04

u16 power(u8 base,u8 exp){
	u16 val=1;
	if(exp==0){return 1;}
	else{
		while(exp!=0){
    1c26:	8c 81       	ldd	r24, Y+4	; 0x04
    1c28:	88 23       	and	r24, r24
    1c2a:	59 f7       	brne	.-42     	; 0x1c02 <power+0x2a>
			val *= base;
			exp--;
			}
	}
	return val;
    1c2c:	89 81       	ldd	r24, Y+1	; 0x01
    1c2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c30:	9e 83       	std	Y+6, r25	; 0x06
    1c32:	8d 83       	std	Y+5, r24	; 0x05
    1c34:	8d 81       	ldd	r24, Y+5	; 0x05
    1c36:	9e 81       	ldd	r25, Y+6	; 0x06
}
    1c38:	26 96       	adiw	r28, 0x06	; 6
    1c3a:	0f b6       	in	r0, 0x3f	; 63
    1c3c:	f8 94       	cli
    1c3e:	de bf       	out	0x3e, r29	; 62
    1c40:	0f be       	out	0x3f, r0	; 63
    1c42:	cd bf       	out	0x3d, r28	; 61
    1c44:	cf 91       	pop	r28
    1c46:	df 91       	pop	r29
    1c48:	08 95       	ret

00001c4a <main>:


void main(void){
    1c4a:	cf 92       	push	r12
    1c4c:	df 92       	push	r13
    1c4e:	ef 92       	push	r14
    1c50:	ff 92       	push	r15
    1c52:	0f 93       	push	r16
    1c54:	1f 93       	push	r17
    1c56:	df 93       	push	r29
    1c58:	cf 93       	push	r28
    1c5a:	cd b7       	in	r28, 0x3d	; 61
    1c5c:	de b7       	in	r29, 0x3e	; 62
    1c5e:	a3 97       	sbiw	r28, 0x23	; 35
    1c60:	0f b6       	in	r0, 0x3f	; 63
    1c62:	f8 94       	cli
    1c64:	de bf       	out	0x3e, r29	; 62
    1c66:	0f be       	out	0x3f, r0	; 63
    1c68:	cd bf       	out	0x3d, r28	; 61
	KPD_VoidInit(KPD_ROW_PORTC,KPD_COL_PORTC);
    1c6a:	82 e0       	ldi	r24, 0x02	; 2
    1c6c:	62 e0       	ldi	r22, 0x02	; 2
    1c6e:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <KPD_VoidInit>
	LCD_VoidInit();
    1c72:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <LCD_VoidInit>
	u8 ascii=200;
    1c76:	88 ec       	ldi	r24, 0xC8	; 200
    1c78:	8c 8b       	std	Y+20, r24	; 0x14
	u8 size = 2;
    1c7a:	82 e0       	ldi	r24, 0x02	; 2
    1c7c:	8b 8b       	std	Y+19, r24	; 0x13
	s32 par[2]={0,0};
    1c7e:	9e 01       	movw	r18, r28
    1c80:	2b 5e       	subi	r18, 0xEB	; 235
    1c82:	3f 4f       	sbci	r19, 0xFF	; 255
    1c84:	38 a3       	std	Y+32, r19	; 0x20
    1c86:	2f 8f       	std	Y+31, r18	; 0x1f
    1c88:	4f e8       	ldi	r20, 0x8F	; 143
    1c8a:	51 e0       	ldi	r21, 0x01	; 1
    1c8c:	5a a3       	std	Y+34, r21	; 0x22
    1c8e:	49 a3       	std	Y+33, r20	; 0x21
    1c90:	58 e0       	ldi	r21, 0x08	; 8
    1c92:	5b a3       	std	Y+35, r21	; 0x23
    1c94:	e9 a1       	ldd	r30, Y+33	; 0x21
    1c96:	fa a1       	ldd	r31, Y+34	; 0x22
    1c98:	00 80       	ld	r0, Z
    1c9a:	29 a1       	ldd	r18, Y+33	; 0x21
    1c9c:	3a a1       	ldd	r19, Y+34	; 0x22
    1c9e:	2f 5f       	subi	r18, 0xFF	; 255
    1ca0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ca2:	3a a3       	std	Y+34, r19	; 0x22
    1ca4:	29 a3       	std	Y+33, r18	; 0x21
    1ca6:	ef 8d       	ldd	r30, Y+31	; 0x1f
    1ca8:	f8 a1       	ldd	r31, Y+32	; 0x20
    1caa:	00 82       	st	Z, r0
    1cac:	2f 8d       	ldd	r18, Y+31	; 0x1f
    1cae:	38 a1       	ldd	r19, Y+32	; 0x20
    1cb0:	2f 5f       	subi	r18, 0xFF	; 255
    1cb2:	3f 4f       	sbci	r19, 0xFF	; 255
    1cb4:	38 a3       	std	Y+32, r19	; 0x20
    1cb6:	2f 8f       	std	Y+31, r18	; 0x1f
    1cb8:	3b a1       	ldd	r19, Y+35	; 0x23
    1cba:	31 50       	subi	r19, 0x01	; 1
    1cbc:	3b a3       	std	Y+35, r19	; 0x23
    1cbe:	4b a1       	ldd	r20, Y+35	; 0x23
    1cc0:	44 23       	and	r20, r20
    1cc2:	41 f7       	brne	.-48     	; 0x1c94 <main+0x4a>
	s32 val=0;
    1cc4:	1f 86       	std	Y+15, r1	; 0x0f
    1cc6:	18 8a       	std	Y+16, r1	; 0x10
    1cc8:	19 8a       	std	Y+17, r1	; 0x11
    1cca:	1a 8a       	std	Y+18, r1	; 0x12

	u8 idx=0;
    1ccc:	1e 86       	std	Y+14, r1	; 0x0e
	u8 sign=0;
    1cce:	1d 86       	std	Y+13, r1	; 0x0d
	u8 str='+';
    1cd0:	8b e2       	ldi	r24, 0x2B	; 43
    1cd2:	8c 87       	std	Y+12, r24	; 0x0c
	while(1){
		u8 num=KPD_u8GetPressedKey();
    1cd4:	0e 94 56 0c 	call	0x18ac	; 0x18ac <KPD_u8GetPressedKey>
    1cd8:	8b 87       	std	Y+11, r24	; 0x0b
		if(num!=255){
    1cda:	8b 85       	ldd	r24, Y+11	; 0x0b
    1cdc:	8f 3f       	cpi	r24, 0xFF	; 255
    1cde:	d1 f3       	breq	.-12     	; 0x1cd4 <main+0x8a>
			if(num=='&'){LCD_VoidClearDisplay();
    1ce0:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ce2:	86 32       	cpi	r24, 0x26	; 38
    1ce4:	f9 f4       	brne	.+62     	; 0x1d24 <main+0xda>
    1ce6:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <LCD_VoidClearDisplay>
			idx=0;
    1cea:	1e 86       	std	Y+14, r1	; 0x0e
			for(u8 i=0;i<size;i++){
    1cec:	1a 86       	std	Y+10, r1	; 0x0a
    1cee:	15 c0       	rjmp	.+42     	; 0x1d1a <main+0xd0>
					par[i]=0;
    1cf0:	8a 85       	ldd	r24, Y+10	; 0x0a
    1cf2:	88 2f       	mov	r24, r24
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	9c 01       	movw	r18, r24
    1cf8:	22 0f       	add	r18, r18
    1cfa:	33 1f       	adc	r19, r19
    1cfc:	22 0f       	add	r18, r18
    1cfe:	33 1f       	adc	r19, r19
    1d00:	ce 01       	movw	r24, r28
    1d02:	01 96       	adiw	r24, 0x01	; 1
    1d04:	82 0f       	add	r24, r18
    1d06:	93 1f       	adc	r25, r19
    1d08:	fc 01       	movw	r30, r24
    1d0a:	74 96       	adiw	r30, 0x14	; 20
    1d0c:	10 82       	st	Z, r1
    1d0e:	11 82       	std	Z+1, r1	; 0x01
    1d10:	12 82       	std	Z+2, r1	; 0x02
    1d12:	13 82       	std	Z+3, r1	; 0x03
	while(1){
		u8 num=KPD_u8GetPressedKey();
		if(num!=255){
			if(num=='&'){LCD_VoidClearDisplay();
			idx=0;
			for(u8 i=0;i<size;i++){
    1d14:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d16:	8f 5f       	subi	r24, 0xFF	; 255
    1d18:	8a 87       	std	Y+10, r24	; 0x0a
    1d1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d1c:	8b 89       	ldd	r24, Y+19	; 0x13
    1d1e:	98 17       	cp	r25, r24
    1d20:	38 f3       	brcs	.-50     	; 0x1cf0 <main+0xa6>
    1d22:	d8 cf       	rjmp	.-80     	; 0x1cd4 <main+0x8a>
					par[i]=0;
					 }
			}
			else if(num=='='){
    1d24:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d26:	8d 33       	cpi	r24, 0x3D	; 61
    1d28:	09 f0       	breq	.+2      	; 0x1d2c <main+0xe2>
    1d2a:	74 c1       	rjmp	.+744    	; 0x2014 <main+0x3ca>
				if(sign==1){
    1d2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d2e:	81 30       	cpi	r24, 0x01	; 1
    1d30:	81 f4       	brne	.+32     	; 0x1d52 <main+0x108>
					par[1] = -1*par[1];
    1d32:	89 8d       	ldd	r24, Y+25	; 0x19
    1d34:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1d36:	ab 8d       	ldd	r26, Y+27	; 0x1b
    1d38:	bc 8d       	ldd	r27, Y+28	; 0x1c
    1d3a:	b0 95       	com	r27
    1d3c:	a0 95       	com	r26
    1d3e:	90 95       	com	r25
    1d40:	81 95       	neg	r24
    1d42:	9f 4f       	sbci	r25, 0xFF	; 255
    1d44:	af 4f       	sbci	r26, 0xFF	; 255
    1d46:	bf 4f       	sbci	r27, 0xFF	; 255
    1d48:	89 8f       	std	Y+25, r24	; 0x19
    1d4a:	9a 8f       	std	Y+26, r25	; 0x1a
    1d4c:	ab 8f       	std	Y+27, r26	; 0x1b
    1d4e:	bc 8f       	std	Y+28, r27	; 0x1c
					sign=0;
    1d50:	1d 86       	std	Y+13, r1	; 0x0d
				}
				u8 base=0;
    1d52:	19 86       	std	Y+9, r1	; 0x09
				u8 div=0;
    1d54:	18 86       	std	Y+8, r1	; 0x08
				u8 nextCHK=2;
    1d56:	82 e0       	ldi	r24, 0x02	; 2
    1d58:	8f 83       	std	Y+7, r24	; 0x07
				LCD_VoidClearDisplay();
    1d5a:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <LCD_VoidClearDisplay>
				switch (str){
    1d5e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1d60:	e8 2f       	mov	r30, r24
    1d62:	f0 e0       	ldi	r31, 0x00	; 0
    1d64:	fe 8f       	std	Y+30, r31	; 0x1e
    1d66:	ed 8f       	std	Y+29, r30	; 0x1d
    1d68:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1d6a:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1d6c:	2b 32       	cpi	r18, 0x2B	; 43
    1d6e:	31 05       	cpc	r19, r1
    1d70:	09 f4       	brne	.+2      	; 0x1d74 <main+0x12a>
    1d72:	59 c0       	rjmp	.+178    	; 0x1e26 <main+0x1dc>
    1d74:	4d 8d       	ldd	r20, Y+29	; 0x1d
    1d76:	5e 8d       	ldd	r21, Y+30	; 0x1e
    1d78:	4c 32       	cpi	r20, 0x2C	; 44
    1d7a:	51 05       	cpc	r21, r1
    1d7c:	34 f4       	brge	.+12     	; 0x1d8a <main+0x140>
    1d7e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d80:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d82:	8a 32       	cpi	r24, 0x2A	; 42
    1d84:	91 05       	cpc	r25, r1
    1d86:	59 f1       	breq	.+86     	; 0x1dde <main+0x194>
    1d88:	5e c0       	rjmp	.+188    	; 0x1e46 <main+0x1fc>
    1d8a:	ed 8d       	ldd	r30, Y+29	; 0x1d
    1d8c:	fe 8d       	ldd	r31, Y+30	; 0x1e
    1d8e:	ed 32       	cpi	r30, 0x2D	; 45
    1d90:	f1 05       	cpc	r31, r1
    1d92:	c1 f1       	breq	.+112    	; 0x1e04 <main+0x1ba>
    1d94:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1d96:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1d98:	2f 32       	cpi	r18, 0x2F	; 47
    1d9a:	31 05       	cpc	r19, r1
    1d9c:	09 f0       	breq	.+2      	; 0x1da0 <main+0x156>
    1d9e:	53 c0       	rjmp	.+166    	; 0x1e46 <main+0x1fc>
					case '/':
						val = (par[0]*100) / par[1];
    1da0:	8d 89       	ldd	r24, Y+21	; 0x15
    1da2:	9e 89       	ldd	r25, Y+22	; 0x16
    1da4:	af 89       	ldd	r26, Y+23	; 0x17
    1da6:	b8 8d       	ldd	r27, Y+24	; 0x18
    1da8:	24 e6       	ldi	r18, 0x64	; 100
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	40 e0       	ldi	r20, 0x00	; 0
    1dae:	50 e0       	ldi	r21, 0x00	; 0
    1db0:	bc 01       	movw	r22, r24
    1db2:	cd 01       	movw	r24, r26
    1db4:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <__mulsi3>
    1db8:	dc 01       	movw	r26, r24
    1dba:	cb 01       	movw	r24, r22
    1dbc:	29 8d       	ldd	r18, Y+25	; 0x19
    1dbe:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1dc0:	4b 8d       	ldd	r20, Y+27	; 0x1b
    1dc2:	5c 8d       	ldd	r21, Y+28	; 0x1c
    1dc4:	bc 01       	movw	r22, r24
    1dc6:	cd 01       	movw	r24, r26
    1dc8:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__divmodsi4>
    1dcc:	da 01       	movw	r26, r20
    1dce:	c9 01       	movw	r24, r18
    1dd0:	8f 87       	std	Y+15, r24	; 0x0f
    1dd2:	98 8b       	std	Y+16, r25	; 0x10
    1dd4:	a9 8b       	std	Y+17, r26	; 0x11
    1dd6:	ba 8b       	std	Y+18, r27	; 0x12
						div=1;
    1dd8:	81 e0       	ldi	r24, 0x01	; 1
    1dda:	88 87       	std	Y+8, r24	; 0x08
    1ddc:	34 c0       	rjmp	.+104    	; 0x1e46 <main+0x1fc>
						break;
					case '*':
						val = par[0] * par[1];
    1dde:	8d 89       	ldd	r24, Y+21	; 0x15
    1de0:	9e 89       	ldd	r25, Y+22	; 0x16
    1de2:	af 89       	ldd	r26, Y+23	; 0x17
    1de4:	b8 8d       	ldd	r27, Y+24	; 0x18
    1de6:	29 8d       	ldd	r18, Y+25	; 0x19
    1de8:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1dea:	4b 8d       	ldd	r20, Y+27	; 0x1b
    1dec:	5c 8d       	ldd	r21, Y+28	; 0x1c
    1dee:	bc 01       	movw	r22, r24
    1df0:	cd 01       	movw	r24, r26
    1df2:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <__mulsi3>
    1df6:	dc 01       	movw	r26, r24
    1df8:	cb 01       	movw	r24, r22
    1dfa:	8f 87       	std	Y+15, r24	; 0x0f
    1dfc:	98 8b       	std	Y+16, r25	; 0x10
    1dfe:	a9 8b       	std	Y+17, r26	; 0x11
    1e00:	ba 8b       	std	Y+18, r27	; 0x12
    1e02:	21 c0       	rjmp	.+66     	; 0x1e46 <main+0x1fc>
						break;
					case '-':
						val = par[0] - par[1];
    1e04:	8d 89       	ldd	r24, Y+21	; 0x15
    1e06:	9e 89       	ldd	r25, Y+22	; 0x16
    1e08:	af 89       	ldd	r26, Y+23	; 0x17
    1e0a:	b8 8d       	ldd	r27, Y+24	; 0x18
    1e0c:	29 8d       	ldd	r18, Y+25	; 0x19
    1e0e:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1e10:	4b 8d       	ldd	r20, Y+27	; 0x1b
    1e12:	5c 8d       	ldd	r21, Y+28	; 0x1c
    1e14:	82 1b       	sub	r24, r18
    1e16:	93 0b       	sbc	r25, r19
    1e18:	a4 0b       	sbc	r26, r20
    1e1a:	b5 0b       	sbc	r27, r21
    1e1c:	8f 87       	std	Y+15, r24	; 0x0f
    1e1e:	98 8b       	std	Y+16, r25	; 0x10
    1e20:	a9 8b       	std	Y+17, r26	; 0x11
    1e22:	ba 8b       	std	Y+18, r27	; 0x12
    1e24:	10 c0       	rjmp	.+32     	; 0x1e46 <main+0x1fc>
						break;
					case'+':
						val = par[0] + par[1];
    1e26:	8d 89       	ldd	r24, Y+21	; 0x15
    1e28:	9e 89       	ldd	r25, Y+22	; 0x16
    1e2a:	af 89       	ldd	r26, Y+23	; 0x17
    1e2c:	b8 8d       	ldd	r27, Y+24	; 0x18
    1e2e:	29 8d       	ldd	r18, Y+25	; 0x19
    1e30:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1e32:	4b 8d       	ldd	r20, Y+27	; 0x1b
    1e34:	5c 8d       	ldd	r21, Y+28	; 0x1c
    1e36:	82 0f       	add	r24, r18
    1e38:	93 1f       	adc	r25, r19
    1e3a:	a4 1f       	adc	r26, r20
    1e3c:	b5 1f       	adc	r27, r21
    1e3e:	8f 87       	std	Y+15, r24	; 0x0f
    1e40:	98 8b       	std	Y+16, r25	; 0x10
    1e42:	a9 8b       	std	Y+17, r26	; 0x11
    1e44:	ba 8b       	std	Y+18, r27	; 0x12
						break;
				}
				par[0] = val;
    1e46:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e48:	98 89       	ldd	r25, Y+16	; 0x10
    1e4a:	a9 89       	ldd	r26, Y+17	; 0x11
    1e4c:	ba 89       	ldd	r27, Y+18	; 0x12
    1e4e:	8d 8b       	std	Y+21, r24	; 0x15
    1e50:	9e 8b       	std	Y+22, r25	; 0x16
    1e52:	af 8b       	std	Y+23, r26	; 0x17
    1e54:	b8 8f       	std	Y+24, r27	; 0x18
				par[1] = 0;
    1e56:	19 8e       	std	Y+25, r1	; 0x19
    1e58:	1a 8e       	std	Y+26, r1	; 0x1a
    1e5a:	1b 8e       	std	Y+27, r1	; 0x1b
    1e5c:	1c 8e       	std	Y+28, r1	; 0x1c
				idx=0;
    1e5e:	1e 86       	std	Y+14, r1	; 0x0e
				if(val<0){
    1e60:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e62:	98 89       	ldd	r25, Y+16	; 0x10
    1e64:	a9 89       	ldd	r26, Y+17	; 0x11
    1e66:	ba 89       	ldd	r27, Y+18	; 0x12
    1e68:	bb 23       	and	r27, r27
    1e6a:	94 f4       	brge	.+36     	; 0x1e90 <main+0x246>
					val=-1 * val;
    1e6c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e6e:	98 89       	ldd	r25, Y+16	; 0x10
    1e70:	a9 89       	ldd	r26, Y+17	; 0x11
    1e72:	ba 89       	ldd	r27, Y+18	; 0x12
    1e74:	b0 95       	com	r27
    1e76:	a0 95       	com	r26
    1e78:	90 95       	com	r25
    1e7a:	81 95       	neg	r24
    1e7c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e7e:	af 4f       	sbci	r26, 0xFF	; 255
    1e80:	bf 4f       	sbci	r27, 0xFF	; 255
    1e82:	8f 87       	std	Y+15, r24	; 0x0f
    1e84:	98 8b       	std	Y+16, r25	; 0x10
    1e86:	a9 8b       	std	Y+17, r26	; 0x11
    1e88:	ba 8b       	std	Y+18, r27	; 0x12
					LCD_VoidSendData('-');
    1e8a:	8d e2       	ldi	r24, 0x2D	; 45
    1e8c:	0e 94 89 09 	call	0x1312	; 0x1312 <LCD_VoidSendData>
				}
				if(val==0){LCD_VoidSendData('0');}
    1e90:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e92:	98 89       	ldd	r25, Y+16	; 0x10
    1e94:	a9 89       	ldd	r26, Y+17	; 0x11
    1e96:	ba 89       	ldd	r27, Y+18	; 0x12
    1e98:	00 97       	sbiw	r24, 0x00	; 0
    1e9a:	a1 05       	cpc	r26, r1
    1e9c:	b1 05       	cpc	r27, r1
    1e9e:	21 f4       	brne	.+8      	; 0x1ea8 <main+0x25e>
    1ea0:	80 e3       	ldi	r24, 0x30	; 48
    1ea2:	0e 94 89 09 	call	0x1312	; 0x1312 <LCD_VoidSendData>
    1ea6:	16 cf       	rjmp	.-468    	; 0x1cd4 <main+0x8a>
				else{
					s32 chk=val;
    1ea8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1eaa:	98 89       	ldd	r25, Y+16	; 0x10
    1eac:	a9 89       	ldd	r26, Y+17	; 0x11
    1eae:	ba 89       	ldd	r27, Y+18	; 0x12
    1eb0:	8b 83       	std	Y+3, r24	; 0x03
    1eb2:	9c 83       	std	Y+4, r25	; 0x04
    1eb4:	ad 83       	std	Y+5, r26	; 0x05
    1eb6:	be 83       	std	Y+6, r27	; 0x06
    1eb8:	15 c0       	rjmp	.+42     	; 0x1ee4 <main+0x29a>
					while(chk!=0 ){
						chk = chk /10;
    1eba:	8b 81       	ldd	r24, Y+3	; 0x03
    1ebc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ebe:	ad 81       	ldd	r26, Y+5	; 0x05
    1ec0:	be 81       	ldd	r27, Y+6	; 0x06
    1ec2:	2a e0       	ldi	r18, 0x0A	; 10
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	40 e0       	ldi	r20, 0x00	; 0
    1ec8:	50 e0       	ldi	r21, 0x00	; 0
    1eca:	bc 01       	movw	r22, r24
    1ecc:	cd 01       	movw	r24, r26
    1ece:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__divmodsi4>
    1ed2:	da 01       	movw	r26, r20
    1ed4:	c9 01       	movw	r24, r18
    1ed6:	8b 83       	std	Y+3, r24	; 0x03
    1ed8:	9c 83       	std	Y+4, r25	; 0x04
    1eda:	ad 83       	std	Y+5, r26	; 0x05
    1edc:	be 83       	std	Y+6, r27	; 0x06
						base++;
    1ede:	89 85       	ldd	r24, Y+9	; 0x09
    1ee0:	8f 5f       	subi	r24, 0xFF	; 255
    1ee2:	89 87       	std	Y+9, r24	; 0x09
					LCD_VoidSendData('-');
				}
				if(val==0){LCD_VoidSendData('0');}
				else{
					s32 chk=val;
					while(chk!=0 ){
    1ee4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ee8:	ad 81       	ldd	r26, Y+5	; 0x05
    1eea:	be 81       	ldd	r27, Y+6	; 0x06
    1eec:	00 97       	sbiw	r24, 0x00	; 0
    1eee:	a1 05       	cpc	r26, r1
    1ef0:	b1 05       	cpc	r27, r1
    1ef2:	19 f7       	brne	.-58     	; 0x1eba <main+0x270>
    1ef4:	8a c0       	rjmp	.+276    	; 0x200a <main+0x3c0>
						chk = chk /10;
						base++;
						}
					while(base!=0){
						s8 print = (val /power(10,base-1)) ;
    1ef6:	89 85       	ldd	r24, Y+9	; 0x09
    1ef8:	98 2f       	mov	r25, r24
    1efa:	91 50       	subi	r25, 0x01	; 1
    1efc:	8a e0       	ldi	r24, 0x0A	; 10
    1efe:	69 2f       	mov	r22, r25
    1f00:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <power>
    1f04:	9c 01       	movw	r18, r24
    1f06:	40 e0       	ldi	r20, 0x00	; 0
    1f08:	50 e0       	ldi	r21, 0x00	; 0
    1f0a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f0c:	98 89       	ldd	r25, Y+16	; 0x10
    1f0e:	a9 89       	ldd	r26, Y+17	; 0x11
    1f10:	ba 89       	ldd	r27, Y+18	; 0x12
    1f12:	bc 01       	movw	r22, r24
    1f14:	cd 01       	movw	r24, r26
    1f16:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__divmodsi4>
    1f1a:	da 01       	movw	r26, r20
    1f1c:	c9 01       	movw	r24, r18
    1f1e:	8a 83       	std	Y+2, r24	; 0x02
						LCD_VoidSendData(print+'0');
    1f20:	8a 81       	ldd	r24, Y+2	; 0x02
    1f22:	80 5d       	subi	r24, 0xD0	; 208
    1f24:	0e 94 89 09 	call	0x1312	; 0x1312 <LCD_VoidSendData>
						SvSeg_VoidDisplay(SvSeg_PORTD,print);
    1f28:	9a 81       	ldd	r25, Y+2	; 0x02
    1f2a:	83 e0       	ldi	r24, 0x03	; 3
    1f2c:	69 2f       	mov	r22, r25
    1f2e:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <SvSeg_VoidDisplay>
						val = val - print*(power(10,(base-1)));
    1f32:	8a 81       	ldd	r24, Y+2	; 0x02
    1f34:	08 2f       	mov	r16, r24
    1f36:	11 27       	eor	r17, r17
    1f38:	07 fd       	sbrc	r16, 7
    1f3a:	10 95       	com	r17
    1f3c:	89 85       	ldd	r24, Y+9	; 0x09
    1f3e:	98 2f       	mov	r25, r24
    1f40:	91 50       	subi	r25, 0x01	; 1
    1f42:	8a e0       	ldi	r24, 0x0A	; 10
    1f44:	69 2f       	mov	r22, r25
    1f46:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <power>
    1f4a:	ac 01       	movw	r20, r24
    1f4c:	04 9f       	mul	r16, r20
    1f4e:	c0 01       	movw	r24, r0
    1f50:	05 9f       	mul	r16, r21
    1f52:	90 0d       	add	r25, r0
    1f54:	14 9f       	mul	r17, r20
    1f56:	90 0d       	add	r25, r0
    1f58:	11 24       	eor	r1, r1
    1f5a:	9c 01       	movw	r18, r24
    1f5c:	40 e0       	ldi	r20, 0x00	; 0
    1f5e:	50 e0       	ldi	r21, 0x00	; 0
    1f60:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f62:	98 89       	ldd	r25, Y+16	; 0x10
    1f64:	a9 89       	ldd	r26, Y+17	; 0x11
    1f66:	ba 89       	ldd	r27, Y+18	; 0x12
    1f68:	82 1b       	sub	r24, r18
    1f6a:	93 0b       	sbc	r25, r19
    1f6c:	a4 0b       	sbc	r26, r20
    1f6e:	b5 0b       	sbc	r27, r21
    1f70:	8f 87       	std	Y+15, r24	; 0x0f
    1f72:	98 8b       	std	Y+16, r25	; 0x10
    1f74:	a9 8b       	std	Y+17, r26	; 0x11
    1f76:	ba 8b       	std	Y+18, r27	; 0x12
    1f78:	2e c0       	rjmp	.+92     	; 0x1fd6 <main+0x38c>
						while(base-nextCHK>=0){
							if((val/power(10,base-nextCHK))==0){
    1f7a:	99 85       	ldd	r25, Y+9	; 0x09
    1f7c:	8f 81       	ldd	r24, Y+7	; 0x07
    1f7e:	98 1b       	sub	r25, r24
    1f80:	8a e0       	ldi	r24, 0x0A	; 10
    1f82:	69 2f       	mov	r22, r25
    1f84:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <power>
    1f88:	9c 01       	movw	r18, r24
    1f8a:	40 e0       	ldi	r20, 0x00	; 0
    1f8c:	50 e0       	ldi	r21, 0x00	; 0
    1f8e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f90:	98 89       	ldd	r25, Y+16	; 0x10
    1f92:	a9 89       	ldd	r26, Y+17	; 0x11
    1f94:	ba 89       	ldd	r27, Y+18	; 0x12
    1f96:	bc 01       	movw	r22, r24
    1f98:	cd 01       	movw	r24, r26
    1f9a:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__divmodsi4>
    1f9e:	da 01       	movw	r26, r20
    1fa0:	c9 01       	movw	r24, r18
    1fa2:	00 97       	sbiw	r24, 0x00	; 0
    1fa4:	a1 05       	cpc	r26, r1
    1fa6:	b1 05       	cpc	r27, r1
    1fa8:	11 f5       	brne	.+68     	; 0x1fee <main+0x3a4>
								if(div==1&&base==3){LCD_VoidSendData('.');}
    1faa:	88 85       	ldd	r24, Y+8	; 0x08
    1fac:	81 30       	cpi	r24, 0x01	; 1
    1fae:	31 f4       	brne	.+12     	; 0x1fbc <main+0x372>
    1fb0:	89 85       	ldd	r24, Y+9	; 0x09
    1fb2:	83 30       	cpi	r24, 0x03	; 3
    1fb4:	19 f4       	brne	.+6      	; 0x1fbc <main+0x372>
    1fb6:	8e e2       	ldi	r24, 0x2E	; 46
    1fb8:	0e 94 89 09 	call	0x1312	; 0x1312 <LCD_VoidSendData>
								nextCHK++;
    1fbc:	8f 81       	ldd	r24, Y+7	; 0x07
    1fbe:	8f 5f       	subi	r24, 0xFF	; 255
    1fc0:	8f 83       	std	Y+7, r24	; 0x07
								base--;
    1fc2:	89 85       	ldd	r24, Y+9	; 0x09
    1fc4:	81 50       	subi	r24, 0x01	; 1
    1fc6:	89 87       	std	Y+9, r24	; 0x09
								LCD_VoidSendData('0');
    1fc8:	80 e3       	ldi	r24, 0x30	; 48
    1fca:	0e 94 89 09 	call	0x1312	; 0x1312 <LCD_VoidSendData>
								SvSeg_VoidDisplay(SvSeg_PORTD,0);
    1fce:	83 e0       	ldi	r24, 0x03	; 3
    1fd0:	60 e0       	ldi	r22, 0x00	; 0
    1fd2:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <SvSeg_VoidDisplay>
					while(base!=0){
						s8 print = (val /power(10,base-1)) ;
						LCD_VoidSendData(print+'0');
						SvSeg_VoidDisplay(SvSeg_PORTD,print);
						val = val - print*(power(10,(base-1)));
						while(base-nextCHK>=0){
    1fd6:	89 85       	ldd	r24, Y+9	; 0x09
    1fd8:	28 2f       	mov	r18, r24
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	8f 81       	ldd	r24, Y+7	; 0x07
    1fde:	88 2f       	mov	r24, r24
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	f9 01       	movw	r30, r18
    1fe4:	e8 1b       	sub	r30, r24
    1fe6:	f9 0b       	sbc	r31, r25
    1fe8:	cf 01       	movw	r24, r30
    1fea:	99 23       	and	r25, r25
    1fec:	34 f6       	brge	.-116    	; 0x1f7a <main+0x330>
								LCD_VoidSendData('0');
								SvSeg_VoidDisplay(SvSeg_PORTD,0);
						}else
							break;
						}
						if(div==1&&base==3){LCD_VoidSendData('.');}
    1fee:	88 85       	ldd	r24, Y+8	; 0x08
    1ff0:	81 30       	cpi	r24, 0x01	; 1
    1ff2:	31 f4       	brne	.+12     	; 0x2000 <main+0x3b6>
    1ff4:	89 85       	ldd	r24, Y+9	; 0x09
    1ff6:	83 30       	cpi	r24, 0x03	; 3
    1ff8:	19 f4       	brne	.+6      	; 0x2000 <main+0x3b6>
    1ffa:	8e e2       	ldi	r24, 0x2E	; 46
    1ffc:	0e 94 89 09 	call	0x1312	; 0x1312 <LCD_VoidSendData>
						base--;
    2000:	89 85       	ldd	r24, Y+9	; 0x09
    2002:	81 50       	subi	r24, 0x01	; 1
    2004:	89 87       	std	Y+9, r24	; 0x09
						nextCHK=2;
    2006:	82 e0       	ldi	r24, 0x02	; 2
    2008:	8f 83       	std	Y+7, r24	; 0x07
					s32 chk=val;
					while(chk!=0 ){
						chk = chk /10;
						base++;
						}
					while(base!=0){
    200a:	89 85       	ldd	r24, Y+9	; 0x09
    200c:	88 23       	and	r24, r24
    200e:	09 f0       	breq	.+2      	; 0x2012 <main+0x3c8>
    2010:	72 cf       	rjmp	.-284    	; 0x1ef6 <main+0x2ac>
    2012:	60 ce       	rjmp	.-832    	; 0x1cd4 <main+0x8a>
						base--;
						nextCHK=2;
							}
					}
			}
			else if(num=='-'){
    2014:	8b 85       	ldd	r24, Y+11	; 0x0b
    2016:	8d 32       	cpi	r24, 0x2D	; 45
    2018:	b9 f5       	brne	.+110    	; 0x2088 <main+0x43e>
				 ascii = num;
    201a:	8b 85       	ldd	r24, Y+11	; 0x0b
    201c:	8c 8b       	std	Y+20, r24	; 0x14
				 LCD_VoidSendData(ascii);
    201e:	8c 89       	ldd	r24, Y+20	; 0x14
    2020:	0e 94 89 09 	call	0x1312	; 0x1312 <LCD_VoidSendData>
				if(par[idx]==0){
    2024:	8e 85       	ldd	r24, Y+14	; 0x0e
    2026:	88 2f       	mov	r24, r24
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	9c 01       	movw	r18, r24
    202c:	22 0f       	add	r18, r18
    202e:	33 1f       	adc	r19, r19
    2030:	22 0f       	add	r18, r18
    2032:	33 1f       	adc	r19, r19
    2034:	ce 01       	movw	r24, r28
    2036:	01 96       	adiw	r24, 0x01	; 1
    2038:	82 0f       	add	r24, r18
    203a:	93 1f       	adc	r25, r19
    203c:	fc 01       	movw	r30, r24
    203e:	74 96       	adiw	r30, 0x14	; 20
    2040:	80 81       	ld	r24, Z
    2042:	91 81       	ldd	r25, Z+1	; 0x01
    2044:	a2 81       	ldd	r26, Z+2	; 0x02
    2046:	b3 81       	ldd	r27, Z+3	; 0x03
    2048:	00 97       	sbiw	r24, 0x00	; 0
    204a:	a1 05       	cpc	r26, r1
    204c:	b1 05       	cpc	r27, r1
    204e:	19 f4       	brne	.+6      	; 0x2056 <main+0x40c>
					sign=1;
    2050:	81 e0       	ldi	r24, 0x01	; 1
    2052:	8d 87       	std	Y+13, r24	; 0x0d
    2054:	3f ce       	rjmp	.-898    	; 0x1cd4 <main+0x8a>
				}
				else{
					if(sign==1){
    2056:	8d 85       	ldd	r24, Y+13	; 0x0d
    2058:	81 30       	cpi	r24, 0x01	; 1
    205a:	81 f4       	brne	.+32     	; 0x207c <main+0x432>
						par[0] = -1*par[0];
    205c:	8d 89       	ldd	r24, Y+21	; 0x15
    205e:	9e 89       	ldd	r25, Y+22	; 0x16
    2060:	af 89       	ldd	r26, Y+23	; 0x17
    2062:	b8 8d       	ldd	r27, Y+24	; 0x18
    2064:	b0 95       	com	r27
    2066:	a0 95       	com	r26
    2068:	90 95       	com	r25
    206a:	81 95       	neg	r24
    206c:	9f 4f       	sbci	r25, 0xFF	; 255
    206e:	af 4f       	sbci	r26, 0xFF	; 255
    2070:	bf 4f       	sbci	r27, 0xFF	; 255
    2072:	8d 8b       	std	Y+21, r24	; 0x15
    2074:	9e 8b       	std	Y+22, r25	; 0x16
    2076:	af 8b       	std	Y+23, r26	; 0x17
    2078:	b8 8f       	std	Y+24, r27	; 0x18
						sign=0;
    207a:	1d 86       	std	Y+13, r1	; 0x0d
						}
					idx++;
    207c:	8e 85       	ldd	r24, Y+14	; 0x0e
    207e:	8f 5f       	subi	r24, 0xFF	; 255
    2080:	8e 87       	std	Y+14, r24	; 0x0e
					str=num;
    2082:	8b 85       	ldd	r24, Y+11	; 0x0b
    2084:	8c 87       	std	Y+12, r24	; 0x0c
    2086:	26 ce       	rjmp	.-948    	; 0x1cd4 <main+0x8a>
					}
			}
			else if(num=='/' || num=='*' || num=='+'){
    2088:	8b 85       	ldd	r24, Y+11	; 0x0b
    208a:	8f 32       	cpi	r24, 0x2F	; 47
    208c:	39 f0       	breq	.+14     	; 0x209c <main+0x452>
    208e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2090:	8a 32       	cpi	r24, 0x2A	; 42
    2092:	21 f0       	breq	.+8      	; 0x209c <main+0x452>
    2094:	8b 85       	ldd	r24, Y+11	; 0x0b
    2096:	8b 32       	cpi	r24, 0x2B	; 43
    2098:	09 f0       	breq	.+2      	; 0x209c <main+0x452>
    209a:	4a c0       	rjmp	.+148    	; 0x2130 <main+0x4e6>
				 str=num;
    209c:	8b 85       	ldd	r24, Y+11	; 0x0b
    209e:	8c 87       	std	Y+12, r24	; 0x0c
				 ascii = num;
    20a0:	8b 85       	ldd	r24, Y+11	; 0x0b
    20a2:	8c 8b       	std	Y+20, r24	; 0x14
				 LCD_VoidSendData(ascii);
    20a4:	8c 89       	ldd	r24, Y+20	; 0x14
    20a6:	0e 94 89 09 	call	0x1312	; 0x1312 <LCD_VoidSendData>
				 if(sign==1){
    20aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    20ac:	81 30       	cpi	r24, 0x01	; 1
    20ae:	81 f4       	brne	.+32     	; 0x20d0 <main+0x486>
					par[0] = -1*par[0];
    20b0:	8d 89       	ldd	r24, Y+21	; 0x15
    20b2:	9e 89       	ldd	r25, Y+22	; 0x16
    20b4:	af 89       	ldd	r26, Y+23	; 0x17
    20b6:	b8 8d       	ldd	r27, Y+24	; 0x18
    20b8:	b0 95       	com	r27
    20ba:	a0 95       	com	r26
    20bc:	90 95       	com	r25
    20be:	81 95       	neg	r24
    20c0:	9f 4f       	sbci	r25, 0xFF	; 255
    20c2:	af 4f       	sbci	r26, 0xFF	; 255
    20c4:	bf 4f       	sbci	r27, 0xFF	; 255
    20c6:	8d 8b       	std	Y+21, r24	; 0x15
    20c8:	9e 8b       	std	Y+22, r25	; 0x16
    20ca:	af 8b       	std	Y+23, r26	; 0x17
    20cc:	b8 8f       	std	Y+24, r27	; 0x18
					sign=0;
    20ce:	1d 86       	std	Y+13, r1	; 0x0d
					}
				 idx++;
    20d0:	8e 85       	ldd	r24, Y+14	; 0x0e
    20d2:	8f 5f       	subi	r24, 0xFF	; 255
    20d4:	8e 87       	std	Y+14, r24	; 0x0e
				 if(idx>(size-1)){
    20d6:	8e 85       	ldd	r24, Y+14	; 0x0e
    20d8:	28 2f       	mov	r18, r24
    20da:	30 e0       	ldi	r19, 0x00	; 0
    20dc:	8b 89       	ldd	r24, Y+19	; 0x13
    20de:	88 2f       	mov	r24, r24
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	01 97       	sbiw	r24, 0x01	; 1
    20e4:	82 17       	cp	r24, r18
    20e6:	93 07       	cpc	r25, r19
    20e8:	0c f0       	brlt	.+2      	; 0x20ec <main+0x4a2>
    20ea:	f4 cd       	rjmp	.-1048   	; 0x1cd4 <main+0x8a>
					 LCD_VoidClearDisplay();
    20ec:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <LCD_VoidClearDisplay>
					 LCD_voidSendString("Syntax Error");
    20f0:	80 e6       	ldi	r24, 0x60	; 96
    20f2:	90 e0       	ldi	r25, 0x00	; 0
    20f4:	0e 94 a6 0b 	call	0x174c	; 0x174c <LCD_voidSendString>
					 for(u8 i=0;i<size;i++){
    20f8:	19 82       	std	Y+1, r1	; 0x01
    20fa:	15 c0       	rjmp	.+42     	; 0x2126 <main+0x4dc>
						 par[i]=0;
    20fc:	89 81       	ldd	r24, Y+1	; 0x01
    20fe:	88 2f       	mov	r24, r24
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	9c 01       	movw	r18, r24
    2104:	22 0f       	add	r18, r18
    2106:	33 1f       	adc	r19, r19
    2108:	22 0f       	add	r18, r18
    210a:	33 1f       	adc	r19, r19
    210c:	ce 01       	movw	r24, r28
    210e:	01 96       	adiw	r24, 0x01	; 1
    2110:	82 0f       	add	r24, r18
    2112:	93 1f       	adc	r25, r19
    2114:	fc 01       	movw	r30, r24
    2116:	74 96       	adiw	r30, 0x14	; 20
    2118:	10 82       	st	Z, r1
    211a:	11 82       	std	Z+1, r1	; 0x01
    211c:	12 82       	std	Z+2, r1	; 0x02
    211e:	13 82       	std	Z+3, r1	; 0x03
					}
				 idx++;
				 if(idx>(size-1)){
					 LCD_VoidClearDisplay();
					 LCD_voidSendString("Syntax Error");
					 for(u8 i=0;i<size;i++){
    2120:	89 81       	ldd	r24, Y+1	; 0x01
    2122:	8f 5f       	subi	r24, 0xFF	; 255
    2124:	89 83       	std	Y+1, r24	; 0x01
    2126:	99 81       	ldd	r25, Y+1	; 0x01
    2128:	8b 89       	ldd	r24, Y+19	; 0x13
    212a:	98 17       	cp	r25, r24
    212c:	38 f3       	brcs	.-50     	; 0x20fc <main+0x4b2>
    212e:	d2 cd       	rjmp	.-1116   	; 0x1cd4 <main+0x8a>
						 par[i]=0;
					 }
				 }
			}
			else{
				ascii = num + '0';
    2130:	8b 85       	ldd	r24, Y+11	; 0x0b
    2132:	80 5d       	subi	r24, 0xD0	; 208
    2134:	8c 8b       	std	Y+20, r24	; 0x14
				LCD_VoidSendData(ascii);
    2136:	8c 89       	ldd	r24, Y+20	; 0x14
    2138:	0e 94 89 09 	call	0x1312	; 0x1312 <LCD_VoidSendData>
				par[idx] = num + par[idx]*10;
    213c:	8e 85       	ldd	r24, Y+14	; 0x0e
    213e:	c8 2e       	mov	r12, r24
    2140:	dd 24       	eor	r13, r13
    2142:	8b 85       	ldd	r24, Y+11	; 0x0b
    2144:	e8 2e       	mov	r14, r24
    2146:	ff 24       	eor	r15, r15
    2148:	00 e0       	ldi	r16, 0x00	; 0
    214a:	10 e0       	ldi	r17, 0x00	; 0
    214c:	8e 85       	ldd	r24, Y+14	; 0x0e
    214e:	88 2f       	mov	r24, r24
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	9c 01       	movw	r18, r24
    2154:	22 0f       	add	r18, r18
    2156:	33 1f       	adc	r19, r19
    2158:	22 0f       	add	r18, r18
    215a:	33 1f       	adc	r19, r19
    215c:	ce 01       	movw	r24, r28
    215e:	01 96       	adiw	r24, 0x01	; 1
    2160:	82 0f       	add	r24, r18
    2162:	93 1f       	adc	r25, r19
    2164:	fc 01       	movw	r30, r24
    2166:	74 96       	adiw	r30, 0x14	; 20
    2168:	80 81       	ld	r24, Z
    216a:	91 81       	ldd	r25, Z+1	; 0x01
    216c:	a2 81       	ldd	r26, Z+2	; 0x02
    216e:	b3 81       	ldd	r27, Z+3	; 0x03
    2170:	2a e0       	ldi	r18, 0x0A	; 10
    2172:	30 e0       	ldi	r19, 0x00	; 0
    2174:	40 e0       	ldi	r20, 0x00	; 0
    2176:	50 e0       	ldi	r21, 0x00	; 0
    2178:	bc 01       	movw	r22, r24
    217a:	cd 01       	movw	r24, r26
    217c:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <__mulsi3>
    2180:	dc 01       	movw	r26, r24
    2182:	cb 01       	movw	r24, r22
    2184:	b8 01       	movw	r22, r16
    2186:	a7 01       	movw	r20, r14
    2188:	48 0f       	add	r20, r24
    218a:	59 1f       	adc	r21, r25
    218c:	6a 1f       	adc	r22, r26
    218e:	7b 1f       	adc	r23, r27
    2190:	96 01       	movw	r18, r12
    2192:	22 0f       	add	r18, r18
    2194:	33 1f       	adc	r19, r19
    2196:	22 0f       	add	r18, r18
    2198:	33 1f       	adc	r19, r19
    219a:	ce 01       	movw	r24, r28
    219c:	01 96       	adiw	r24, 0x01	; 1
    219e:	82 0f       	add	r24, r18
    21a0:	93 1f       	adc	r25, r19
    21a2:	fc 01       	movw	r30, r24
    21a4:	74 96       	adiw	r30, 0x14	; 20
    21a6:	40 83       	st	Z, r20
    21a8:	51 83       	std	Z+1, r21	; 0x01
    21aa:	62 83       	std	Z+2, r22	; 0x02
    21ac:	73 83       	std	Z+3, r23	; 0x03
    21ae:	92 cd       	rjmp	.-1244   	; 0x1cd4 <main+0x8a>

000021b0 <__mulsi3>:
    21b0:	62 9f       	mul	r22, r18
    21b2:	d0 01       	movw	r26, r0
    21b4:	73 9f       	mul	r23, r19
    21b6:	f0 01       	movw	r30, r0
    21b8:	82 9f       	mul	r24, r18
    21ba:	e0 0d       	add	r30, r0
    21bc:	f1 1d       	adc	r31, r1
    21be:	64 9f       	mul	r22, r20
    21c0:	e0 0d       	add	r30, r0
    21c2:	f1 1d       	adc	r31, r1
    21c4:	92 9f       	mul	r25, r18
    21c6:	f0 0d       	add	r31, r0
    21c8:	83 9f       	mul	r24, r19
    21ca:	f0 0d       	add	r31, r0
    21cc:	74 9f       	mul	r23, r20
    21ce:	f0 0d       	add	r31, r0
    21d0:	65 9f       	mul	r22, r21
    21d2:	f0 0d       	add	r31, r0
    21d4:	99 27       	eor	r25, r25
    21d6:	72 9f       	mul	r23, r18
    21d8:	b0 0d       	add	r27, r0
    21da:	e1 1d       	adc	r30, r1
    21dc:	f9 1f       	adc	r31, r25
    21de:	63 9f       	mul	r22, r19
    21e0:	b0 0d       	add	r27, r0
    21e2:	e1 1d       	adc	r30, r1
    21e4:	f9 1f       	adc	r31, r25
    21e6:	bd 01       	movw	r22, r26
    21e8:	cf 01       	movw	r24, r30
    21ea:	11 24       	eor	r1, r1
    21ec:	08 95       	ret

000021ee <__divmodsi4>:
    21ee:	97 fb       	bst	r25, 7
    21f0:	09 2e       	mov	r0, r25
    21f2:	05 26       	eor	r0, r21
    21f4:	0e d0       	rcall	.+28     	; 0x2212 <__divmodsi4_neg1>
    21f6:	57 fd       	sbrc	r21, 7
    21f8:	04 d0       	rcall	.+8      	; 0x2202 <__divmodsi4_neg2>
    21fa:	14 d0       	rcall	.+40     	; 0x2224 <__udivmodsi4>
    21fc:	0a d0       	rcall	.+20     	; 0x2212 <__divmodsi4_neg1>
    21fe:	00 1c       	adc	r0, r0
    2200:	38 f4       	brcc	.+14     	; 0x2210 <__divmodsi4_exit>

00002202 <__divmodsi4_neg2>:
    2202:	50 95       	com	r21
    2204:	40 95       	com	r20
    2206:	30 95       	com	r19
    2208:	21 95       	neg	r18
    220a:	3f 4f       	sbci	r19, 0xFF	; 255
    220c:	4f 4f       	sbci	r20, 0xFF	; 255
    220e:	5f 4f       	sbci	r21, 0xFF	; 255

00002210 <__divmodsi4_exit>:
    2210:	08 95       	ret

00002212 <__divmodsi4_neg1>:
    2212:	f6 f7       	brtc	.-4      	; 0x2210 <__divmodsi4_exit>
    2214:	90 95       	com	r25
    2216:	80 95       	com	r24
    2218:	70 95       	com	r23
    221a:	61 95       	neg	r22
    221c:	7f 4f       	sbci	r23, 0xFF	; 255
    221e:	8f 4f       	sbci	r24, 0xFF	; 255
    2220:	9f 4f       	sbci	r25, 0xFF	; 255
    2222:	08 95       	ret

00002224 <__udivmodsi4>:
    2224:	a1 e2       	ldi	r26, 0x21	; 33
    2226:	1a 2e       	mov	r1, r26
    2228:	aa 1b       	sub	r26, r26
    222a:	bb 1b       	sub	r27, r27
    222c:	fd 01       	movw	r30, r26
    222e:	0d c0       	rjmp	.+26     	; 0x224a <__udivmodsi4_ep>

00002230 <__udivmodsi4_loop>:
    2230:	aa 1f       	adc	r26, r26
    2232:	bb 1f       	adc	r27, r27
    2234:	ee 1f       	adc	r30, r30
    2236:	ff 1f       	adc	r31, r31
    2238:	a2 17       	cp	r26, r18
    223a:	b3 07       	cpc	r27, r19
    223c:	e4 07       	cpc	r30, r20
    223e:	f5 07       	cpc	r31, r21
    2240:	20 f0       	brcs	.+8      	; 0x224a <__udivmodsi4_ep>
    2242:	a2 1b       	sub	r26, r18
    2244:	b3 0b       	sbc	r27, r19
    2246:	e4 0b       	sbc	r30, r20
    2248:	f5 0b       	sbc	r31, r21

0000224a <__udivmodsi4_ep>:
    224a:	66 1f       	adc	r22, r22
    224c:	77 1f       	adc	r23, r23
    224e:	88 1f       	adc	r24, r24
    2250:	99 1f       	adc	r25, r25
    2252:	1a 94       	dec	r1
    2254:	69 f7       	brne	.-38     	; 0x2230 <__udivmodsi4_loop>
    2256:	60 95       	com	r22
    2258:	70 95       	com	r23
    225a:	80 95       	com	r24
    225c:	90 95       	com	r25
    225e:	9b 01       	movw	r18, r22
    2260:	ac 01       	movw	r20, r24
    2262:	bd 01       	movw	r22, r26
    2264:	cf 01       	movw	r24, r30
    2266:	08 95       	ret

00002268 <__prologue_saves__>:
    2268:	2f 92       	push	r2
    226a:	3f 92       	push	r3
    226c:	4f 92       	push	r4
    226e:	5f 92       	push	r5
    2270:	6f 92       	push	r6
    2272:	7f 92       	push	r7
    2274:	8f 92       	push	r8
    2276:	9f 92       	push	r9
    2278:	af 92       	push	r10
    227a:	bf 92       	push	r11
    227c:	cf 92       	push	r12
    227e:	df 92       	push	r13
    2280:	ef 92       	push	r14
    2282:	ff 92       	push	r15
    2284:	0f 93       	push	r16
    2286:	1f 93       	push	r17
    2288:	cf 93       	push	r28
    228a:	df 93       	push	r29
    228c:	cd b7       	in	r28, 0x3d	; 61
    228e:	de b7       	in	r29, 0x3e	; 62
    2290:	ca 1b       	sub	r28, r26
    2292:	db 0b       	sbc	r29, r27
    2294:	0f b6       	in	r0, 0x3f	; 63
    2296:	f8 94       	cli
    2298:	de bf       	out	0x3e, r29	; 62
    229a:	0f be       	out	0x3f, r0	; 63
    229c:	cd bf       	out	0x3d, r28	; 61
    229e:	09 94       	ijmp

000022a0 <__epilogue_restores__>:
    22a0:	2a 88       	ldd	r2, Y+18	; 0x12
    22a2:	39 88       	ldd	r3, Y+17	; 0x11
    22a4:	48 88       	ldd	r4, Y+16	; 0x10
    22a6:	5f 84       	ldd	r5, Y+15	; 0x0f
    22a8:	6e 84       	ldd	r6, Y+14	; 0x0e
    22aa:	7d 84       	ldd	r7, Y+13	; 0x0d
    22ac:	8c 84       	ldd	r8, Y+12	; 0x0c
    22ae:	9b 84       	ldd	r9, Y+11	; 0x0b
    22b0:	aa 84       	ldd	r10, Y+10	; 0x0a
    22b2:	b9 84       	ldd	r11, Y+9	; 0x09
    22b4:	c8 84       	ldd	r12, Y+8	; 0x08
    22b6:	df 80       	ldd	r13, Y+7	; 0x07
    22b8:	ee 80       	ldd	r14, Y+6	; 0x06
    22ba:	fd 80       	ldd	r15, Y+5	; 0x05
    22bc:	0c 81       	ldd	r16, Y+4	; 0x04
    22be:	1b 81       	ldd	r17, Y+3	; 0x03
    22c0:	aa 81       	ldd	r26, Y+2	; 0x02
    22c2:	b9 81       	ldd	r27, Y+1	; 0x01
    22c4:	ce 0f       	add	r28, r30
    22c6:	d1 1d       	adc	r29, r1
    22c8:	0f b6       	in	r0, 0x3f	; 63
    22ca:	f8 94       	cli
    22cc:	de bf       	out	0x3e, r29	; 62
    22ce:	0f be       	out	0x3f, r0	; 63
    22d0:	cd bf       	out	0x3d, r28	; 61
    22d2:	ed 01       	movw	r28, r26
    22d4:	08 95       	ret

000022d6 <itoa>:
    22d6:	fb 01       	movw	r30, r22
    22d8:	9f 01       	movw	r18, r30
    22da:	e8 94       	clt
    22dc:	42 30       	cpi	r20, 0x02	; 2
    22de:	c4 f0       	brlt	.+48     	; 0x2310 <itoa+0x3a>
    22e0:	45 32       	cpi	r20, 0x25	; 37
    22e2:	b4 f4       	brge	.+44     	; 0x2310 <itoa+0x3a>
    22e4:	4a 30       	cpi	r20, 0x0A	; 10
    22e6:	29 f4       	brne	.+10     	; 0x22f2 <itoa+0x1c>
    22e8:	97 fb       	bst	r25, 7
    22ea:	1e f4       	brtc	.+6      	; 0x22f2 <itoa+0x1c>
    22ec:	90 95       	com	r25
    22ee:	81 95       	neg	r24
    22f0:	9f 4f       	sbci	r25, 0xFF	; 255
    22f2:	64 2f       	mov	r22, r20
    22f4:	77 27       	eor	r23, r23
    22f6:	0e 94 9c 11 	call	0x2338	; 0x2338 <__udivmodhi4>
    22fa:	80 5d       	subi	r24, 0xD0	; 208
    22fc:	8a 33       	cpi	r24, 0x3A	; 58
    22fe:	0c f0       	brlt	.+2      	; 0x2302 <itoa+0x2c>
    2300:	89 5d       	subi	r24, 0xD9	; 217
    2302:	81 93       	st	Z+, r24
    2304:	cb 01       	movw	r24, r22
    2306:	00 97       	sbiw	r24, 0x00	; 0
    2308:	a1 f7       	brne	.-24     	; 0x22f2 <itoa+0x1c>
    230a:	16 f4       	brtc	.+4      	; 0x2310 <itoa+0x3a>
    230c:	5d e2       	ldi	r21, 0x2D	; 45
    230e:	51 93       	st	Z+, r21
    2310:	10 82       	st	Z, r1
    2312:	c9 01       	movw	r24, r18
    2314:	0c 94 8c 11 	jmp	0x2318	; 0x2318 <strrev>

00002318 <strrev>:
    2318:	dc 01       	movw	r26, r24
    231a:	fc 01       	movw	r30, r24
    231c:	67 2f       	mov	r22, r23
    231e:	71 91       	ld	r23, Z+
    2320:	77 23       	and	r23, r23
    2322:	e1 f7       	brne	.-8      	; 0x231c <strrev+0x4>
    2324:	32 97       	sbiw	r30, 0x02	; 2
    2326:	04 c0       	rjmp	.+8      	; 0x2330 <strrev+0x18>
    2328:	7c 91       	ld	r23, X
    232a:	6d 93       	st	X+, r22
    232c:	70 83       	st	Z, r23
    232e:	62 91       	ld	r22, -Z
    2330:	ae 17       	cp	r26, r30
    2332:	bf 07       	cpc	r27, r31
    2334:	c8 f3       	brcs	.-14     	; 0x2328 <strrev+0x10>
    2336:	08 95       	ret

00002338 <__udivmodhi4>:
    2338:	aa 1b       	sub	r26, r26
    233a:	bb 1b       	sub	r27, r27
    233c:	51 e1       	ldi	r21, 0x11	; 17
    233e:	07 c0       	rjmp	.+14     	; 0x234e <__udivmodhi4_ep>

00002340 <__udivmodhi4_loop>:
    2340:	aa 1f       	adc	r26, r26
    2342:	bb 1f       	adc	r27, r27
    2344:	a6 17       	cp	r26, r22
    2346:	b7 07       	cpc	r27, r23
    2348:	10 f0       	brcs	.+4      	; 0x234e <__udivmodhi4_ep>
    234a:	a6 1b       	sub	r26, r22
    234c:	b7 0b       	sbc	r27, r23

0000234e <__udivmodhi4_ep>:
    234e:	88 1f       	adc	r24, r24
    2350:	99 1f       	adc	r25, r25
    2352:	5a 95       	dec	r21
    2354:	a9 f7       	brne	.-22     	; 0x2340 <__udivmodhi4_loop>
    2356:	80 95       	com	r24
    2358:	90 95       	com	r25
    235a:	bc 01       	movw	r22, r24
    235c:	cd 01       	movw	r24, r26
    235e:	08 95       	ret

00002360 <_exit>:
    2360:	f8 94       	cli

00002362 <__stop_program>:
    2362:	ff cf       	rjmp	.-2      	; 0x2362 <__stop_program>
