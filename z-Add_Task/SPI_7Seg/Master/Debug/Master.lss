
Lec12_LayeredStructure.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002bac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000122  00800060  00002bac  00002c40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800182  00800182  00002d62  2**0
                  ALLOC
  3 .stab         00003564  00000000  00000000  00002d64  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001b08  00000000  00000000  000062c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00007dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d1  00000000  00000000  00007f50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002010  00000000  00000000  00008121  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001161  00000000  00000000  0000a131  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001003  00000000  00000000  0000b292  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000c298  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002be  00000000  00000000  0000c438  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000090e  00000000  00000000  0000c6f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d004  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 20 0c 	jmp	0x1840	; 0x1840 <__vector_1>
       8:	0c 94 53 0c 	jmp	0x18a6	; 0x18a6 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 79 0a 	jmp	0x14f2	; 0x14f2 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 46 0a 	jmp	0x148c	; 0x148c <__vector_10>
      2c:	0c 94 13 0a 	jmp	0x1426	; 0x1426 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ea       	ldi	r30, 0xAC	; 172
      68:	fb e2       	ldi	r31, 0x2B	; 43
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 38       	cpi	r26, 0x82	; 130
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e8       	ldi	r26, 0x82	; 130
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 39       	cpi	r26, 0x92	; 146
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <main>
      8a:	0c 94 d4 15 	jmp	0x2ba8	; 0x2ba8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 58 15 	jmp	0x2ab0	; 0x2ab0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 74 15 	jmp	0x2ae8	; 0x2ae8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 64 15 	jmp	0x2ac8	; 0x2ac8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 80 15 	jmp	0x2b00	; 0x2b00 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 64 15 	jmp	0x2ac8	; 0x2ac8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 80 15 	jmp	0x2b00	; 0x2b00 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 58 15 	jmp	0x2ab0	; 0x2ab0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 74 15 	jmp	0x2ae8	; 0x2ae8 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 64 15 	jmp	0x2ac8	; 0x2ac8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 80 15 	jmp	0x2b00	; 0x2b00 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 64 15 	jmp	0x2ac8	; 0x2ac8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 80 15 	jmp	0x2b00	; 0x2b00 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 64 15 	jmp	0x2ac8	; 0x2ac8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 80 15 	jmp	0x2b00	; 0x2b00 <__epilogue_restores__+0x18>

00000752 <__floatsisf>:
     752:	a8 e0       	ldi	r26, 0x08	; 8
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 61 15 	jmp	0x2ac2	; 0x2ac2 <__prologue_saves__+0x12>
     75e:	9b 01       	movw	r18, r22
     760:	ac 01       	movw	r20, r24
     762:	83 e0       	ldi	r24, 0x03	; 3
     764:	89 83       	std	Y+1, r24	; 0x01
     766:	da 01       	movw	r26, r20
     768:	c9 01       	movw	r24, r18
     76a:	88 27       	eor	r24, r24
     76c:	b7 fd       	sbrc	r27, 7
     76e:	83 95       	inc	r24
     770:	99 27       	eor	r25, r25
     772:	aa 27       	eor	r26, r26
     774:	bb 27       	eor	r27, r27
     776:	b8 2e       	mov	r11, r24
     778:	21 15       	cp	r18, r1
     77a:	31 05       	cpc	r19, r1
     77c:	41 05       	cpc	r20, r1
     77e:	51 05       	cpc	r21, r1
     780:	19 f4       	brne	.+6      	; 0x788 <__floatsisf+0x36>
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	89 83       	std	Y+1, r24	; 0x01
     786:	3a c0       	rjmp	.+116    	; 0x7fc <__floatsisf+0xaa>
     788:	88 23       	and	r24, r24
     78a:	a9 f0       	breq	.+42     	; 0x7b6 <__floatsisf+0x64>
     78c:	20 30       	cpi	r18, 0x00	; 0
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	38 07       	cpc	r19, r24
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	48 07       	cpc	r20, r24
     796:	80 e8       	ldi	r24, 0x80	; 128
     798:	58 07       	cpc	r21, r24
     79a:	29 f4       	brne	.+10     	; 0x7a6 <__floatsisf+0x54>
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	9f ec       	ldi	r25, 0xCF	; 207
     7a4:	30 c0       	rjmp	.+96     	; 0x806 <__floatsisf+0xb4>
     7a6:	ee 24       	eor	r14, r14
     7a8:	ff 24       	eor	r15, r15
     7aa:	87 01       	movw	r16, r14
     7ac:	e2 1a       	sub	r14, r18
     7ae:	f3 0a       	sbc	r15, r19
     7b0:	04 0b       	sbc	r16, r20
     7b2:	15 0b       	sbc	r17, r21
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <__floatsisf+0x68>
     7b6:	79 01       	movw	r14, r18
     7b8:	8a 01       	movw	r16, r20
     7ba:	8e e1       	ldi	r24, 0x1E	; 30
     7bc:	c8 2e       	mov	r12, r24
     7be:	d1 2c       	mov	r13, r1
     7c0:	dc 82       	std	Y+4, r13	; 0x04
     7c2:	cb 82       	std	Y+3, r12	; 0x03
     7c4:	ed 82       	std	Y+5, r14	; 0x05
     7c6:	fe 82       	std	Y+6, r15	; 0x06
     7c8:	0f 83       	std	Y+7, r16	; 0x07
     7ca:	18 87       	std	Y+8, r17	; 0x08
     7cc:	c8 01       	movw	r24, r16
     7ce:	b7 01       	movw	r22, r14
     7d0:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__clzsi2>
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	18 16       	cp	r1, r24
     7d8:	19 06       	cpc	r1, r25
     7da:	84 f4       	brge	.+32     	; 0x7fc <__floatsisf+0xaa>
     7dc:	08 2e       	mov	r0, r24
     7de:	04 c0       	rjmp	.+8      	; 0x7e8 <__floatsisf+0x96>
     7e0:	ee 0c       	add	r14, r14
     7e2:	ff 1c       	adc	r15, r15
     7e4:	00 1f       	adc	r16, r16
     7e6:	11 1f       	adc	r17, r17
     7e8:	0a 94       	dec	r0
     7ea:	d2 f7       	brpl	.-12     	; 0x7e0 <__floatsisf+0x8e>
     7ec:	ed 82       	std	Y+5, r14	; 0x05
     7ee:	fe 82       	std	Y+6, r15	; 0x06
     7f0:	0f 83       	std	Y+7, r16	; 0x07
     7f2:	18 87       	std	Y+8, r17	; 0x08
     7f4:	c8 1a       	sub	r12, r24
     7f6:	d9 0a       	sbc	r13, r25
     7f8:	dc 82       	std	Y+4, r13	; 0x04
     7fa:	cb 82       	std	Y+3, r12	; 0x03
     7fc:	ba 82       	std	Y+2, r11	; 0x02
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     806:	28 96       	adiw	r28, 0x08	; 8
     808:	e9 e0       	ldi	r30, 0x09	; 9
     80a:	0c 94 7d 15 	jmp	0x2afa	; 0x2afa <__epilogue_restores__+0x12>

0000080e <__fixsfsi>:
     80e:	ac e0       	ldi	r26, 0x0C	; 12
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	ed e0       	ldi	r30, 0x0D	; 13
     814:	f4 e0       	ldi	r31, 0x04	; 4
     816:	0c 94 68 15 	jmp	0x2ad0	; 0x2ad0 <__prologue_saves__+0x20>
     81a:	69 83       	std	Y+1, r22	; 0x01
     81c:	7a 83       	std	Y+2, r23	; 0x02
     81e:	8b 83       	std	Y+3, r24	; 0x03
     820:	9c 83       	std	Y+4, r25	; 0x04
     822:	ce 01       	movw	r24, r28
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	be 01       	movw	r22, r28
     828:	6b 5f       	subi	r22, 0xFB	; 251
     82a:	7f 4f       	sbci	r23, 0xFF	; 255
     82c:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     830:	8d 81       	ldd	r24, Y+5	; 0x05
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	61 f1       	breq	.+88     	; 0x88e <__stack+0x2f>
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	50 f1       	brcs	.+84     	; 0x88e <__stack+0x2f>
     83a:	84 30       	cpi	r24, 0x04	; 4
     83c:	21 f4       	brne	.+8      	; 0x846 <__fixsfsi+0x38>
     83e:	8e 81       	ldd	r24, Y+6	; 0x06
     840:	88 23       	and	r24, r24
     842:	51 f1       	breq	.+84     	; 0x898 <__stack+0x39>
     844:	2e c0       	rjmp	.+92     	; 0x8a2 <__stack+0x43>
     846:	2f 81       	ldd	r18, Y+7	; 0x07
     848:	38 85       	ldd	r19, Y+8	; 0x08
     84a:	37 fd       	sbrc	r19, 7
     84c:	20 c0       	rjmp	.+64     	; 0x88e <__stack+0x2f>
     84e:	6e 81       	ldd	r22, Y+6	; 0x06
     850:	2f 31       	cpi	r18, 0x1F	; 31
     852:	31 05       	cpc	r19, r1
     854:	1c f0       	brlt	.+6      	; 0x85c <__fixsfsi+0x4e>
     856:	66 23       	and	r22, r22
     858:	f9 f0       	breq	.+62     	; 0x898 <__stack+0x39>
     85a:	23 c0       	rjmp	.+70     	; 0x8a2 <__stack+0x43>
     85c:	8e e1       	ldi	r24, 0x1E	; 30
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	82 1b       	sub	r24, r18
     862:	93 0b       	sbc	r25, r19
     864:	29 85       	ldd	r18, Y+9	; 0x09
     866:	3a 85       	ldd	r19, Y+10	; 0x0a
     868:	4b 85       	ldd	r20, Y+11	; 0x0b
     86a:	5c 85       	ldd	r21, Y+12	; 0x0c
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	56 95       	lsr	r21
     870:	47 95       	ror	r20
     872:	37 95       	ror	r19
     874:	27 95       	ror	r18
     876:	8a 95       	dec	r24
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	66 23       	and	r22, r22
     87c:	b1 f0       	breq	.+44     	; 0x8aa <__stack+0x4b>
     87e:	50 95       	com	r21
     880:	40 95       	com	r20
     882:	30 95       	com	r19
     884:	21 95       	neg	r18
     886:	3f 4f       	sbci	r19, 0xFF	; 255
     888:	4f 4f       	sbci	r20, 0xFF	; 255
     88a:	5f 4f       	sbci	r21, 0xFF	; 255
     88c:	0e c0       	rjmp	.+28     	; 0x8aa <__stack+0x4b>
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	09 c0       	rjmp	.+18     	; 0x8aa <__stack+0x4b>
     898:	2f ef       	ldi	r18, 0xFF	; 255
     89a:	3f ef       	ldi	r19, 0xFF	; 255
     89c:	4f ef       	ldi	r20, 0xFF	; 255
     89e:	5f e7       	ldi	r21, 0x7F	; 127
     8a0:	04 c0       	rjmp	.+8      	; 0x8aa <__stack+0x4b>
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	50 e8       	ldi	r21, 0x80	; 128
     8aa:	b9 01       	movw	r22, r18
     8ac:	ca 01       	movw	r24, r20
     8ae:	2c 96       	adiw	r28, 0x0c	; 12
     8b0:	e2 e0       	ldi	r30, 0x02	; 2
     8b2:	0c 94 84 15 	jmp	0x2b08	; 0x2b08 <__epilogue_restores__+0x20>

000008b6 <__clzsi2>:
     8b6:	ef 92       	push	r14
     8b8:	ff 92       	push	r15
     8ba:	0f 93       	push	r16
     8bc:	1f 93       	push	r17
     8be:	7b 01       	movw	r14, r22
     8c0:	8c 01       	movw	r16, r24
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	e8 16       	cp	r14, r24
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	f8 06       	cpc	r15, r24
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	08 07       	cpc	r16, r24
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	18 07       	cpc	r17, r24
     8d2:	88 f4       	brcc	.+34     	; 0x8f6 <__clzsi2+0x40>
     8d4:	8f ef       	ldi	r24, 0xFF	; 255
     8d6:	e8 16       	cp	r14, r24
     8d8:	f1 04       	cpc	r15, r1
     8da:	01 05       	cpc	r16, r1
     8dc:	11 05       	cpc	r17, r1
     8de:	31 f0       	breq	.+12     	; 0x8ec <__clzsi2+0x36>
     8e0:	28 f0       	brcs	.+10     	; 0x8ec <__clzsi2+0x36>
     8e2:	88 e0       	ldi	r24, 0x08	; 8
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	b0 e0       	ldi	r27, 0x00	; 0
     8ea:	17 c0       	rjmp	.+46     	; 0x91a <__clzsi2+0x64>
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	a0 e0       	ldi	r26, 0x00	; 0
     8f2:	b0 e0       	ldi	r27, 0x00	; 0
     8f4:	12 c0       	rjmp	.+36     	; 0x91a <__clzsi2+0x64>
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	e8 16       	cp	r14, r24
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	f8 06       	cpc	r15, r24
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	08 07       	cpc	r16, r24
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	18 07       	cpc	r17, r24
     906:	28 f0       	brcs	.+10     	; 0x912 <__clzsi2+0x5c>
     908:	88 e1       	ldi	r24, 0x18	; 24
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e0       	ldi	r26, 0x00	; 0
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	04 c0       	rjmp	.+8      	; 0x91a <__clzsi2+0x64>
     912:	80 e1       	ldi	r24, 0x10	; 16
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a0 e0       	ldi	r26, 0x00	; 0
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	20 e2       	ldi	r18, 0x20	; 32
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	28 1b       	sub	r18, r24
     924:	39 0b       	sbc	r19, r25
     926:	4a 0b       	sbc	r20, r26
     928:	5b 0b       	sbc	r21, r27
     92a:	04 c0       	rjmp	.+8      	; 0x934 <__clzsi2+0x7e>
     92c:	16 95       	lsr	r17
     92e:	07 95       	ror	r16
     930:	f7 94       	ror	r15
     932:	e7 94       	ror	r14
     934:	8a 95       	dec	r24
     936:	d2 f7       	brpl	.-12     	; 0x92c <__clzsi2+0x76>
     938:	f7 01       	movw	r30, r14
     93a:	e8 59       	subi	r30, 0x98	; 152
     93c:	ff 4f       	sbci	r31, 0xFF	; 255
     93e:	80 81       	ld	r24, Z
     940:	28 1b       	sub	r18, r24
     942:	31 09       	sbc	r19, r1
     944:	41 09       	sbc	r20, r1
     946:	51 09       	sbc	r21, r1
     948:	c9 01       	movw	r24, r18
     94a:	1f 91       	pop	r17
     94c:	0f 91       	pop	r16
     94e:	ff 90       	pop	r15
     950:	ef 90       	pop	r14
     952:	08 95       	ret

00000954 <__pack_f>:
     954:	df 92       	push	r13
     956:	ef 92       	push	r14
     958:	ff 92       	push	r15
     95a:	0f 93       	push	r16
     95c:	1f 93       	push	r17
     95e:	fc 01       	movw	r30, r24
     960:	e4 80       	ldd	r14, Z+4	; 0x04
     962:	f5 80       	ldd	r15, Z+5	; 0x05
     964:	06 81       	ldd	r16, Z+6	; 0x06
     966:	17 81       	ldd	r17, Z+7	; 0x07
     968:	d1 80       	ldd	r13, Z+1	; 0x01
     96a:	80 81       	ld	r24, Z
     96c:	82 30       	cpi	r24, 0x02	; 2
     96e:	48 f4       	brcc	.+18     	; 0x982 <__pack_f+0x2e>
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	a0 e1       	ldi	r26, 0x10	; 16
     976:	b0 e0       	ldi	r27, 0x00	; 0
     978:	e8 2a       	or	r14, r24
     97a:	f9 2a       	or	r15, r25
     97c:	0a 2b       	or	r16, r26
     97e:	1b 2b       	or	r17, r27
     980:	a5 c0       	rjmp	.+330    	; 0xacc <__pack_f+0x178>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	09 f4       	brne	.+2      	; 0x988 <__pack_f+0x34>
     986:	9f c0       	rjmp	.+318    	; 0xac6 <__pack_f+0x172>
     988:	82 30       	cpi	r24, 0x02	; 2
     98a:	21 f4       	brne	.+8      	; 0x994 <__pack_f+0x40>
     98c:	ee 24       	eor	r14, r14
     98e:	ff 24       	eor	r15, r15
     990:	87 01       	movw	r16, r14
     992:	05 c0       	rjmp	.+10     	; 0x99e <__pack_f+0x4a>
     994:	e1 14       	cp	r14, r1
     996:	f1 04       	cpc	r15, r1
     998:	01 05       	cpc	r16, r1
     99a:	11 05       	cpc	r17, r1
     99c:	19 f4       	brne	.+6      	; 0x9a4 <__pack_f+0x50>
     99e:	e0 e0       	ldi	r30, 0x00	; 0
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	96 c0       	rjmp	.+300    	; 0xad0 <__pack_f+0x17c>
     9a4:	62 81       	ldd	r22, Z+2	; 0x02
     9a6:	73 81       	ldd	r23, Z+3	; 0x03
     9a8:	9f ef       	ldi	r25, 0xFF	; 255
     9aa:	62 38       	cpi	r22, 0x82	; 130
     9ac:	79 07       	cpc	r23, r25
     9ae:	0c f0       	brlt	.+2      	; 0x9b2 <__pack_f+0x5e>
     9b0:	5b c0       	rjmp	.+182    	; 0xa68 <__pack_f+0x114>
     9b2:	22 e8       	ldi	r18, 0x82	; 130
     9b4:	3f ef       	ldi	r19, 0xFF	; 255
     9b6:	26 1b       	sub	r18, r22
     9b8:	37 0b       	sbc	r19, r23
     9ba:	2a 31       	cpi	r18, 0x1A	; 26
     9bc:	31 05       	cpc	r19, r1
     9be:	2c f0       	brlt	.+10     	; 0x9ca <__pack_f+0x76>
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	40 e0       	ldi	r20, 0x00	; 0
     9c6:	50 e0       	ldi	r21, 0x00	; 0
     9c8:	2a c0       	rjmp	.+84     	; 0xa1e <__pack_f+0xca>
     9ca:	b8 01       	movw	r22, r16
     9cc:	a7 01       	movw	r20, r14
     9ce:	02 2e       	mov	r0, r18
     9d0:	04 c0       	rjmp	.+8      	; 0x9da <__pack_f+0x86>
     9d2:	76 95       	lsr	r23
     9d4:	67 95       	ror	r22
     9d6:	57 95       	ror	r21
     9d8:	47 95       	ror	r20
     9da:	0a 94       	dec	r0
     9dc:	d2 f7       	brpl	.-12     	; 0x9d2 <__pack_f+0x7e>
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	a0 e0       	ldi	r26, 0x00	; 0
     9e4:	b0 e0       	ldi	r27, 0x00	; 0
     9e6:	04 c0       	rjmp	.+8      	; 0x9f0 <__pack_f+0x9c>
     9e8:	88 0f       	add	r24, r24
     9ea:	99 1f       	adc	r25, r25
     9ec:	aa 1f       	adc	r26, r26
     9ee:	bb 1f       	adc	r27, r27
     9f0:	2a 95       	dec	r18
     9f2:	d2 f7       	brpl	.-12     	; 0x9e8 <__pack_f+0x94>
     9f4:	01 97       	sbiw	r24, 0x01	; 1
     9f6:	a1 09       	sbc	r26, r1
     9f8:	b1 09       	sbc	r27, r1
     9fa:	8e 21       	and	r24, r14
     9fc:	9f 21       	and	r25, r15
     9fe:	a0 23       	and	r26, r16
     a00:	b1 23       	and	r27, r17
     a02:	00 97       	sbiw	r24, 0x00	; 0
     a04:	a1 05       	cpc	r26, r1
     a06:	b1 05       	cpc	r27, r1
     a08:	21 f0       	breq	.+8      	; 0xa12 <__pack_f+0xbe>
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	a0 e0       	ldi	r26, 0x00	; 0
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	9a 01       	movw	r18, r20
     a14:	ab 01       	movw	r20, r22
     a16:	28 2b       	or	r18, r24
     a18:	39 2b       	or	r19, r25
     a1a:	4a 2b       	or	r20, r26
     a1c:	5b 2b       	or	r21, r27
     a1e:	da 01       	movw	r26, r20
     a20:	c9 01       	movw	r24, r18
     a22:	8f 77       	andi	r24, 0x7F	; 127
     a24:	90 70       	andi	r25, 0x00	; 0
     a26:	a0 70       	andi	r26, 0x00	; 0
     a28:	b0 70       	andi	r27, 0x00	; 0
     a2a:	80 34       	cpi	r24, 0x40	; 64
     a2c:	91 05       	cpc	r25, r1
     a2e:	a1 05       	cpc	r26, r1
     a30:	b1 05       	cpc	r27, r1
     a32:	39 f4       	brne	.+14     	; 0xa42 <__pack_f+0xee>
     a34:	27 ff       	sbrs	r18, 7
     a36:	09 c0       	rjmp	.+18     	; 0xa4a <__pack_f+0xf6>
     a38:	20 5c       	subi	r18, 0xC0	; 192
     a3a:	3f 4f       	sbci	r19, 0xFF	; 255
     a3c:	4f 4f       	sbci	r20, 0xFF	; 255
     a3e:	5f 4f       	sbci	r21, 0xFF	; 255
     a40:	04 c0       	rjmp	.+8      	; 0xa4a <__pack_f+0xf6>
     a42:	21 5c       	subi	r18, 0xC1	; 193
     a44:	3f 4f       	sbci	r19, 0xFF	; 255
     a46:	4f 4f       	sbci	r20, 0xFF	; 255
     a48:	5f 4f       	sbci	r21, 0xFF	; 255
     a4a:	e0 e0       	ldi	r30, 0x00	; 0
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	20 30       	cpi	r18, 0x00	; 0
     a50:	a0 e0       	ldi	r26, 0x00	; 0
     a52:	3a 07       	cpc	r19, r26
     a54:	a0 e0       	ldi	r26, 0x00	; 0
     a56:	4a 07       	cpc	r20, r26
     a58:	a0 e4       	ldi	r26, 0x40	; 64
     a5a:	5a 07       	cpc	r21, r26
     a5c:	10 f0       	brcs	.+4      	; 0xa62 <__pack_f+0x10e>
     a5e:	e1 e0       	ldi	r30, 0x01	; 1
     a60:	f0 e0       	ldi	r31, 0x00	; 0
     a62:	79 01       	movw	r14, r18
     a64:	8a 01       	movw	r16, r20
     a66:	27 c0       	rjmp	.+78     	; 0xab6 <__pack_f+0x162>
     a68:	60 38       	cpi	r22, 0x80	; 128
     a6a:	71 05       	cpc	r23, r1
     a6c:	64 f5       	brge	.+88     	; 0xac6 <__pack_f+0x172>
     a6e:	fb 01       	movw	r30, r22
     a70:	e1 58       	subi	r30, 0x81	; 129
     a72:	ff 4f       	sbci	r31, 0xFF	; 255
     a74:	d8 01       	movw	r26, r16
     a76:	c7 01       	movw	r24, r14
     a78:	8f 77       	andi	r24, 0x7F	; 127
     a7a:	90 70       	andi	r25, 0x00	; 0
     a7c:	a0 70       	andi	r26, 0x00	; 0
     a7e:	b0 70       	andi	r27, 0x00	; 0
     a80:	80 34       	cpi	r24, 0x40	; 64
     a82:	91 05       	cpc	r25, r1
     a84:	a1 05       	cpc	r26, r1
     a86:	b1 05       	cpc	r27, r1
     a88:	39 f4       	brne	.+14     	; 0xa98 <__pack_f+0x144>
     a8a:	e7 fe       	sbrs	r14, 7
     a8c:	0d c0       	rjmp	.+26     	; 0xaa8 <__pack_f+0x154>
     a8e:	80 e4       	ldi	r24, 0x40	; 64
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	a0 e0       	ldi	r26, 0x00	; 0
     a94:	b0 e0       	ldi	r27, 0x00	; 0
     a96:	04 c0       	rjmp	.+8      	; 0xaa0 <__pack_f+0x14c>
     a98:	8f e3       	ldi	r24, 0x3F	; 63
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	a0 e0       	ldi	r26, 0x00	; 0
     a9e:	b0 e0       	ldi	r27, 0x00	; 0
     aa0:	e8 0e       	add	r14, r24
     aa2:	f9 1e       	adc	r15, r25
     aa4:	0a 1f       	adc	r16, r26
     aa6:	1b 1f       	adc	r17, r27
     aa8:	17 ff       	sbrs	r17, 7
     aaa:	05 c0       	rjmp	.+10     	; 0xab6 <__pack_f+0x162>
     aac:	16 95       	lsr	r17
     aae:	07 95       	ror	r16
     ab0:	f7 94       	ror	r15
     ab2:	e7 94       	ror	r14
     ab4:	31 96       	adiw	r30, 0x01	; 1
     ab6:	87 e0       	ldi	r24, 0x07	; 7
     ab8:	16 95       	lsr	r17
     aba:	07 95       	ror	r16
     abc:	f7 94       	ror	r15
     abe:	e7 94       	ror	r14
     ac0:	8a 95       	dec	r24
     ac2:	d1 f7       	brne	.-12     	; 0xab8 <__pack_f+0x164>
     ac4:	05 c0       	rjmp	.+10     	; 0xad0 <__pack_f+0x17c>
     ac6:	ee 24       	eor	r14, r14
     ac8:	ff 24       	eor	r15, r15
     aca:	87 01       	movw	r16, r14
     acc:	ef ef       	ldi	r30, 0xFF	; 255
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	6e 2f       	mov	r22, r30
     ad2:	67 95       	ror	r22
     ad4:	66 27       	eor	r22, r22
     ad6:	67 95       	ror	r22
     ad8:	90 2f       	mov	r25, r16
     ada:	9f 77       	andi	r25, 0x7F	; 127
     adc:	d7 94       	ror	r13
     ade:	dd 24       	eor	r13, r13
     ae0:	d7 94       	ror	r13
     ae2:	8e 2f       	mov	r24, r30
     ae4:	86 95       	lsr	r24
     ae6:	49 2f       	mov	r20, r25
     ae8:	46 2b       	or	r20, r22
     aea:	58 2f       	mov	r21, r24
     aec:	5d 29       	or	r21, r13
     aee:	b7 01       	movw	r22, r14
     af0:	ca 01       	movw	r24, r20
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	ff 90       	pop	r15
     af8:	ef 90       	pop	r14
     afa:	df 90       	pop	r13
     afc:	08 95       	ret

00000afe <__unpack_f>:
     afe:	fc 01       	movw	r30, r24
     b00:	db 01       	movw	r26, r22
     b02:	40 81       	ld	r20, Z
     b04:	51 81       	ldd	r21, Z+1	; 0x01
     b06:	22 81       	ldd	r18, Z+2	; 0x02
     b08:	62 2f       	mov	r22, r18
     b0a:	6f 77       	andi	r22, 0x7F	; 127
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	22 1f       	adc	r18, r18
     b10:	22 27       	eor	r18, r18
     b12:	22 1f       	adc	r18, r18
     b14:	93 81       	ldd	r25, Z+3	; 0x03
     b16:	89 2f       	mov	r24, r25
     b18:	88 0f       	add	r24, r24
     b1a:	82 2b       	or	r24, r18
     b1c:	28 2f       	mov	r18, r24
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	99 1f       	adc	r25, r25
     b22:	99 27       	eor	r25, r25
     b24:	99 1f       	adc	r25, r25
     b26:	11 96       	adiw	r26, 0x01	; 1
     b28:	9c 93       	st	X, r25
     b2a:	11 97       	sbiw	r26, 0x01	; 1
     b2c:	21 15       	cp	r18, r1
     b2e:	31 05       	cpc	r19, r1
     b30:	a9 f5       	brne	.+106    	; 0xb9c <__unpack_f+0x9e>
     b32:	41 15       	cp	r20, r1
     b34:	51 05       	cpc	r21, r1
     b36:	61 05       	cpc	r22, r1
     b38:	71 05       	cpc	r23, r1
     b3a:	11 f4       	brne	.+4      	; 0xb40 <__unpack_f+0x42>
     b3c:	82 e0       	ldi	r24, 0x02	; 2
     b3e:	37 c0       	rjmp	.+110    	; 0xbae <__unpack_f+0xb0>
     b40:	82 e8       	ldi	r24, 0x82	; 130
     b42:	9f ef       	ldi	r25, 0xFF	; 255
     b44:	13 96       	adiw	r26, 0x03	; 3
     b46:	9c 93       	st	X, r25
     b48:	8e 93       	st	-X, r24
     b4a:	12 97       	sbiw	r26, 0x02	; 2
     b4c:	9a 01       	movw	r18, r20
     b4e:	ab 01       	movw	r20, r22
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	6a 95       	dec	r22
     b5c:	d1 f7       	brne	.-12     	; 0xb52 <__unpack_f+0x54>
     b5e:	83 e0       	ldi	r24, 0x03	; 3
     b60:	8c 93       	st	X, r24
     b62:	0d c0       	rjmp	.+26     	; 0xb7e <__unpack_f+0x80>
     b64:	22 0f       	add	r18, r18
     b66:	33 1f       	adc	r19, r19
     b68:	44 1f       	adc	r20, r20
     b6a:	55 1f       	adc	r21, r21
     b6c:	12 96       	adiw	r26, 0x02	; 2
     b6e:	8d 91       	ld	r24, X+
     b70:	9c 91       	ld	r25, X
     b72:	13 97       	sbiw	r26, 0x03	; 3
     b74:	01 97       	sbiw	r24, 0x01	; 1
     b76:	13 96       	adiw	r26, 0x03	; 3
     b78:	9c 93       	st	X, r25
     b7a:	8e 93       	st	-X, r24
     b7c:	12 97       	sbiw	r26, 0x02	; 2
     b7e:	20 30       	cpi	r18, 0x00	; 0
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	38 07       	cpc	r19, r24
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	48 07       	cpc	r20, r24
     b88:	80 e4       	ldi	r24, 0x40	; 64
     b8a:	58 07       	cpc	r21, r24
     b8c:	58 f3       	brcs	.-42     	; 0xb64 <__unpack_f+0x66>
     b8e:	14 96       	adiw	r26, 0x04	; 4
     b90:	2d 93       	st	X+, r18
     b92:	3d 93       	st	X+, r19
     b94:	4d 93       	st	X+, r20
     b96:	5c 93       	st	X, r21
     b98:	17 97       	sbiw	r26, 0x07	; 7
     b9a:	08 95       	ret
     b9c:	2f 3f       	cpi	r18, 0xFF	; 255
     b9e:	31 05       	cpc	r19, r1
     ba0:	79 f4       	brne	.+30     	; 0xbc0 <__unpack_f+0xc2>
     ba2:	41 15       	cp	r20, r1
     ba4:	51 05       	cpc	r21, r1
     ba6:	61 05       	cpc	r22, r1
     ba8:	71 05       	cpc	r23, r1
     baa:	19 f4       	brne	.+6      	; 0xbb2 <__unpack_f+0xb4>
     bac:	84 e0       	ldi	r24, 0x04	; 4
     bae:	8c 93       	st	X, r24
     bb0:	08 95       	ret
     bb2:	64 ff       	sbrs	r22, 4
     bb4:	03 c0       	rjmp	.+6      	; 0xbbc <__unpack_f+0xbe>
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	8c 93       	st	X, r24
     bba:	12 c0       	rjmp	.+36     	; 0xbe0 <__unpack_f+0xe2>
     bbc:	1c 92       	st	X, r1
     bbe:	10 c0       	rjmp	.+32     	; 0xbe0 <__unpack_f+0xe2>
     bc0:	2f 57       	subi	r18, 0x7F	; 127
     bc2:	30 40       	sbci	r19, 0x00	; 0
     bc4:	13 96       	adiw	r26, 0x03	; 3
     bc6:	3c 93       	st	X, r19
     bc8:	2e 93       	st	-X, r18
     bca:	12 97       	sbiw	r26, 0x02	; 2
     bcc:	83 e0       	ldi	r24, 0x03	; 3
     bce:	8c 93       	st	X, r24
     bd0:	87 e0       	ldi	r24, 0x07	; 7
     bd2:	44 0f       	add	r20, r20
     bd4:	55 1f       	adc	r21, r21
     bd6:	66 1f       	adc	r22, r22
     bd8:	77 1f       	adc	r23, r23
     bda:	8a 95       	dec	r24
     bdc:	d1 f7       	brne	.-12     	; 0xbd2 <__unpack_f+0xd4>
     bde:	70 64       	ori	r23, 0x40	; 64
     be0:	14 96       	adiw	r26, 0x04	; 4
     be2:	4d 93       	st	X+, r20
     be4:	5d 93       	st	X+, r21
     be6:	6d 93       	st	X+, r22
     be8:	7c 93       	st	X, r23
     bea:	17 97       	sbiw	r26, 0x07	; 7
     bec:	08 95       	ret

00000bee <__fpcmp_parts_f>:
     bee:	1f 93       	push	r17
     bf0:	dc 01       	movw	r26, r24
     bf2:	fb 01       	movw	r30, r22
     bf4:	9c 91       	ld	r25, X
     bf6:	92 30       	cpi	r25, 0x02	; 2
     bf8:	08 f4       	brcc	.+2      	; 0xbfc <__fpcmp_parts_f+0xe>
     bfa:	47 c0       	rjmp	.+142    	; 0xc8a <__fpcmp_parts_f+0x9c>
     bfc:	80 81       	ld	r24, Z
     bfe:	82 30       	cpi	r24, 0x02	; 2
     c00:	08 f4       	brcc	.+2      	; 0xc04 <__fpcmp_parts_f+0x16>
     c02:	43 c0       	rjmp	.+134    	; 0xc8a <__fpcmp_parts_f+0x9c>
     c04:	94 30       	cpi	r25, 0x04	; 4
     c06:	51 f4       	brne	.+20     	; 0xc1c <__fpcmp_parts_f+0x2e>
     c08:	11 96       	adiw	r26, 0x01	; 1
     c0a:	1c 91       	ld	r17, X
     c0c:	84 30       	cpi	r24, 0x04	; 4
     c0e:	99 f5       	brne	.+102    	; 0xc76 <__fpcmp_parts_f+0x88>
     c10:	81 81       	ldd	r24, Z+1	; 0x01
     c12:	68 2f       	mov	r22, r24
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	61 1b       	sub	r22, r17
     c18:	71 09       	sbc	r23, r1
     c1a:	3f c0       	rjmp	.+126    	; 0xc9a <__fpcmp_parts_f+0xac>
     c1c:	84 30       	cpi	r24, 0x04	; 4
     c1e:	21 f0       	breq	.+8      	; 0xc28 <__fpcmp_parts_f+0x3a>
     c20:	92 30       	cpi	r25, 0x02	; 2
     c22:	31 f4       	brne	.+12     	; 0xc30 <__fpcmp_parts_f+0x42>
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	b9 f1       	breq	.+110    	; 0xc96 <__fpcmp_parts_f+0xa8>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	88 23       	and	r24, r24
     c2c:	89 f1       	breq	.+98     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c2e:	2d c0       	rjmp	.+90     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c30:	11 96       	adiw	r26, 0x01	; 1
     c32:	1c 91       	ld	r17, X
     c34:	11 97       	sbiw	r26, 0x01	; 1
     c36:	82 30       	cpi	r24, 0x02	; 2
     c38:	f1 f0       	breq	.+60     	; 0xc76 <__fpcmp_parts_f+0x88>
     c3a:	81 81       	ldd	r24, Z+1	; 0x01
     c3c:	18 17       	cp	r17, r24
     c3e:	d9 f4       	brne	.+54     	; 0xc76 <__fpcmp_parts_f+0x88>
     c40:	12 96       	adiw	r26, 0x02	; 2
     c42:	2d 91       	ld	r18, X+
     c44:	3c 91       	ld	r19, X
     c46:	13 97       	sbiw	r26, 0x03	; 3
     c48:	82 81       	ldd	r24, Z+2	; 0x02
     c4a:	93 81       	ldd	r25, Z+3	; 0x03
     c4c:	82 17       	cp	r24, r18
     c4e:	93 07       	cpc	r25, r19
     c50:	94 f0       	brlt	.+36     	; 0xc76 <__fpcmp_parts_f+0x88>
     c52:	28 17       	cp	r18, r24
     c54:	39 07       	cpc	r19, r25
     c56:	bc f0       	brlt	.+46     	; 0xc86 <__fpcmp_parts_f+0x98>
     c58:	14 96       	adiw	r26, 0x04	; 4
     c5a:	8d 91       	ld	r24, X+
     c5c:	9d 91       	ld	r25, X+
     c5e:	0d 90       	ld	r0, X+
     c60:	bc 91       	ld	r27, X
     c62:	a0 2d       	mov	r26, r0
     c64:	24 81       	ldd	r18, Z+4	; 0x04
     c66:	35 81       	ldd	r19, Z+5	; 0x05
     c68:	46 81       	ldd	r20, Z+6	; 0x06
     c6a:	57 81       	ldd	r21, Z+7	; 0x07
     c6c:	28 17       	cp	r18, r24
     c6e:	39 07       	cpc	r19, r25
     c70:	4a 07       	cpc	r20, r26
     c72:	5b 07       	cpc	r21, r27
     c74:	18 f4       	brcc	.+6      	; 0xc7c <__fpcmp_parts_f+0x8e>
     c76:	11 23       	and	r17, r17
     c78:	41 f0       	breq	.+16     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c7a:	0a c0       	rjmp	.+20     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c7c:	82 17       	cp	r24, r18
     c7e:	93 07       	cpc	r25, r19
     c80:	a4 07       	cpc	r26, r20
     c82:	b5 07       	cpc	r27, r21
     c84:	40 f4       	brcc	.+16     	; 0xc96 <__fpcmp_parts_f+0xa8>
     c86:	11 23       	and	r17, r17
     c88:	19 f0       	breq	.+6      	; 0xc90 <__fpcmp_parts_f+0xa2>
     c8a:	61 e0       	ldi	r22, 0x01	; 1
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	05 c0       	rjmp	.+10     	; 0xc9a <__fpcmp_parts_f+0xac>
     c90:	6f ef       	ldi	r22, 0xFF	; 255
     c92:	7f ef       	ldi	r23, 0xFF	; 255
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <__fpcmp_parts_f+0xac>
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	cb 01       	movw	r24, r22
     c9c:	1f 91       	pop	r17
     c9e:	08 95       	ret

00000ca0 <WDT_VoidEnable>:
#include"../../LIB/STD_Type.h"
#include"../../LIB/BIT_MATH.h"

#include"WDT_Interface.h"

void WDT_VoidEnable(void){
     ca0:	df 93       	push	r29
     ca2:	cf 93       	push	r28
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(WDTCR,3);
     ca8:	a1 e4       	ldi	r26, 0x41	; 65
     caa:	b0 e0       	ldi	r27, 0x00	; 0
     cac:	e1 e4       	ldi	r30, 0x41	; 65
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	80 81       	ld	r24, Z
     cb2:	88 60       	ori	r24, 0x08	; 8
     cb4:	8c 93       	st	X, r24
}
     cb6:	cf 91       	pop	r28
     cb8:	df 91       	pop	r29
     cba:	08 95       	ret

00000cbc <WDT_VoidDisable>:

void WDT_VoidDisable(void){
     cbc:	df 93       	push	r29
     cbe:	cf 93       	push	r28
     cc0:	cd b7       	in	r28, 0x3d	; 61
     cc2:	de b7       	in	r29, 0x3e	; 62
	WDTCR |= (3<<3);
     cc4:	a1 e4       	ldi	r26, 0x41	; 65
     cc6:	b0 e0       	ldi	r27, 0x00	; 0
     cc8:	e1 e4       	ldi	r30, 0x41	; 65
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	80 81       	ld	r24, Z
     cce:	88 61       	ori	r24, 0x18	; 24
     cd0:	8c 93       	st	X, r24
	CLR_Bit(WDTCR,3);
     cd2:	a1 e4       	ldi	r26, 0x41	; 65
     cd4:	b0 e0       	ldi	r27, 0x00	; 0
     cd6:	e1 e4       	ldi	r30, 0x41	; 65
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	80 81       	ld	r24, Z
     cdc:	87 7f       	andi	r24, 0xF7	; 247
     cde:	8c 93       	st	X, r24
}
     ce0:	cf 91       	pop	r28
     ce2:	df 91       	pop	r29
     ce4:	08 95       	ret

00000ce6 <WDT_VoidSleep>:

void WDT_VoidSleep(u8 Copy_u8SleepTime){
     ce6:	df 93       	push	r29
     ce8:	cf 93       	push	r28
     cea:	00 d0       	rcall	.+0      	; 0xcec <WDT_VoidSleep+0x6>
     cec:	cd b7       	in	r28, 0x3d	; 61
     cee:	de b7       	in	r29, 0x3e	; 62
     cf0:	8a 83       	std	Y+2, r24	; 0x02
	//Set Prescale Value
	for(u8 i=0;i<3;i++){
     cf2:	19 82       	std	Y+1, r1	; 0x01
     cf4:	39 c0       	rjmp	.+114    	; 0xd68 <WDT_VoidSleep+0x82>
		if((Copy_u8SleepTime%10)==1)
     cf6:	8a 81       	ldd	r24, Y+2	; 0x02
     cf8:	9a e0       	ldi	r25, 0x0A	; 10
     cfa:	69 2f       	mov	r22, r25
     cfc:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <__udivmodqi4>
     d00:	89 2f       	mov	r24, r25
     d02:	81 30       	cpi	r24, 0x01	; 1
     d04:	a1 f4       	brne	.+40     	; 0xd2e <WDT_VoidSleep+0x48>
			Set_Bit(WDTCR,i);
     d06:	a1 e4       	ldi	r26, 0x41	; 65
     d08:	b0 e0       	ldi	r27, 0x00	; 0
     d0a:	e1 e4       	ldi	r30, 0x41	; 65
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	80 81       	ld	r24, Z
     d10:	48 2f       	mov	r20, r24
     d12:	89 81       	ldd	r24, Y+1	; 0x01
     d14:	28 2f       	mov	r18, r24
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	02 2e       	mov	r0, r18
     d1e:	02 c0       	rjmp	.+4      	; 0xd24 <WDT_VoidSleep+0x3e>
     d20:	88 0f       	add	r24, r24
     d22:	99 1f       	adc	r25, r25
     d24:	0a 94       	dec	r0
     d26:	e2 f7       	brpl	.-8      	; 0xd20 <WDT_VoidSleep+0x3a>
     d28:	84 2b       	or	r24, r20
     d2a:	8c 93       	st	X, r24
     d2c:	14 c0       	rjmp	.+40     	; 0xd56 <WDT_VoidSleep+0x70>
		else
			CLR_Bit(WDTCR,i);
     d2e:	a1 e4       	ldi	r26, 0x41	; 65
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	e1 e4       	ldi	r30, 0x41	; 65
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	80 81       	ld	r24, Z
     d38:	48 2f       	mov	r20, r24
     d3a:	89 81       	ldd	r24, Y+1	; 0x01
     d3c:	28 2f       	mov	r18, r24
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	02 2e       	mov	r0, r18
     d46:	02 c0       	rjmp	.+4      	; 0xd4c <WDT_VoidSleep+0x66>
     d48:	88 0f       	add	r24, r24
     d4a:	99 1f       	adc	r25, r25
     d4c:	0a 94       	dec	r0
     d4e:	e2 f7       	brpl	.-8      	; 0xd48 <WDT_VoidSleep+0x62>
     d50:	80 95       	com	r24
     d52:	84 23       	and	r24, r20
     d54:	8c 93       	st	X, r24
		Copy_u8SleepTime = Copy_u8SleepTime /10;
     d56:	8a 81       	ldd	r24, Y+2	; 0x02
     d58:	9a e0       	ldi	r25, 0x0A	; 10
     d5a:	69 2f       	mov	r22, r25
     d5c:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <__udivmodqi4>
     d60:	8a 83       	std	Y+2, r24	; 0x02
	CLR_Bit(WDTCR,3);
}

void WDT_VoidSleep(u8 Copy_u8SleepTime){
	//Set Prescale Value
	for(u8 i=0;i<3;i++){
     d62:	89 81       	ldd	r24, Y+1	; 0x01
     d64:	8f 5f       	subi	r24, 0xFF	; 255
     d66:	89 83       	std	Y+1, r24	; 0x01
     d68:	89 81       	ldd	r24, Y+1	; 0x01
     d6a:	83 30       	cpi	r24, 0x03	; 3
     d6c:	20 f2       	brcs	.-120    	; 0xcf6 <WDT_VoidSleep+0x10>
			Set_Bit(WDTCR,i);
		else
			CLR_Bit(WDTCR,i);
		Copy_u8SleepTime = Copy_u8SleepTime /10;
	}
}
     d6e:	0f 90       	pop	r0
     d70:	0f 90       	pop	r0
     d72:	cf 91       	pop	r28
     d74:	df 91       	pop	r29
     d76:	08 95       	ret

00000d78 <USART_VoidInit>:
#include"../../LIB/BIT_MATH.h"

#include"USART_Interface.h"


void USART_VoidInit(void){
     d78:	df 93       	push	r29
     d7a:	cf 93       	push	r28
     d7c:	0f 92       	push	r0
     d7e:	cd b7       	in	r28, 0x3d	; 61
     d80:	de b7       	in	r29, 0x3e	; 62
	//Note: UCSRC is not bit allocate
	u8 Local_u8UCSRC_value=0;
     d82:	19 82       	std	Y+1, r1	; 0x01
	//Select UCSRC Reg
	Set_Bit(Local_u8UCSRC_value,7);
     d84:	89 81       	ldd	r24, Y+1	; 0x01
     d86:	80 68       	ori	r24, 0x80	; 128
     d88:	89 83       	std	Y+1, r24	; 0x01

	//Select Asynchronous Mode
	CLR_Bit(Local_u8UCSRC_value,6);
     d8a:	89 81       	ldd	r24, Y+1	; 0x01
     d8c:	8f 7b       	andi	r24, 0xBF	; 191
     d8e:	89 83       	std	Y+1, r24	; 0x01

	//Disable Parity Mode
	CLR_Bit(Local_u8UCSRC_value,5);
     d90:	89 81       	ldd	r24, Y+1	; 0x01
     d92:	8f 7d       	andi	r24, 0xDF	; 223
     d94:	89 83       	std	Y+1, r24	; 0x01
	CLR_Bit(Local_u8UCSRC_value,4);
     d96:	89 81       	ldd	r24, Y+1	; 0x01
     d98:	8f 7e       	andi	r24, 0xEF	; 239
     d9a:	89 83       	std	Y+1, r24	; 0x01

	//Select Stop bit to be 1 bit
	CLR_Bit(Local_u8UCSRC_value,3);
     d9c:	89 81       	ldd	r24, Y+1	; 0x01
     d9e:	87 7f       	andi	r24, 0xF7	; 247
     da0:	89 83       	std	Y+1, r24	; 0x01

	//Select 8 bit character size
	Set_Bit(Local_u8UCSRC_value,2);
     da2:	89 81       	ldd	r24, Y+1	; 0x01
     da4:	84 60       	ori	r24, 0x04	; 4
     da6:	89 83       	std	Y+1, r24	; 0x01
	Set_Bit(Local_u8UCSRC_value,1);
     da8:	89 81       	ldd	r24, Y+1	; 0x01
     daa:	82 60       	ori	r24, 0x02	; 2
     dac:	89 83       	std	Y+1, r24	; 0x01
	CLR_Bit(UCSRB,2); //Note IN Another Register
     dae:	aa e2       	ldi	r26, 0x2A	; 42
     db0:	b0 e0       	ldi	r27, 0x00	; 0
     db2:	ea e2       	ldi	r30, 0x2A	; 42
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	80 81       	ld	r24, Z
     db8:	8b 7f       	andi	r24, 0xFB	; 251
     dba:	8c 93       	st	X, r24

	//Put Value to UCSRC
	UCSRC = Local_u8UCSRC_value;
     dbc:	e0 e4       	ldi	r30, 0x40	; 64
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	89 81       	ldd	r24, Y+1	; 0x01
     dc2:	80 83       	st	Z, r24

	//Baud Rate  9600 Sample per Second
	UBRRL = 51;
     dc4:	e9 e2       	ldi	r30, 0x29	; 41
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	83 e3       	ldi	r24, 0x33	; 51
     dca:	80 83       	st	Z, r24
	//enable receiver
	Set_Bit(UCSRB,4);
     dcc:	aa e2       	ldi	r26, 0x2A	; 42
     dce:	b0 e0       	ldi	r27, 0x00	; 0
     dd0:	ea e2       	ldi	r30, 0x2A	; 42
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	80 81       	ld	r24, Z
     dd6:	80 61       	ori	r24, 0x10	; 16
     dd8:	8c 93       	st	X, r24
	//enable transmitter
	Set_Bit(UCSRB,3);
     dda:	aa e2       	ldi	r26, 0x2A	; 42
     ddc:	b0 e0       	ldi	r27, 0x00	; 0
     dde:	ea e2       	ldi	r30, 0x2A	; 42
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	80 81       	ld	r24, Z
     de4:	88 60       	ori	r24, 0x08	; 8
     de6:	8c 93       	st	X, r24
}
     de8:	0f 90       	pop	r0
     dea:	cf 91       	pop	r28
     dec:	df 91       	pop	r29
     dee:	08 95       	ret

00000df0 <USART_VoidTxData>:

void USART_VoidTxData(u8 Copy_u8Data){
     df0:	df 93       	push	r29
     df2:	cf 93       	push	r28
     df4:	0f 92       	push	r0
     df6:	cd b7       	in	r28, 0x3d	; 61
     df8:	de b7       	in	r29, 0x3e	; 62
     dfa:	89 83       	std	Y+1, r24	; 0x01
	//Wait until Transmit data buffer is empty
	while(Get_Bit(UCSRA,5)==0);
     dfc:	eb e2       	ldi	r30, 0x2B	; 43
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
     e02:	82 95       	swap	r24
     e04:	86 95       	lsr	r24
     e06:	87 70       	andi	r24, 0x07	; 7
     e08:	88 2f       	mov	r24, r24
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	81 70       	andi	r24, 0x01	; 1
     e0e:	90 70       	andi	r25, 0x00	; 0
     e10:	00 97       	sbiw	r24, 0x00	; 0
     e12:	a1 f3       	breq	.-24     	; 0xdfc <USART_VoidTxData+0xc>
	//Clear Flag
	Set_Bit(UCSRA,5);
     e14:	ab e2       	ldi	r26, 0x2B	; 43
     e16:	b0 e0       	ldi	r27, 0x00	; 0
     e18:	eb e2       	ldi	r30, 0x2B	; 43
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	80 62       	ori	r24, 0x20	; 32
     e20:	8c 93       	st	X, r24

	UDR = Copy_u8Data;
     e22:	ec e2       	ldi	r30, 0x2C	; 44
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	89 81       	ldd	r24, Y+1	; 0x01
     e28:	80 83       	st	Z, r24

}
     e2a:	0f 90       	pop	r0
     e2c:	cf 91       	pop	r28
     e2e:	df 91       	pop	r29
     e30:	08 95       	ret

00000e32 <USART_VoidRxData>:

u8 USART_VoidRxData(void){
     e32:	df 93       	push	r29
     e34:	cf 93       	push	r28
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
	//Wait until Receiving Data
	while(Get_Bit(UCSRA,7)==0);
     e3a:	eb e2       	ldi	r30, 0x2B	; 43
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	88 23       	and	r24, r24
     e42:	dc f7       	brge	.-10     	; 0xe3a <USART_VoidRxData+0x8>
	//Clear Flag


	return UDR;
     e44:	ec e2       	ldi	r30, 0x2C	; 44
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	80 81       	ld	r24, Z
}
     e4a:	cf 91       	pop	r28
     e4c:	df 91       	pop	r29
     e4e:	08 95       	ret

00000e50 <USART_VoidTxString>:

void USART_VoidTxString(u8* Copy_String){
     e50:	df 93       	push	r29
     e52:	cf 93       	push	r28
     e54:	00 d0       	rcall	.+0      	; 0xe56 <USART_VoidTxString+0x6>
     e56:	0f 92       	push	r0
     e58:	cd b7       	in	r28, 0x3d	; 61
     e5a:	de b7       	in	r29, 0x3e	; 62
     e5c:	9b 83       	std	Y+3, r25	; 0x03
     e5e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_idx=0;
     e60:	19 82       	std	Y+1, r1	; 0x01
     e62:	0e c0       	rjmp	.+28     	; 0xe80 <USART_VoidTxString+0x30>
	while(Copy_String[Local_idx] != '\0'){
		USART_VoidTxData(Copy_String[Local_idx]);
     e64:	89 81       	ldd	r24, Y+1	; 0x01
     e66:	28 2f       	mov	r18, r24
     e68:	30 e0       	ldi	r19, 0x00	; 0
     e6a:	8a 81       	ldd	r24, Y+2	; 0x02
     e6c:	9b 81       	ldd	r25, Y+3	; 0x03
     e6e:	fc 01       	movw	r30, r24
     e70:	e2 0f       	add	r30, r18
     e72:	f3 1f       	adc	r31, r19
     e74:	80 81       	ld	r24, Z
     e76:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <USART_VoidTxData>
		Local_idx ++;
     e7a:	89 81       	ldd	r24, Y+1	; 0x01
     e7c:	8f 5f       	subi	r24, 0xFF	; 255
     e7e:	89 83       	std	Y+1, r24	; 0x01
	return UDR;
}

void USART_VoidTxString(u8* Copy_String){
	u8 Local_idx=0;
	while(Copy_String[Local_idx] != '\0'){
     e80:	89 81       	ldd	r24, Y+1	; 0x01
     e82:	28 2f       	mov	r18, r24
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	8a 81       	ldd	r24, Y+2	; 0x02
     e88:	9b 81       	ldd	r25, Y+3	; 0x03
     e8a:	fc 01       	movw	r30, r24
     e8c:	e2 0f       	add	r30, r18
     e8e:	f3 1f       	adc	r31, r19
     e90:	80 81       	ld	r24, Z
     e92:	88 23       	and	r24, r24
     e94:	39 f7       	brne	.-50     	; 0xe64 <USART_VoidTxString+0x14>
		USART_VoidTxData(Copy_String[Local_idx]);
		Local_idx ++;
	}
}
     e96:	0f 90       	pop	r0
     e98:	0f 90       	pop	r0
     e9a:	0f 90       	pop	r0
     e9c:	cf 91       	pop	r28
     e9e:	df 91       	pop	r29
     ea0:	08 95       	ret

00000ea2 <TIMER_Timer0Init>:
		1 0 0 	clkT2S/64 (From prescaler)
		1 0 1 	clkT2S/128 (From prescaler)
		1 1 0 	clkT2S/256 (From prescaler)
		1 1 1 	clkT2S/1024 (From prescaler)
  */
void TIMER_Timer0Init(u8 Copy_Mode,u8 Copy_Prescaller){
     ea2:	df 93       	push	r29
     ea4:	cf 93       	push	r28
     ea6:	00 d0       	rcall	.+0      	; 0xea8 <TIMER_Timer0Init+0x6>
     ea8:	00 d0       	rcall	.+0      	; 0xeaa <TIMER_Timer0Init+0x8>
     eaa:	0f 92       	push	r0
     eac:	cd b7       	in	r28, 0x3d	; 61
     eae:	de b7       	in	r29, 0x3e	; 62
     eb0:	8a 83       	std	Y+2, r24	; 0x02
     eb2:	6b 83       	std	Y+3, r22	; 0x03

	//Clearing bit 6 in TCCR0 for both Modes
	CLR_Bit(TCCR0,6);
     eb4:	a3 e5       	ldi	r26, 0x53	; 83
     eb6:	b0 e0       	ldi	r27, 0x00	; 0
     eb8:	e3 e5       	ldi	r30, 0x53	; 83
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	8f 7b       	andi	r24, 0xBF	; 191
     ec0:	8c 93       	st	X, r24
	switch (Copy_Mode) {
     ec2:	8a 81       	ldd	r24, Y+2	; 0x02
     ec4:	28 2f       	mov	r18, r24
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	3d 83       	std	Y+5, r19	; 0x05
     eca:	2c 83       	std	Y+4, r18	; 0x04
     ecc:	8c 81       	ldd	r24, Y+4	; 0x04
     ece:	9d 81       	ldd	r25, Y+5	; 0x05
     ed0:	00 97       	sbiw	r24, 0x00	; 0
     ed2:	31 f0       	breq	.+12     	; 0xee0 <TIMER_Timer0Init+0x3e>
     ed4:	2c 81       	ldd	r18, Y+4	; 0x04
     ed6:	3d 81       	ldd	r19, Y+5	; 0x05
     ed8:	21 30       	cpi	r18, 0x01	; 1
     eda:	31 05       	cpc	r19, r1
     edc:	c9 f0       	breq	.+50     	; 0xf10 <TIMER_Timer0Init+0x6e>
     ede:	30 c0       	rjmp	.+96     	; 0xf40 <TIMER_Timer0Init+0x9e>
		case NORMAL:
			CLR_Bit(TCCR0,3);
     ee0:	a3 e5       	ldi	r26, 0x53	; 83
     ee2:	b0 e0       	ldi	r27, 0x00	; 0
     ee4:	e3 e5       	ldi	r30, 0x53	; 83
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 81       	ld	r24, Z
     eea:	87 7f       	andi	r24, 0xF7	; 247
     eec:	8c 93       	st	X, r24
			//Enable OverFlow Interrupt
			Set_Bit(TIMSK,0);
     eee:	a9 e5       	ldi	r26, 0x59	; 89
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	e9 e5       	ldi	r30, 0x59	; 89
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	81 60       	ori	r24, 0x01	; 1
     efa:	8c 93       	st	X, r24
			//Disable CTC Interrupt
			CLR_Bit(TIMSK,1);
     efc:	a9 e5       	ldi	r26, 0x59	; 89
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	e9 e5       	ldi	r30, 0x59	; 89
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	8d 7f       	andi	r24, 0xFD	; 253
     f08:	8c 93       	st	X, r24
			Mode_flag = 0;
     f0a:	10 92 88 01 	sts	0x0188, r1
     f0e:	18 c0       	rjmp	.+48     	; 0xf40 <TIMER_Timer0Init+0x9e>
			break;
		case CTC:
			Set_Bit(TCCR0,3);
     f10:	a3 e5       	ldi	r26, 0x53	; 83
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	e3 e5       	ldi	r30, 0x53	; 83
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	88 60       	ori	r24, 0x08	; 8
     f1c:	8c 93       	st	X, r24
			//Enable CTC Interrupt
			Set_Bit(TIMSK,1);
     f1e:	a9 e5       	ldi	r26, 0x59	; 89
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	e9 e5       	ldi	r30, 0x59	; 89
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	82 60       	ori	r24, 0x02	; 2
     f2a:	8c 93       	st	X, r24
			//Disable OverFlow Interrupt
			CLR_Bit(TIMSK,0);
     f2c:	a9 e5       	ldi	r26, 0x59	; 89
     f2e:	b0 e0       	ldi	r27, 0x00	; 0
     f30:	e9 e5       	ldi	r30, 0x59	; 89
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	8e 7f       	andi	r24, 0xFE	; 254
     f38:	8c 93       	st	X, r24
			Mode_flag = 1;
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	80 93 88 01 	sts	0x0188, r24
			break;
	}
	//Set Prescaller Value
	for(u8 i=0;i<3;i++){
     f40:	19 82       	std	Y+1, r1	; 0x01
     f42:	39 c0       	rjmp	.+114    	; 0xfb6 <TIMER_Timer0Init+0x114>
		if((Copy_Prescaller%10)==1)
     f44:	8b 81       	ldd	r24, Y+3	; 0x03
     f46:	9a e0       	ldi	r25, 0x0A	; 10
     f48:	69 2f       	mov	r22, r25
     f4a:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <__udivmodqi4>
     f4e:	89 2f       	mov	r24, r25
     f50:	81 30       	cpi	r24, 0x01	; 1
     f52:	a1 f4       	brne	.+40     	; 0xf7c <TIMER_Timer0Init+0xda>
			Set_Bit(TCCR0,i);
     f54:	a3 e5       	ldi	r26, 0x53	; 83
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	e3 e5       	ldi	r30, 0x53	; 83
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	48 2f       	mov	r20, r24
     f60:	89 81       	ldd	r24, Y+1	; 0x01
     f62:	28 2f       	mov	r18, r24
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	02 2e       	mov	r0, r18
     f6c:	02 c0       	rjmp	.+4      	; 0xf72 <TIMER_Timer0Init+0xd0>
     f6e:	88 0f       	add	r24, r24
     f70:	99 1f       	adc	r25, r25
     f72:	0a 94       	dec	r0
     f74:	e2 f7       	brpl	.-8      	; 0xf6e <TIMER_Timer0Init+0xcc>
     f76:	84 2b       	or	r24, r20
     f78:	8c 93       	st	X, r24
     f7a:	14 c0       	rjmp	.+40     	; 0xfa4 <TIMER_Timer0Init+0x102>
		else
			CLR_Bit(TCCR0,i);
     f7c:	a3 e5       	ldi	r26, 0x53	; 83
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	e3 e5       	ldi	r30, 0x53	; 83
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	48 2f       	mov	r20, r24
     f88:	89 81       	ldd	r24, Y+1	; 0x01
     f8a:	28 2f       	mov	r18, r24
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	02 2e       	mov	r0, r18
     f94:	02 c0       	rjmp	.+4      	; 0xf9a <TIMER_Timer0Init+0xf8>
     f96:	88 0f       	add	r24, r24
     f98:	99 1f       	adc	r25, r25
     f9a:	0a 94       	dec	r0
     f9c:	e2 f7       	brpl	.-8      	; 0xf96 <TIMER_Timer0Init+0xf4>
     f9e:	80 95       	com	r24
     fa0:	84 23       	and	r24, r20
     fa2:	8c 93       	st	X, r24
		Copy_Prescaller = Copy_Prescaller /10;
     fa4:	8b 81       	ldd	r24, Y+3	; 0x03
     fa6:	9a e0       	ldi	r25, 0x0A	; 10
     fa8:	69 2f       	mov	r22, r25
     faa:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <__udivmodqi4>
     fae:	8b 83       	std	Y+3, r24	; 0x03
			CLR_Bit(TIMSK,0);
			Mode_flag = 1;
			break;
	}
	//Set Prescaller Value
	for(u8 i=0;i<3;i++){
     fb0:	89 81       	ldd	r24, Y+1	; 0x01
     fb2:	8f 5f       	subi	r24, 0xFF	; 255
     fb4:	89 83       	std	Y+1, r24	; 0x01
     fb6:	89 81       	ldd	r24, Y+1	; 0x01
     fb8:	83 30       	cpi	r24, 0x03	; 3
     fba:	20 f2       	brcs	.-120    	; 0xf44 <TIMER_Timer0Init+0xa2>
			Set_Bit(TCCR0,i);
		else
			CLR_Bit(TCCR0,i);
		Copy_Prescaller = Copy_Prescaller /10;
	}
}
     fbc:	0f 90       	pop	r0
     fbe:	0f 90       	pop	r0
     fc0:	0f 90       	pop	r0
     fc2:	0f 90       	pop	r0
     fc4:	0f 90       	pop	r0
     fc6:	cf 91       	pop	r28
     fc8:	df 91       	pop	r29
     fca:	08 95       	ret

00000fcc <TIMER_Timer0RegValue>:

void TIMER_Timer0RegValue(u8 Copy_Preload_Compare_Value){
     fcc:	df 93       	push	r29
     fce:	cf 93       	push	r28
     fd0:	00 d0       	rcall	.+0      	; 0xfd2 <TIMER_Timer0RegValue+0x6>
     fd2:	0f 92       	push	r0
     fd4:	cd b7       	in	r28, 0x3d	; 61
     fd6:	de b7       	in	r29, 0x3e	; 62
     fd8:	89 83       	std	Y+1, r24	; 0x01
	switch (Mode_flag){
     fda:	80 91 88 01 	lds	r24, 0x0188
     fde:	28 2f       	mov	r18, r24
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	3b 83       	std	Y+3, r19	; 0x03
     fe4:	2a 83       	std	Y+2, r18	; 0x02
     fe6:	8a 81       	ldd	r24, Y+2	; 0x02
     fe8:	9b 81       	ldd	r25, Y+3	; 0x03
     fea:	00 97       	sbiw	r24, 0x00	; 0
     fec:	31 f0       	breq	.+12     	; 0xffa <TIMER_Timer0RegValue+0x2e>
     fee:	2a 81       	ldd	r18, Y+2	; 0x02
     ff0:	3b 81       	ldd	r19, Y+3	; 0x03
     ff2:	21 30       	cpi	r18, 0x01	; 1
     ff4:	31 05       	cpc	r19, r1
     ff6:	31 f0       	breq	.+12     	; 0x1004 <TIMER_Timer0RegValue+0x38>
     ff8:	09 c0       	rjmp	.+18     	; 0x100c <TIMER_Timer0RegValue+0x40>
		case 0:
			//Set Preload Value
			TCNT0=Copy_Preload_Compare_Value;
     ffa:	e2 e5       	ldi	r30, 0x52	; 82
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	89 81       	ldd	r24, Y+1	; 0x01
    1000:	80 83       	st	Z, r24
    1002:	04 c0       	rjmp	.+8      	; 0x100c <TIMER_Timer0RegValue+0x40>
			break;
		case 1:
			//set Compare Match Value
			OCR0 = Copy_Preload_Compare_Value;
    1004:	ec e5       	ldi	r30, 0x5C	; 92
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	89 81       	ldd	r24, Y+1	; 0x01
    100a:	80 83       	st	Z, r24
	}
}
    100c:	0f 90       	pop	r0
    100e:	0f 90       	pop	r0
    1010:	0f 90       	pop	r0
    1012:	cf 91       	pop	r28
    1014:	df 91       	pop	r29
    1016:	08 95       	ret

00001018 <TIMER_VoidTimer0ISR_Normal>:



void TIMER_VoidTimer0ISR_Normal(void(*ISR11_PTR)(void)){
    1018:	df 93       	push	r29
    101a:	cf 93       	push	r28
    101c:	00 d0       	rcall	.+0      	; 0x101e <TIMER_VoidTimer0ISR_Normal+0x6>
    101e:	cd b7       	in	r28, 0x3d	; 61
    1020:	de b7       	in	r29, 0x3e	; 62
    1022:	9a 83       	std	Y+2, r25	; 0x02
    1024:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_Normal_ISR_PTR = ISR11_PTR;
    1026:	89 81       	ldd	r24, Y+1	; 0x01
    1028:	9a 81       	ldd	r25, Y+2	; 0x02
    102a:	90 93 83 01 	sts	0x0183, r25
    102e:	80 93 82 01 	sts	0x0182, r24
}
    1032:	0f 90       	pop	r0
    1034:	0f 90       	pop	r0
    1036:	cf 91       	pop	r28
    1038:	df 91       	pop	r29
    103a:	08 95       	ret

0000103c <TIMER_VoidTimer0ISR_CTC>:



void TIMER_VoidTimer0ISR_CTC(void(*ISR10_PTR)(void)){
    103c:	df 93       	push	r29
    103e:	cf 93       	push	r28
    1040:	00 d0       	rcall	.+0      	; 0x1042 <TIMER_VoidTimer0ISR_CTC+0x6>
    1042:	cd b7       	in	r28, 0x3d	; 61
    1044:	de b7       	in	r29, 0x3e	; 62
    1046:	9a 83       	std	Y+2, r25	; 0x02
    1048:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_CTC_ISR_PTR = ISR10_PTR;
    104a:	89 81       	ldd	r24, Y+1	; 0x01
    104c:	9a 81       	ldd	r25, Y+2	; 0x02
    104e:	90 93 85 01 	sts	0x0185, r25
    1052:	80 93 84 01 	sts	0x0184, r24
}
    1056:	0f 90       	pop	r0
    1058:	0f 90       	pop	r0
    105a:	cf 91       	pop	r28
    105c:	df 91       	pop	r29
    105e:	08 95       	ret

00001060 <TIMER_delay_ms>:



void TIMER_delay_ms(u32 Copy_delayTime){
    1060:	df 93       	push	r29
    1062:	cf 93       	push	r28
    1064:	cd b7       	in	r28, 0x3d	; 61
    1066:	de b7       	in	r29, 0x3e	; 62
    1068:	2a 97       	sbiw	r28, 0x0a	; 10
    106a:	0f b6       	in	r0, 0x3f	; 63
    106c:	f8 94       	cli
    106e:	de bf       	out	0x3e, r29	; 62
    1070:	0f be       	out	0x3f, r0	; 63
    1072:	cd bf       	out	0x3d, r28	; 61
    1074:	6f 83       	std	Y+7, r22	; 0x07
    1076:	78 87       	std	Y+8, r23	; 0x08
    1078:	89 87       	std	Y+9, r24	; 0x09
    107a:	9a 87       	std	Y+10, r25	; 0x0a
	for(u32 count2=0;count2<Copy_delayTime;count2++){
    107c:	1b 82       	std	Y+3, r1	; 0x03
    107e:	1c 82       	std	Y+4, r1	; 0x04
    1080:	1d 82       	std	Y+5, r1	; 0x05
    1082:	1e 82       	std	Y+6, r1	; 0x06
    1084:	19 c0       	rjmp	.+50     	; 0x10b8 <TIMER_delay_ms+0x58>
	for(u16 count1=0;count1<350;count1++){}
    1086:	1a 82       	std	Y+2, r1	; 0x02
    1088:	19 82       	std	Y+1, r1	; 0x01
    108a:	05 c0       	rjmp	.+10     	; 0x1096 <TIMER_delay_ms+0x36>
    108c:	89 81       	ldd	r24, Y+1	; 0x01
    108e:	9a 81       	ldd	r25, Y+2	; 0x02
    1090:	01 96       	adiw	r24, 0x01	; 1
    1092:	9a 83       	std	Y+2, r25	; 0x02
    1094:	89 83       	std	Y+1, r24	; 0x01
    1096:	89 81       	ldd	r24, Y+1	; 0x01
    1098:	9a 81       	ldd	r25, Y+2	; 0x02
    109a:	21 e0       	ldi	r18, 0x01	; 1
    109c:	8e 35       	cpi	r24, 0x5E	; 94
    109e:	92 07       	cpc	r25, r18
    10a0:	a8 f3       	brcs	.-22     	; 0x108c <TIMER_delay_ms+0x2c>
}



void TIMER_delay_ms(u32 Copy_delayTime){
	for(u32 count2=0;count2<Copy_delayTime;count2++){
    10a2:	8b 81       	ldd	r24, Y+3	; 0x03
    10a4:	9c 81       	ldd	r25, Y+4	; 0x04
    10a6:	ad 81       	ldd	r26, Y+5	; 0x05
    10a8:	be 81       	ldd	r27, Y+6	; 0x06
    10aa:	01 96       	adiw	r24, 0x01	; 1
    10ac:	a1 1d       	adc	r26, r1
    10ae:	b1 1d       	adc	r27, r1
    10b0:	8b 83       	std	Y+3, r24	; 0x03
    10b2:	9c 83       	std	Y+4, r25	; 0x04
    10b4:	ad 83       	std	Y+5, r26	; 0x05
    10b6:	be 83       	std	Y+6, r27	; 0x06
    10b8:	2b 81       	ldd	r18, Y+3	; 0x03
    10ba:	3c 81       	ldd	r19, Y+4	; 0x04
    10bc:	4d 81       	ldd	r20, Y+5	; 0x05
    10be:	5e 81       	ldd	r21, Y+6	; 0x06
    10c0:	8f 81       	ldd	r24, Y+7	; 0x07
    10c2:	98 85       	ldd	r25, Y+8	; 0x08
    10c4:	a9 85       	ldd	r26, Y+9	; 0x09
    10c6:	ba 85       	ldd	r27, Y+10	; 0x0a
    10c8:	28 17       	cp	r18, r24
    10ca:	39 07       	cpc	r19, r25
    10cc:	4a 07       	cpc	r20, r26
    10ce:	5b 07       	cpc	r21, r27
    10d0:	d0 f2       	brcs	.-76     	; 0x1086 <TIMER_delay_ms+0x26>
	for(u16 count1=0;count1<350;count1++){}
	}
}
    10d2:	2a 96       	adiw	r28, 0x0a	; 10
    10d4:	0f b6       	in	r0, 0x3f	; 63
    10d6:	f8 94       	cli
    10d8:	de bf       	out	0x3e, r29	; 62
    10da:	0f be       	out	0x3f, r0	; 63
    10dc:	cd bf       	out	0x3d, r28	; 61
    10de:	cf 91       	pop	r28
    10e0:	df 91       	pop	r29
    10e2:	08 95       	ret

000010e4 <TIMER_VoidTimer2FastPWM>:

void TIMER_VoidTimer2FastPWM(void){
    10e4:	df 93       	push	r29
    10e6:	cf 93       	push	r28
    10e8:	cd b7       	in	r28, 0x3d	; 61
    10ea:	de b7       	in	r29, 0x3e	; 62
	//Set Fast PWM Mode
	Set_Bit(TCCR2,6);
    10ec:	a5 e4       	ldi	r26, 0x45	; 69
    10ee:	b0 e0       	ldi	r27, 0x00	; 0
    10f0:	e5 e4       	ldi	r30, 0x45	; 69
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	80 64       	ori	r24, 0x40	; 64
    10f8:	8c 93       	st	X, r24
	Set_Bit(TCCR2,3);
    10fa:	a5 e4       	ldi	r26, 0x45	; 69
    10fc:	b0 e0       	ldi	r27, 0x00	; 0
    10fe:	e5 e4       	ldi	r30, 0x45	; 69
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	80 81       	ld	r24, Z
    1104:	88 60       	ori	r24, 0x08	; 8
    1106:	8c 93       	st	X, r24

	//Set Prescaller ==>8
	CLR_Bit(TCCR2,2);
    1108:	a5 e4       	ldi	r26, 0x45	; 69
    110a:	b0 e0       	ldi	r27, 0x00	; 0
    110c:	e5 e4       	ldi	r30, 0x45	; 69
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	8b 7f       	andi	r24, 0xFB	; 251
    1114:	8c 93       	st	X, r24
	Set_Bit(TCCR2,1);
    1116:	a5 e4       	ldi	r26, 0x45	; 69
    1118:	b0 e0       	ldi	r27, 0x00	; 0
    111a:	e5 e4       	ldi	r30, 0x45	; 69
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	80 81       	ld	r24, Z
    1120:	82 60       	ori	r24, 0x02	; 2
    1122:	8c 93       	st	X, r24
	CLR_Bit(TCCR2,0);
    1124:	a5 e4       	ldi	r26, 0x45	; 69
    1126:	b0 e0       	ldi	r27, 0x00	; 0
    1128:	e5 e4       	ldi	r30, 0x45	; 69
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	8e 7f       	andi	r24, 0xFE	; 254
    1130:	8c 93       	st	X, r24

	//Normal(Non-Inverted) Mode  Clear on Compare and Set at top
	//Normal Increasing Compare Match, Increase Duty Cycle (Increase Ton)
	Set_Bit(TCCR2,5);
    1132:	a5 e4       	ldi	r26, 0x45	; 69
    1134:	b0 e0       	ldi	r27, 0x00	; 0
    1136:	e5 e4       	ldi	r30, 0x45	; 69
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	80 81       	ld	r24, Z
    113c:	80 62       	ori	r24, 0x20	; 32
    113e:	8c 93       	st	X, r24
	CLR_Bit(TCCR2,4);
    1140:	a5 e4       	ldi	r26, 0x45	; 69
    1142:	b0 e0       	ldi	r27, 0x00	; 0
    1144:	e5 e4       	ldi	r30, 0x45	; 69
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	80 81       	ld	r24, Z
    114a:	8f 7e       	andi	r24, 0xEF	; 239
    114c:	8c 93       	st	X, r24

}
    114e:	cf 91       	pop	r28
    1150:	df 91       	pop	r29
    1152:	08 95       	ret

00001154 <TIMER_VoidTimer2FastPWMCompareValue>:


void TIMER_VoidTimer2FastPWMCompareValue(u8 Copy_u8CompareMatchValue){
    1154:	df 93       	push	r29
    1156:	cf 93       	push	r28
    1158:	0f 92       	push	r0
    115a:	cd b7       	in	r28, 0x3d	; 61
    115c:	de b7       	in	r29, 0x3e	; 62
    115e:	89 83       	std	Y+1, r24	; 0x01
	OCR2=Copy_u8CompareMatchValue;
    1160:	e3 e4       	ldi	r30, 0x43	; 67
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	89 81       	ldd	r24, Y+1	; 0x01
    1166:	80 83       	st	Z, r24
}
    1168:	0f 90       	pop	r0
    116a:	cf 91       	pop	r28
    116c:	df 91       	pop	r29
    116e:	08 95       	ret

00001170 <TIMER_VoidTimer1Init>:


void TIMER_VoidTimer1Init(u8 Copy_Mode, u8 Copy_Prescaller){
    1170:	df 93       	push	r29
    1172:	cf 93       	push	r28
    1174:	00 d0       	rcall	.+0      	; 0x1176 <TIMER_VoidTimer1Init+0x6>
    1176:	00 d0       	rcall	.+0      	; 0x1178 <TIMER_VoidTimer1Init+0x8>
    1178:	0f 92       	push	r0
    117a:	cd b7       	in	r28, 0x3d	; 61
    117c:	de b7       	in	r29, 0x3e	; 62
    117e:	8a 83       	std	Y+2, r24	; 0x02
    1180:	6b 83       	std	Y+3, r22	; 0x03
	//Set Prescaller Value
	for(u8 i=0;i<3;i++){
    1182:	19 82       	std	Y+1, r1	; 0x01
    1184:	39 c0       	rjmp	.+114    	; 0x11f8 <TIMER_VoidTimer1Init+0x88>
		if((Copy_Prescaller%10)==1)
    1186:	8b 81       	ldd	r24, Y+3	; 0x03
    1188:	9a e0       	ldi	r25, 0x0A	; 10
    118a:	69 2f       	mov	r22, r25
    118c:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <__udivmodqi4>
    1190:	89 2f       	mov	r24, r25
    1192:	81 30       	cpi	r24, 0x01	; 1
    1194:	a1 f4       	brne	.+40     	; 0x11be <TIMER_VoidTimer1Init+0x4e>
			Set_Bit(TCCR1B,i);
    1196:	ae e4       	ldi	r26, 0x4E	; 78
    1198:	b0 e0       	ldi	r27, 0x00	; 0
    119a:	ee e4       	ldi	r30, 0x4E	; 78
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	80 81       	ld	r24, Z
    11a0:	48 2f       	mov	r20, r24
    11a2:	89 81       	ldd	r24, Y+1	; 0x01
    11a4:	28 2f       	mov	r18, r24
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	02 2e       	mov	r0, r18
    11ae:	02 c0       	rjmp	.+4      	; 0x11b4 <TIMER_VoidTimer1Init+0x44>
    11b0:	88 0f       	add	r24, r24
    11b2:	99 1f       	adc	r25, r25
    11b4:	0a 94       	dec	r0
    11b6:	e2 f7       	brpl	.-8      	; 0x11b0 <TIMER_VoidTimer1Init+0x40>
    11b8:	84 2b       	or	r24, r20
    11ba:	8c 93       	st	X, r24
    11bc:	14 c0       	rjmp	.+40     	; 0x11e6 <TIMER_VoidTimer1Init+0x76>
		else
			CLR_Bit(TCCR1B,i);
    11be:	ae e4       	ldi	r26, 0x4E	; 78
    11c0:	b0 e0       	ldi	r27, 0x00	; 0
    11c2:	ee e4       	ldi	r30, 0x4E	; 78
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	80 81       	ld	r24, Z
    11c8:	48 2f       	mov	r20, r24
    11ca:	89 81       	ldd	r24, Y+1	; 0x01
    11cc:	28 2f       	mov	r18, r24
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	02 2e       	mov	r0, r18
    11d6:	02 c0       	rjmp	.+4      	; 0x11dc <TIMER_VoidTimer1Init+0x6c>
    11d8:	88 0f       	add	r24, r24
    11da:	99 1f       	adc	r25, r25
    11dc:	0a 94       	dec	r0
    11de:	e2 f7       	brpl	.-8      	; 0x11d8 <TIMER_VoidTimer1Init+0x68>
    11e0:	80 95       	com	r24
    11e2:	84 23       	and	r24, r20
    11e4:	8c 93       	st	X, r24
		Copy_Prescaller = Copy_Prescaller /10;
    11e6:	8b 81       	ldd	r24, Y+3	; 0x03
    11e8:	9a e0       	ldi	r25, 0x0A	; 10
    11ea:	69 2f       	mov	r22, r25
    11ec:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <__udivmodqi4>
    11f0:	8b 83       	std	Y+3, r24	; 0x03
}


void TIMER_VoidTimer1Init(u8 Copy_Mode, u8 Copy_Prescaller){
	//Set Prescaller Value
	for(u8 i=0;i<3;i++){
    11f2:	89 81       	ldd	r24, Y+1	; 0x01
    11f4:	8f 5f       	subi	r24, 0xFF	; 255
    11f6:	89 83       	std	Y+1, r24	; 0x01
    11f8:	89 81       	ldd	r24, Y+1	; 0x01
    11fa:	83 30       	cpi	r24, 0x03	; 3
    11fc:	20 f2       	brcs	.-120    	; 0x1186 <TIMER_VoidTimer1Init+0x16>
			Set_Bit(TCCR1B,i);
		else
			CLR_Bit(TCCR1B,i);
		Copy_Prescaller = Copy_Prescaller /10;
	}
	switch(Copy_Mode){
    11fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1200:	28 2f       	mov	r18, r24
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	3d 83       	std	Y+5, r19	; 0x05
    1206:	2c 83       	std	Y+4, r18	; 0x04
    1208:	8c 81       	ldd	r24, Y+4	; 0x04
    120a:	9d 81       	ldd	r25, Y+5	; 0x05
    120c:	00 97       	sbiw	r24, 0x00	; 0
    120e:	31 f0       	breq	.+12     	; 0x121c <TIMER_VoidTimer1Init+0xac>
    1210:	2c 81       	ldd	r18, Y+4	; 0x04
    1212:	3d 81       	ldd	r19, Y+5	; 0x05
    1214:	22 30       	cpi	r18, 0x02	; 2
    1216:	31 05       	cpc	r19, r1
    1218:	f1 f0       	breq	.+60     	; 0x1256 <TIMER_VoidTimer1Init+0xe6>
    121a:	47 c0       	rjmp	.+142    	; 0x12aa <TIMER_VoidTimer1Init+0x13a>
		case NORMAL:
			CLR_Bit(TCCR1A,0);
    121c:	af e4       	ldi	r26, 0x4F	; 79
    121e:	b0 e0       	ldi	r27, 0x00	; 0
    1220:	ef e4       	ldi	r30, 0x4F	; 79
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	80 81       	ld	r24, Z
    1226:	8e 7f       	andi	r24, 0xFE	; 254
    1228:	8c 93       	st	X, r24
			CLR_Bit(TCCR1A,1);
    122a:	af e4       	ldi	r26, 0x4F	; 79
    122c:	b0 e0       	ldi	r27, 0x00	; 0
    122e:	ef e4       	ldi	r30, 0x4F	; 79
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	80 81       	ld	r24, Z
    1234:	8d 7f       	andi	r24, 0xFD	; 253
    1236:	8c 93       	st	X, r24
			CLR_Bit(TCCR1B,3);
    1238:	ae e4       	ldi	r26, 0x4E	; 78
    123a:	b0 e0       	ldi	r27, 0x00	; 0
    123c:	ee e4       	ldi	r30, 0x4E	; 78
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	80 81       	ld	r24, Z
    1242:	87 7f       	andi	r24, 0xF7	; 247
    1244:	8c 93       	st	X, r24
			CLR_Bit(TCCR1B,4);
    1246:	ae e4       	ldi	r26, 0x4E	; 78
    1248:	b0 e0       	ldi	r27, 0x00	; 0
    124a:	ee e4       	ldi	r30, 0x4E	; 78
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	80 81       	ld	r24, Z
    1250:	8f 7e       	andi	r24, 0xEF	; 239
    1252:	8c 93       	st	X, r24
    1254:	2a c0       	rjmp	.+84     	; 0x12aa <TIMER_VoidTimer1Init+0x13a>
			break;
		case PWM:
			//Set PWM Mode Clear on compare Set at top
			CLR_Bit(TCCR1A,6);
    1256:	af e4       	ldi	r26, 0x4F	; 79
    1258:	b0 e0       	ldi	r27, 0x00	; 0
    125a:	ef e4       	ldi	r30, 0x4F	; 79
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	80 81       	ld	r24, Z
    1260:	8f 7b       	andi	r24, 0xBF	; 191
    1262:	8c 93       	st	X, r24
			Set_Bit(TCCR1A,7);
    1264:	af e4       	ldi	r26, 0x4F	; 79
    1266:	b0 e0       	ldi	r27, 0x00	; 0
    1268:	ef e4       	ldi	r30, 0x4F	; 79
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	80 81       	ld	r24, Z
    126e:	80 68       	ori	r24, 0x80	; 128
    1270:	8c 93       	st	X, r24

			//Set Mode 14
			CLR_Bit(TCCR1A,0);
    1272:	af e4       	ldi	r26, 0x4F	; 79
    1274:	b0 e0       	ldi	r27, 0x00	; 0
    1276:	ef e4       	ldi	r30, 0x4F	; 79
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	80 81       	ld	r24, Z
    127c:	8e 7f       	andi	r24, 0xFE	; 254
    127e:	8c 93       	st	X, r24
			Set_Bit(TCCR1A,1);
    1280:	af e4       	ldi	r26, 0x4F	; 79
    1282:	b0 e0       	ldi	r27, 0x00	; 0
    1284:	ef e4       	ldi	r30, 0x4F	; 79
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	80 81       	ld	r24, Z
    128a:	82 60       	ori	r24, 0x02	; 2
    128c:	8c 93       	st	X, r24
			Set_Bit(TCCR1B,3);
    128e:	ae e4       	ldi	r26, 0x4E	; 78
    1290:	b0 e0       	ldi	r27, 0x00	; 0
    1292:	ee e4       	ldi	r30, 0x4E	; 78
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	80 81       	ld	r24, Z
    1298:	88 60       	ori	r24, 0x08	; 8
    129a:	8c 93       	st	X, r24
			Set_Bit(TCCR1B,4);
    129c:	ae e4       	ldi	r26, 0x4E	; 78
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	ee e4       	ldi	r30, 0x4E	; 78
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	80 61       	ori	r24, 0x10	; 16
    12a8:	8c 93       	st	X, r24
			break;
	}

}
    12aa:	0f 90       	pop	r0
    12ac:	0f 90       	pop	r0
    12ae:	0f 90       	pop	r0
    12b0:	0f 90       	pop	r0
    12b2:	0f 90       	pop	r0
    12b4:	cf 91       	pop	r28
    12b6:	df 91       	pop	r29
    12b8:	08 95       	ret

000012ba <TIMER_VoidSetOverFlow>:

void TIMER_VoidSetOverFlow(u16 Copy_u16OverFlow){
    12ba:	df 93       	push	r29
    12bc:	cf 93       	push	r28
    12be:	00 d0       	rcall	.+0      	; 0x12c0 <TIMER_VoidSetOverFlow+0x6>
    12c0:	cd b7       	in	r28, 0x3d	; 61
    12c2:	de b7       	in	r29, 0x3e	; 62
    12c4:	9a 83       	std	Y+2, r25	; 0x02
    12c6:	89 83       	std	Y+1, r24	; 0x01
	ICR1 = Copy_u16OverFlow;
    12c8:	e6 e4       	ldi	r30, 0x46	; 70
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	89 81       	ldd	r24, Y+1	; 0x01
    12ce:	9a 81       	ldd	r25, Y+2	; 0x02
    12d0:	91 83       	std	Z+1, r25	; 0x01
    12d2:	80 83       	st	Z, r24
}
    12d4:	0f 90       	pop	r0
    12d6:	0f 90       	pop	r0
    12d8:	cf 91       	pop	r28
    12da:	df 91       	pop	r29
    12dc:	08 95       	ret

000012de <TIMER_VoidTimer1ChannelASetCompareValue>:

void TIMER_VoidTimer1ChannelASetCompareValue(u16 Copy_u16CompareValue){
    12de:	df 93       	push	r29
    12e0:	cf 93       	push	r28
    12e2:	00 d0       	rcall	.+0      	; 0x12e4 <TIMER_VoidTimer1ChannelASetCompareValue+0x6>
    12e4:	cd b7       	in	r28, 0x3d	; 61
    12e6:	de b7       	in	r29, 0x3e	; 62
    12e8:	9a 83       	std	Y+2, r25	; 0x02
    12ea:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u16CompareValue;
    12ec:	ea e4       	ldi	r30, 0x4A	; 74
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	89 81       	ldd	r24, Y+1	; 0x01
    12f2:	9a 81       	ldd	r25, Y+2	; 0x02
    12f4:	91 83       	std	Z+1, r25	; 0x01
    12f6:	80 83       	st	Z, r24
}
    12f8:	0f 90       	pop	r0
    12fa:	0f 90       	pop	r0
    12fc:	cf 91       	pop	r28
    12fe:	df 91       	pop	r29
    1300:	08 95       	ret

00001302 <TIMER_VoidTimer1SetPreloadValue>:

void TIMER_VoidTimer1SetPreloadValue(u16 Copy_u16Value){
    1302:	df 93       	push	r29
    1304:	cf 93       	push	r28
    1306:	00 d0       	rcall	.+0      	; 0x1308 <TIMER_VoidTimer1SetPreloadValue+0x6>
    1308:	cd b7       	in	r28, 0x3d	; 61
    130a:	de b7       	in	r29, 0x3e	; 62
    130c:	9a 83       	std	Y+2, r25	; 0x02
    130e:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Copy_u16Value;
    1310:	ec e4       	ldi	r30, 0x4C	; 76
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	89 81       	ldd	r24, Y+1	; 0x01
    1316:	9a 81       	ldd	r25, Y+2	; 0x02
    1318:	91 83       	std	Z+1, r25	; 0x01
    131a:	80 83       	st	Z, r24
}
    131c:	0f 90       	pop	r0
    131e:	0f 90       	pop	r0
    1320:	cf 91       	pop	r28
    1322:	df 91       	pop	r29
    1324:	08 95       	ret

00001326 <Timer_u16Timer1GetTimerValue>:

u16 Timer_u16Timer1GetTimerValue(void){
    1326:	df 93       	push	r29
    1328:	cf 93       	push	r28
    132a:	cd b7       	in	r28, 0x3d	; 61
    132c:	de b7       	in	r29, 0x3e	; 62
	return TCNT1;
    132e:	ec e4       	ldi	r30, 0x4C	; 76
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	80 81       	ld	r24, Z
    1334:	91 81       	ldd	r25, Z+1	; 0x01
}
    1336:	cf 91       	pop	r28
    1338:	df 91       	pop	r29
    133a:	08 95       	ret

0000133c <ICU_VoidSetSenseControl>:

void ICU_VoidSetSenseControl(u8 Copy_u8SenseControl){
    133c:	df 93       	push	r29
    133e:	cf 93       	push	r28
    1340:	00 d0       	rcall	.+0      	; 0x1342 <ICU_VoidSetSenseControl+0x6>
    1342:	0f 92       	push	r0
    1344:	cd b7       	in	r28, 0x3d	; 61
    1346:	de b7       	in	r29, 0x3e	; 62
    1348:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8SenseControl){
    134a:	89 81       	ldd	r24, Y+1	; 0x01
    134c:	28 2f       	mov	r18, r24
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	3b 83       	std	Y+3, r19	; 0x03
    1352:	2a 83       	std	Y+2, r18	; 0x02
    1354:	8a 81       	ldd	r24, Y+2	; 0x02
    1356:	9b 81       	ldd	r25, Y+3	; 0x03
    1358:	84 30       	cpi	r24, 0x04	; 4
    135a:	91 05       	cpc	r25, r1
    135c:	31 f0       	breq	.+12     	; 0x136a <ICU_VoidSetSenseControl+0x2e>
    135e:	2a 81       	ldd	r18, Y+2	; 0x02
    1360:	3b 81       	ldd	r19, Y+3	; 0x03
    1362:	25 30       	cpi	r18, 0x05	; 5
    1364:	31 05       	cpc	r19, r1
    1366:	49 f0       	breq	.+18     	; 0x137a <ICU_VoidSetSenseControl+0x3e>
    1368:	0f c0       	rjmp	.+30     	; 0x1388 <ICU_VoidSetSenseControl+0x4c>
		case RISING_EDGE:
			Set_Bit(TCCR1B,6);
    136a:	ae e4       	ldi	r26, 0x4E	; 78
    136c:	b0 e0       	ldi	r27, 0x00	; 0
    136e:	ee e4       	ldi	r30, 0x4E	; 78
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	80 81       	ld	r24, Z
    1374:	80 64       	ori	r24, 0x40	; 64
    1376:	8c 93       	st	X, r24
    1378:	07 c0       	rjmp	.+14     	; 0x1388 <ICU_VoidSetSenseControl+0x4c>
			break;
		case FALLING_EDGE:
			CLR_Bit(TCCR1B,6);
    137a:	ae e4       	ldi	r26, 0x4E	; 78
    137c:	b0 e0       	ldi	r27, 0x00	; 0
    137e:	ee e4       	ldi	r30, 0x4E	; 78
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	80 81       	ld	r24, Z
    1384:	8f 7b       	andi	r24, 0xBF	; 191
    1386:	8c 93       	st	X, r24
			break;
	}
}
    1388:	0f 90       	pop	r0
    138a:	0f 90       	pop	r0
    138c:	0f 90       	pop	r0
    138e:	cf 91       	pop	r28
    1390:	df 91       	pop	r29
    1392:	08 95       	ret

00001394 <ICU_VoidInterruptControl>:

void ICU_VoidInterruptControl(u8 Copy_u8InterruptState){
    1394:	df 93       	push	r29
    1396:	cf 93       	push	r28
    1398:	00 d0       	rcall	.+0      	; 0x139a <ICU_VoidInterruptControl+0x6>
    139a:	0f 92       	push	r0
    139c:	cd b7       	in	r28, 0x3d	; 61
    139e:	de b7       	in	r29, 0x3e	; 62
    13a0:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8InterruptState){
    13a2:	89 81       	ldd	r24, Y+1	; 0x01
    13a4:	28 2f       	mov	r18, r24
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	3b 83       	std	Y+3, r19	; 0x03
    13aa:	2a 83       	std	Y+2, r18	; 0x02
    13ac:	8a 81       	ldd	r24, Y+2	; 0x02
    13ae:	9b 81       	ldd	r25, Y+3	; 0x03
    13b0:	82 30       	cpi	r24, 0x02	; 2
    13b2:	91 05       	cpc	r25, r1
    13b4:	31 f0       	breq	.+12     	; 0x13c2 <ICU_VoidInterruptControl+0x2e>
    13b6:	2a 81       	ldd	r18, Y+2	; 0x02
    13b8:	3b 81       	ldd	r19, Y+3	; 0x03
    13ba:	23 30       	cpi	r18, 0x03	; 3
    13bc:	31 05       	cpc	r19, r1
    13be:	49 f0       	breq	.+18     	; 0x13d2 <ICU_VoidInterruptControl+0x3e>
    13c0:	0f c0       	rjmp	.+30     	; 0x13e0 <ICU_VoidInterruptControl+0x4c>
		case ENABLE:
			Set_Bit(TIMSK,5);
    13c2:	a9 e5       	ldi	r26, 0x59	; 89
    13c4:	b0 e0       	ldi	r27, 0x00	; 0
    13c6:	e9 e5       	ldi	r30, 0x59	; 89
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	80 81       	ld	r24, Z
    13cc:	80 62       	ori	r24, 0x20	; 32
    13ce:	8c 93       	st	X, r24
    13d0:	07 c0       	rjmp	.+14     	; 0x13e0 <ICU_VoidInterruptControl+0x4c>
			break;
		case DISABLE:
			CLR_Bit(TIMSK,5);
    13d2:	a9 e5       	ldi	r26, 0x59	; 89
    13d4:	b0 e0       	ldi	r27, 0x00	; 0
    13d6:	e9 e5       	ldi	r30, 0x59	; 89
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	80 81       	ld	r24, Z
    13dc:	8f 7d       	andi	r24, 0xDF	; 223
    13de:	8c 93       	st	X, r24
			break;
	}
}
    13e0:	0f 90       	pop	r0
    13e2:	0f 90       	pop	r0
    13e4:	0f 90       	pop	r0
    13e6:	cf 91       	pop	r28
    13e8:	df 91       	pop	r29
    13ea:	08 95       	ret

000013ec <ICU_VoidSetCallBackFunction>:

void ICU_VoidSetCallBackFunction(void(*Copy_PTR_ICUFunction)(void)){
    13ec:	df 93       	push	r29
    13ee:	cf 93       	push	r28
    13f0:	00 d0       	rcall	.+0      	; 0x13f2 <ICU_VoidSetCallBackFunction+0x6>
    13f2:	cd b7       	in	r28, 0x3d	; 61
    13f4:	de b7       	in	r29, 0x3e	; 62
    13f6:	9a 83       	std	Y+2, r25	; 0x02
    13f8:	89 83       	std	Y+1, r24	; 0x01
	GLOBAL_ICU_ISR = Copy_PTR_ICUFunction;
    13fa:	89 81       	ldd	r24, Y+1	; 0x01
    13fc:	9a 81       	ldd	r25, Y+2	; 0x02
    13fe:	90 93 87 01 	sts	0x0187, r25
    1402:	80 93 86 01 	sts	0x0186, r24
}
    1406:	0f 90       	pop	r0
    1408:	0f 90       	pop	r0
    140a:	cf 91       	pop	r28
    140c:	df 91       	pop	r29
    140e:	08 95       	ret

00001410 <ICU_u16ReadInputCapture>:

u16 ICU_u16ReadInputCapture(void){
    1410:	df 93       	push	r29
    1412:	cf 93       	push	r28
    1414:	cd b7       	in	r28, 0x3d	; 61
    1416:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    1418:	e6 e4       	ldi	r30, 0x46	; 70
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	80 81       	ld	r24, Z
    141e:	91 81       	ldd	r25, Z+1	; 0x01
}
    1420:	cf 91       	pop	r28
    1422:	df 91       	pop	r29
    1424:	08 95       	ret

00001426 <__vector_11>:



//Normal ISR
void __vector_11(void) __attribute__((signal));  //minus 1 from Datasheet as it should started from 0 not 1
void __vector_11(void){
    1426:	1f 92       	push	r1
    1428:	0f 92       	push	r0
    142a:	0f b6       	in	r0, 0x3f	; 63
    142c:	0f 92       	push	r0
    142e:	11 24       	eor	r1, r1
    1430:	2f 93       	push	r18
    1432:	3f 93       	push	r19
    1434:	4f 93       	push	r20
    1436:	5f 93       	push	r21
    1438:	6f 93       	push	r22
    143a:	7f 93       	push	r23
    143c:	8f 93       	push	r24
    143e:	9f 93       	push	r25
    1440:	af 93       	push	r26
    1442:	bf 93       	push	r27
    1444:	ef 93       	push	r30
    1446:	ff 93       	push	r31
    1448:	df 93       	push	r29
    144a:	cf 93       	push	r28
    144c:	cd b7       	in	r28, 0x3d	; 61
    144e:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_Normal_ISR_PTR!=0x00)
    1450:	80 91 82 01 	lds	r24, 0x0182
    1454:	90 91 83 01 	lds	r25, 0x0183
    1458:	00 97       	sbiw	r24, 0x00	; 0
    145a:	29 f0       	breq	.+10     	; 0x1466 <__vector_11+0x40>
		TIMER0_Normal_ISR_PTR();
    145c:	e0 91 82 01 	lds	r30, 0x0182
    1460:	f0 91 83 01 	lds	r31, 0x0183
    1464:	09 95       	icall
}
    1466:	cf 91       	pop	r28
    1468:	df 91       	pop	r29
    146a:	ff 91       	pop	r31
    146c:	ef 91       	pop	r30
    146e:	bf 91       	pop	r27
    1470:	af 91       	pop	r26
    1472:	9f 91       	pop	r25
    1474:	8f 91       	pop	r24
    1476:	7f 91       	pop	r23
    1478:	6f 91       	pop	r22
    147a:	5f 91       	pop	r21
    147c:	4f 91       	pop	r20
    147e:	3f 91       	pop	r19
    1480:	2f 91       	pop	r18
    1482:	0f 90       	pop	r0
    1484:	0f be       	out	0x3f, r0	; 63
    1486:	0f 90       	pop	r0
    1488:	1f 90       	pop	r1
    148a:	18 95       	reti

0000148c <__vector_10>:

//CTC ISR
void __vector_10(void) __attribute__((signal));  //minus 1 from Datasheet as it should started from 0 not 1
void __vector_10(void){
    148c:	1f 92       	push	r1
    148e:	0f 92       	push	r0
    1490:	0f b6       	in	r0, 0x3f	; 63
    1492:	0f 92       	push	r0
    1494:	11 24       	eor	r1, r1
    1496:	2f 93       	push	r18
    1498:	3f 93       	push	r19
    149a:	4f 93       	push	r20
    149c:	5f 93       	push	r21
    149e:	6f 93       	push	r22
    14a0:	7f 93       	push	r23
    14a2:	8f 93       	push	r24
    14a4:	9f 93       	push	r25
    14a6:	af 93       	push	r26
    14a8:	bf 93       	push	r27
    14aa:	ef 93       	push	r30
    14ac:	ff 93       	push	r31
    14ae:	df 93       	push	r29
    14b0:	cf 93       	push	r28
    14b2:	cd b7       	in	r28, 0x3d	; 61
    14b4:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_CTC_ISR_PTR!=0x00)
    14b6:	80 91 84 01 	lds	r24, 0x0184
    14ba:	90 91 85 01 	lds	r25, 0x0185
    14be:	00 97       	sbiw	r24, 0x00	; 0
    14c0:	29 f0       	breq	.+10     	; 0x14cc <__vector_10+0x40>
		TIMER0_CTC_ISR_PTR();
    14c2:	e0 91 84 01 	lds	r30, 0x0184
    14c6:	f0 91 85 01 	lds	r31, 0x0185
    14ca:	09 95       	icall

}
    14cc:	cf 91       	pop	r28
    14ce:	df 91       	pop	r29
    14d0:	ff 91       	pop	r31
    14d2:	ef 91       	pop	r30
    14d4:	bf 91       	pop	r27
    14d6:	af 91       	pop	r26
    14d8:	9f 91       	pop	r25
    14da:	8f 91       	pop	r24
    14dc:	7f 91       	pop	r23
    14de:	6f 91       	pop	r22
    14e0:	5f 91       	pop	r21
    14e2:	4f 91       	pop	r20
    14e4:	3f 91       	pop	r19
    14e6:	2f 91       	pop	r18
    14e8:	0f 90       	pop	r0
    14ea:	0f be       	out	0x3f, r0	; 63
    14ec:	0f 90       	pop	r0
    14ee:	1f 90       	pop	r1
    14f0:	18 95       	reti

000014f2 <__vector_6>:

//ICU
void __vector_6 (void) __attribute__((signal));
void __vector_6 (void){
    14f2:	1f 92       	push	r1
    14f4:	0f 92       	push	r0
    14f6:	0f b6       	in	r0, 0x3f	; 63
    14f8:	0f 92       	push	r0
    14fa:	11 24       	eor	r1, r1
    14fc:	2f 93       	push	r18
    14fe:	3f 93       	push	r19
    1500:	4f 93       	push	r20
    1502:	5f 93       	push	r21
    1504:	6f 93       	push	r22
    1506:	7f 93       	push	r23
    1508:	8f 93       	push	r24
    150a:	9f 93       	push	r25
    150c:	af 93       	push	r26
    150e:	bf 93       	push	r27
    1510:	ef 93       	push	r30
    1512:	ff 93       	push	r31
    1514:	df 93       	push	r29
    1516:	cf 93       	push	r28
    1518:	cd b7       	in	r28, 0x3d	; 61
    151a:	de b7       	in	r29, 0x3e	; 62
	if(GLOBAL_ICU_ISR!=0x00)
    151c:	80 91 86 01 	lds	r24, 0x0186
    1520:	90 91 87 01 	lds	r25, 0x0187
    1524:	00 97       	sbiw	r24, 0x00	; 0
    1526:	29 f0       	breq	.+10     	; 0x1532 <__vector_6+0x40>
		GLOBAL_ICU_ISR();
    1528:	e0 91 86 01 	lds	r30, 0x0186
    152c:	f0 91 87 01 	lds	r31, 0x0187
    1530:	09 95       	icall
}
    1532:	cf 91       	pop	r28
    1534:	df 91       	pop	r29
    1536:	ff 91       	pop	r31
    1538:	ef 91       	pop	r30
    153a:	bf 91       	pop	r27
    153c:	af 91       	pop	r26
    153e:	9f 91       	pop	r25
    1540:	8f 91       	pop	r24
    1542:	7f 91       	pop	r23
    1544:	6f 91       	pop	r22
    1546:	5f 91       	pop	r21
    1548:	4f 91       	pop	r20
    154a:	3f 91       	pop	r19
    154c:	2f 91       	pop	r18
    154e:	0f 90       	pop	r0
    1550:	0f be       	out	0x3f, r0	; 63
    1552:	0f 90       	pop	r0
    1554:	1f 90       	pop	r1
    1556:	18 95       	reti

00001558 <SPI_MasterInit>:
#include"../../LIB/BIT_MATH.h"
#include"../../LIB/STD_Type.h"

#include"SPI_Interface.h"

void SPI_MasterInit(void){
    1558:	df 93       	push	r29
    155a:	cf 93       	push	r28
    155c:	cd b7       	in	r28, 0x3d	; 61
    155e:	de b7       	in	r29, 0x3e	; 62
	//Master Initialize
	Set_Bit(SPCR,4);
    1560:	ad e2       	ldi	r26, 0x2D	; 45
    1562:	b0 e0       	ldi	r27, 0x00	; 0
    1564:	ed e2       	ldi	r30, 0x2D	; 45
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	80 81       	ld	r24, Z
    156a:	80 61       	ori	r24, 0x10	; 16
    156c:	8c 93       	st	X, r24
	//Clock prescaler -->64
	Set_Bit(SPCR,1);
    156e:	ad e2       	ldi	r26, 0x2D	; 45
    1570:	b0 e0       	ldi	r27, 0x00	; 0
    1572:	ed e2       	ldi	r30, 0x2D	; 45
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	80 81       	ld	r24, Z
    1578:	82 60       	ori	r24, 0x02	; 2
    157a:	8c 93       	st	X, r24
	CLR_Bit(SPCR,0);
    157c:	ad e2       	ldi	r26, 0x2D	; 45
    157e:	b0 e0       	ldi	r27, 0x00	; 0
    1580:	ed e2       	ldi	r30, 0x2D	; 45
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	80 81       	ld	r24, Z
    1586:	8e 7f       	andi	r24, 0xFE	; 254
    1588:	8c 93       	st	X, r24
	CLR_Bit(SPSR,0);
    158a:	ae e2       	ldi	r26, 0x2E	; 46
    158c:	b0 e0       	ldi	r27, 0x00	; 0
    158e:	ee e2       	ldi	r30, 0x2E	; 46
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	80 81       	ld	r24, Z
    1594:	8e 7f       	andi	r24, 0xFE	; 254
    1596:	8c 93       	st	X, r24
	//Enable SPI
	Set_Bit(SPCR,6);
    1598:	ad e2       	ldi	r26, 0x2D	; 45
    159a:	b0 e0       	ldi	r27, 0x00	; 0
    159c:	ed e2       	ldi	r30, 0x2D	; 45
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	80 81       	ld	r24, Z
    15a2:	80 64       	ori	r24, 0x40	; 64
    15a4:	8c 93       	st	X, r24

}
    15a6:	cf 91       	pop	r28
    15a8:	df 91       	pop	r29
    15aa:	08 95       	ret

000015ac <SPI_SlaveInit>:

void SPI_SlaveInit(void){
    15ac:	df 93       	push	r29
    15ae:	cf 93       	push	r28
    15b0:	cd b7       	in	r28, 0x3d	; 61
    15b2:	de b7       	in	r29, 0x3e	; 62
	//Slave Initialize
	CLR_Bit(SPCR,4);
    15b4:	ad e2       	ldi	r26, 0x2D	; 45
    15b6:	b0 e0       	ldi	r27, 0x00	; 0
    15b8:	ed e2       	ldi	r30, 0x2D	; 45
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	80 81       	ld	r24, Z
    15be:	8f 7e       	andi	r24, 0xEF	; 239
    15c0:	8c 93       	st	X, r24

	//Enable SPI
	Set_Bit(SPCR,6);
    15c2:	ad e2       	ldi	r26, 0x2D	; 45
    15c4:	b0 e0       	ldi	r27, 0x00	; 0
    15c6:	ed e2       	ldi	r30, 0x2D	; 45
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	80 81       	ld	r24, Z
    15cc:	80 64       	ori	r24, 0x40	; 64
    15ce:	8c 93       	st	X, r24
}
    15d0:	cf 91       	pop	r28
    15d2:	df 91       	pop	r29
    15d4:	08 95       	ret

000015d6 <SPI_u8Transeive>:

u8 SPI_u8Transeive(u8 Copy_u8Data){
    15d6:	df 93       	push	r29
    15d8:	cf 93       	push	r28
    15da:	0f 92       	push	r0
    15dc:	cd b7       	in	r28, 0x3d	; 61
    15de:	de b7       	in	r29, 0x3e	; 62
    15e0:	89 83       	std	Y+1, r24	; 0x01
	//Send Data
	SPDR = Copy_u8Data;
    15e2:	ef e2       	ldi	r30, 0x2F	; 47
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	89 81       	ldd	r24, Y+1	; 0x01
    15e8:	80 83       	st	Z, r24
	//Wait Until Transfer is complete , Flag is Cleared Automatic
	while(Get_Bit(SPSR,7)==0);
    15ea:	ee e2       	ldi	r30, 0x2E	; 46
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	80 81       	ld	r24, Z
    15f0:	88 23       	and	r24, r24
    15f2:	dc f7       	brge	.-10     	; 0x15ea <SPI_u8Transeive+0x14>
	//Receive Data "Get Exchanged Data"
	return SPDR;
    15f4:	ef e2       	ldi	r30, 0x2F	; 47
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	80 81       	ld	r24, Z
}
    15fa:	0f 90       	pop	r0
    15fc:	cf 91       	pop	r28
    15fe:	df 91       	pop	r29
    1600:	08 95       	ret

00001602 <GIE_voidEnableGlobalInterrupt>:
#include<avr/io.h>
#include"../../LIB/BIT_MATH.h"

#include"GIE_Interface.h"

void GIE_voidEnableGlobalInterrupt(void){
    1602:	df 93       	push	r29
    1604:	cf 93       	push	r28
    1606:	cd b7       	in	r28, 0x3d	; 61
    1608:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(SREG,7);
    160a:	af e5       	ldi	r26, 0x5F	; 95
    160c:	b0 e0       	ldi	r27, 0x00	; 0
    160e:	ef e5       	ldi	r30, 0x5F	; 95
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	80 81       	ld	r24, Z
    1614:	80 68       	ori	r24, 0x80	; 128
    1616:	8c 93       	st	X, r24
}
    1618:	cf 91       	pop	r28
    161a:	df 91       	pop	r29
    161c:	08 95       	ret

0000161e <GIE_voidDissableGlobalInterrupt>:
void GIE_voidDissableGlobalInterrupt(void){
    161e:	df 93       	push	r29
    1620:	cf 93       	push	r28
    1622:	cd b7       	in	r28, 0x3d	; 61
    1624:	de b7       	in	r29, 0x3e	; 62
	CLR_Bit(SREG,7);
    1626:	af e5       	ldi	r26, 0x5F	; 95
    1628:	b0 e0       	ldi	r27, 0x00	; 0
    162a:	ef e5       	ldi	r30, 0x5F	; 95
    162c:	f0 e0       	ldi	r31, 0x00	; 0
    162e:	80 81       	ld	r24, Z
    1630:	8f 77       	andi	r24, 0x7F	; 127
    1632:	8c 93       	st	X, r24
}
    1634:	cf 91       	pop	r28
    1636:	df 91       	pop	r29
    1638:	08 95       	ret

0000163a <EXTI_VoidInit>:
#include"EXTI_Interface.h"

void (*global_PTRINT0NotificationFunction)(void)=0x00;
void (*global_PTRINT1NotificationFunction)(void)=0x00;

void EXTI_VoidInit(u8 INT_Number, u8 Mode){
    163a:	df 93       	push	r29
    163c:	cf 93       	push	r28
    163e:	cd b7       	in	r28, 0x3d	; 61
    1640:	de b7       	in	r29, 0x3e	; 62
    1642:	28 97       	sbiw	r28, 0x08	; 8
    1644:	0f b6       	in	r0, 0x3f	; 63
    1646:	f8 94       	cli
    1648:	de bf       	out	0x3e, r29	; 62
    164a:	0f be       	out	0x3f, r0	; 63
    164c:	cd bf       	out	0x3d, r28	; 61
    164e:	89 83       	std	Y+1, r24	; 0x01
    1650:	6a 83       	std	Y+2, r22	; 0x02
	switch(INT_Number){
    1652:	89 81       	ldd	r24, Y+1	; 0x01
    1654:	28 2f       	mov	r18, r24
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	38 87       	std	Y+8, r19	; 0x08
    165a:	2f 83       	std	Y+7, r18	; 0x07
    165c:	8f 81       	ldd	r24, Y+7	; 0x07
    165e:	98 85       	ldd	r25, Y+8	; 0x08
    1660:	00 97       	sbiw	r24, 0x00	; 0
    1662:	39 f0       	breq	.+14     	; 0x1672 <EXTI_VoidInit+0x38>
    1664:	2f 81       	ldd	r18, Y+7	; 0x07
    1666:	38 85       	ldd	r19, Y+8	; 0x08
    1668:	21 30       	cpi	r18, 0x01	; 1
    166a:	31 05       	cpc	r19, r1
    166c:	09 f4       	brne	.+2      	; 0x1670 <EXTI_VoidInit+0x36>
    166e:	49 c0       	rjmp	.+146    	; 0x1702 <EXTI_VoidInit+0xc8>
    1670:	8f c0       	rjmp	.+286    	; 0x1790 <EXTI_VoidInit+0x156>
		case EXT_INT0:
			switch(Mode){
    1672:	8a 81       	ldd	r24, Y+2	; 0x02
    1674:	28 2f       	mov	r18, r24
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	3e 83       	std	Y+6, r19	; 0x06
    167a:	2d 83       	std	Y+5, r18	; 0x05
    167c:	8d 81       	ldd	r24, Y+5	; 0x05
    167e:	9e 81       	ldd	r25, Y+6	; 0x06
    1680:	83 30       	cpi	r24, 0x03	; 3
    1682:	91 05       	cpc	r25, r1
    1684:	c9 f0       	breq	.+50     	; 0x16b8 <EXTI_VoidInit+0x7e>
    1686:	2d 81       	ldd	r18, Y+5	; 0x05
    1688:	3e 81       	ldd	r19, Y+6	; 0x06
    168a:	24 30       	cpi	r18, 0x04	; 4
    168c:	31 05       	cpc	r19, r1
    168e:	19 f1       	breq	.+70     	; 0x16d6 <EXTI_VoidInit+0x9c>
    1690:	8d 81       	ldd	r24, Y+5	; 0x05
    1692:	9e 81       	ldd	r25, Y+6	; 0x06
    1694:	82 30       	cpi	r24, 0x02	; 2
    1696:	91 05       	cpc	r25, r1
    1698:	61 f5       	brne	.+88     	; 0x16f2 <EXTI_VoidInit+0xb8>
				case RISING:
					//set interrupt 1 to rising edge
					Set_Bit(MCUCR,0);
    169a:	a5 e5       	ldi	r26, 0x55	; 85
    169c:	b0 e0       	ldi	r27, 0x00	; 0
    169e:	e5 e5       	ldi	r30, 0x55	; 85
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	80 81       	ld	r24, Z
    16a4:	81 60       	ori	r24, 0x01	; 1
    16a6:	8c 93       	st	X, r24
					Set_Bit(MCUCR,1);
    16a8:	a5 e5       	ldi	r26, 0x55	; 85
    16aa:	b0 e0       	ldi	r27, 0x00	; 0
    16ac:	e5 e5       	ldi	r30, 0x55	; 85
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	80 81       	ld	r24, Z
    16b2:	82 60       	ori	r24, 0x02	; 2
    16b4:	8c 93       	st	X, r24
    16b6:	1d c0       	rjmp	.+58     	; 0x16f2 <EXTI_VoidInit+0xb8>
					break;
				case FALLING:
					//INT1--->falling edge
					CLR_Bit(MCUCR,0);
    16b8:	a5 e5       	ldi	r26, 0x55	; 85
    16ba:	b0 e0       	ldi	r27, 0x00	; 0
    16bc:	e5 e5       	ldi	r30, 0x55	; 85
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	80 81       	ld	r24, Z
    16c2:	8e 7f       	andi	r24, 0xFE	; 254
    16c4:	8c 93       	st	X, r24
					Set_Bit(MCUCR,1);
    16c6:	a5 e5       	ldi	r26, 0x55	; 85
    16c8:	b0 e0       	ldi	r27, 0x00	; 0
    16ca:	e5 e5       	ldi	r30, 0x55	; 85
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	80 81       	ld	r24, Z
    16d0:	82 60       	ori	r24, 0x02	; 2
    16d2:	8c 93       	st	X, r24
    16d4:	0e c0       	rjmp	.+28     	; 0x16f2 <EXTI_VoidInit+0xb8>
					break;
				case LOGICAL_CHANGE:
					//set interrupt 0 to any logical change
					Set_Bit(MCUCR,0);
    16d6:	a5 e5       	ldi	r26, 0x55	; 85
    16d8:	b0 e0       	ldi	r27, 0x00	; 0
    16da:	e5 e5       	ldi	r30, 0x55	; 85
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	80 81       	ld	r24, Z
    16e0:	81 60       	ori	r24, 0x01	; 1
    16e2:	8c 93       	st	X, r24
					CLR_Bit(MCUCR,1);
    16e4:	a5 e5       	ldi	r26, 0x55	; 85
    16e6:	b0 e0       	ldi	r27, 0x00	; 0
    16e8:	e5 e5       	ldi	r30, 0x55	; 85
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	80 81       	ld	r24, Z
    16ee:	8d 7f       	andi	r24, 0xFD	; 253
    16f0:	8c 93       	st	X, r24
					break;
			}
			//Enable INT0
			Set_Bit(GICR,6);
    16f2:	ab e5       	ldi	r26, 0x5B	; 91
    16f4:	b0 e0       	ldi	r27, 0x00	; 0
    16f6:	eb e5       	ldi	r30, 0x5B	; 91
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	80 81       	ld	r24, Z
    16fc:	80 64       	ori	r24, 0x40	; 64
    16fe:	8c 93       	st	X, r24
    1700:	47 c0       	rjmp	.+142    	; 0x1790 <EXTI_VoidInit+0x156>
			break;
		case EXT_INT1:
			switch(Mode){
    1702:	8a 81       	ldd	r24, Y+2	; 0x02
    1704:	28 2f       	mov	r18, r24
    1706:	30 e0       	ldi	r19, 0x00	; 0
    1708:	3c 83       	std	Y+4, r19	; 0x04
    170a:	2b 83       	std	Y+3, r18	; 0x03
    170c:	8b 81       	ldd	r24, Y+3	; 0x03
    170e:	9c 81       	ldd	r25, Y+4	; 0x04
    1710:	83 30       	cpi	r24, 0x03	; 3
    1712:	91 05       	cpc	r25, r1
    1714:	c9 f0       	breq	.+50     	; 0x1748 <EXTI_VoidInit+0x10e>
    1716:	2b 81       	ldd	r18, Y+3	; 0x03
    1718:	3c 81       	ldd	r19, Y+4	; 0x04
    171a:	24 30       	cpi	r18, 0x04	; 4
    171c:	31 05       	cpc	r19, r1
    171e:	19 f1       	breq	.+70     	; 0x1766 <EXTI_VoidInit+0x12c>
    1720:	8b 81       	ldd	r24, Y+3	; 0x03
    1722:	9c 81       	ldd	r25, Y+4	; 0x04
    1724:	82 30       	cpi	r24, 0x02	; 2
    1726:	91 05       	cpc	r25, r1
    1728:	61 f5       	brne	.+88     	; 0x1782 <EXTI_VoidInit+0x148>
				case RISING:
					//set interrupt 1 to rising edge
					Set_Bit(MCUCR,2);
    172a:	a5 e5       	ldi	r26, 0x55	; 85
    172c:	b0 e0       	ldi	r27, 0x00	; 0
    172e:	e5 e5       	ldi	r30, 0x55	; 85
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	80 81       	ld	r24, Z
    1734:	84 60       	ori	r24, 0x04	; 4
    1736:	8c 93       	st	X, r24
					Set_Bit(MCUCR,3);
    1738:	a5 e5       	ldi	r26, 0x55	; 85
    173a:	b0 e0       	ldi	r27, 0x00	; 0
    173c:	e5 e5       	ldi	r30, 0x55	; 85
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	80 81       	ld	r24, Z
    1742:	88 60       	ori	r24, 0x08	; 8
    1744:	8c 93       	st	X, r24
    1746:	1d c0       	rjmp	.+58     	; 0x1782 <EXTI_VoidInit+0x148>
					break;
				case FALLING:
					//falling edge
					CLR_Bit(MCUCR,2);
    1748:	a5 e5       	ldi	r26, 0x55	; 85
    174a:	b0 e0       	ldi	r27, 0x00	; 0
    174c:	e5 e5       	ldi	r30, 0x55	; 85
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	80 81       	ld	r24, Z
    1752:	8b 7f       	andi	r24, 0xFB	; 251
    1754:	8c 93       	st	X, r24
					Set_Bit(MCUCR,3);
    1756:	a5 e5       	ldi	r26, 0x55	; 85
    1758:	b0 e0       	ldi	r27, 0x00	; 0
    175a:	e5 e5       	ldi	r30, 0x55	; 85
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	80 81       	ld	r24, Z
    1760:	88 60       	ori	r24, 0x08	; 8
    1762:	8c 93       	st	X, r24
    1764:	0e c0       	rjmp	.+28     	; 0x1782 <EXTI_VoidInit+0x148>
					break;
				case LOGICAL_CHANGE:
					//any logical change
					Set_Bit(MCUCR,2);
    1766:	a5 e5       	ldi	r26, 0x55	; 85
    1768:	b0 e0       	ldi	r27, 0x00	; 0
    176a:	e5 e5       	ldi	r30, 0x55	; 85
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	80 81       	ld	r24, Z
    1770:	84 60       	ori	r24, 0x04	; 4
    1772:	8c 93       	st	X, r24
					CLR_Bit(MCUCR,3);
    1774:	a5 e5       	ldi	r26, 0x55	; 85
    1776:	b0 e0       	ldi	r27, 0x00	; 0
    1778:	e5 e5       	ldi	r30, 0x55	; 85
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	80 81       	ld	r24, Z
    177e:	87 7f       	andi	r24, 0xF7	; 247
    1780:	8c 93       	st	X, r24
					break;
			}
			//Enable INT1
			Set_Bit(GICR,7);
    1782:	ab e5       	ldi	r26, 0x5B	; 91
    1784:	b0 e0       	ldi	r27, 0x00	; 0
    1786:	eb e5       	ldi	r30, 0x5B	; 91
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	80 81       	ld	r24, Z
    178c:	80 68       	ori	r24, 0x80	; 128
    178e:	8c 93       	st	X, r24
			break;
	}
}
    1790:	28 96       	adiw	r28, 0x08	; 8
    1792:	0f b6       	in	r0, 0x3f	; 63
    1794:	f8 94       	cli
    1796:	de bf       	out	0x3e, r29	; 62
    1798:	0f be       	out	0x3f, r0	; 63
    179a:	cd bf       	out	0x3d, r28	; 61
    179c:	cf 91       	pop	r28
    179e:	df 91       	pop	r29
    17a0:	08 95       	ret

000017a2 <EXTI_VoidDisable>:

void EXTI_VoidDisable(u8 INT_Number){
    17a2:	df 93       	push	r29
    17a4:	cf 93       	push	r28
    17a6:	00 d0       	rcall	.+0      	; 0x17a8 <EXTI_VoidDisable+0x6>
    17a8:	0f 92       	push	r0
    17aa:	cd b7       	in	r28, 0x3d	; 61
    17ac:	de b7       	in	r29, 0x3e	; 62
    17ae:	89 83       	std	Y+1, r24	; 0x01
	switch(INT_Number){
    17b0:	89 81       	ldd	r24, Y+1	; 0x01
    17b2:	28 2f       	mov	r18, r24
    17b4:	30 e0       	ldi	r19, 0x00	; 0
    17b6:	3b 83       	std	Y+3, r19	; 0x03
    17b8:	2a 83       	std	Y+2, r18	; 0x02
    17ba:	8a 81       	ldd	r24, Y+2	; 0x02
    17bc:	9b 81       	ldd	r25, Y+3	; 0x03
    17be:	00 97       	sbiw	r24, 0x00	; 0
    17c0:	31 f0       	breq	.+12     	; 0x17ce <EXTI_VoidDisable+0x2c>
    17c2:	2a 81       	ldd	r18, Y+2	; 0x02
    17c4:	3b 81       	ldd	r19, Y+3	; 0x03
    17c6:	21 30       	cpi	r18, 0x01	; 1
    17c8:	31 05       	cpc	r19, r1
    17ca:	49 f0       	breq	.+18     	; 0x17de <EXTI_VoidDisable+0x3c>
    17cc:	0f c0       	rjmp	.+30     	; 0x17ec <EXTI_VoidDisable+0x4a>
		case EXT_INT0:
			//Disable INT0
			CLR_Bit(GICR,6);
    17ce:	ab e5       	ldi	r26, 0x5B	; 91
    17d0:	b0 e0       	ldi	r27, 0x00	; 0
    17d2:	eb e5       	ldi	r30, 0x5B	; 91
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	80 81       	ld	r24, Z
    17d8:	8f 7b       	andi	r24, 0xBF	; 191
    17da:	8c 93       	st	X, r24
    17dc:	07 c0       	rjmp	.+14     	; 0x17ec <EXTI_VoidDisable+0x4a>
			break;
		case EXT_INT1:
			//Disable INT1
			CLR_Bit(GICR,7);
    17de:	ab e5       	ldi	r26, 0x5B	; 91
    17e0:	b0 e0       	ldi	r27, 0x00	; 0
    17e2:	eb e5       	ldi	r30, 0x5B	; 91
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	80 81       	ld	r24, Z
    17e8:	8f 77       	andi	r24, 0x7F	; 127
    17ea:	8c 93       	st	X, r24
			break;
	}
}
    17ec:	0f 90       	pop	r0
    17ee:	0f 90       	pop	r0
    17f0:	0f 90       	pop	r0
    17f2:	cf 91       	pop	r28
    17f4:	df 91       	pop	r29
    17f6:	08 95       	ret

000017f8 <EXTI_VoidINT0CallBack>:

void EXTI_VoidINT0CallBack(void(*NotificationFunction)(void)){
    17f8:	df 93       	push	r29
    17fa:	cf 93       	push	r28
    17fc:	00 d0       	rcall	.+0      	; 0x17fe <EXTI_VoidINT0CallBack+0x6>
    17fe:	cd b7       	in	r28, 0x3d	; 61
    1800:	de b7       	in	r29, 0x3e	; 62
    1802:	9a 83       	std	Y+2, r25	; 0x02
    1804:	89 83       	std	Y+1, r24	; 0x01
	global_PTRINT0NotificationFunction= NotificationFunction;
    1806:	89 81       	ldd	r24, Y+1	; 0x01
    1808:	9a 81       	ldd	r25, Y+2	; 0x02
    180a:	90 93 8a 01 	sts	0x018A, r25
    180e:	80 93 89 01 	sts	0x0189, r24
}
    1812:	0f 90       	pop	r0
    1814:	0f 90       	pop	r0
    1816:	cf 91       	pop	r28
    1818:	df 91       	pop	r29
    181a:	08 95       	ret

0000181c <EXTI_VoidINT1CallBack>:

void EXTI_VoidINT1CallBack(void(*NotificationFunction)(void)){
    181c:	df 93       	push	r29
    181e:	cf 93       	push	r28
    1820:	00 d0       	rcall	.+0      	; 0x1822 <EXTI_VoidINT1CallBack+0x6>
    1822:	cd b7       	in	r28, 0x3d	; 61
    1824:	de b7       	in	r29, 0x3e	; 62
    1826:	9a 83       	std	Y+2, r25	; 0x02
    1828:	89 83       	std	Y+1, r24	; 0x01
	global_PTRINT1NotificationFunction= NotificationFunction;
    182a:	89 81       	ldd	r24, Y+1	; 0x01
    182c:	9a 81       	ldd	r25, Y+2	; 0x02
    182e:	90 93 8c 01 	sts	0x018C, r25
    1832:	80 93 8b 01 	sts	0x018B, r24
}
    1836:	0f 90       	pop	r0
    1838:	0f 90       	pop	r0
    183a:	cf 91       	pop	r28
    183c:	df 91       	pop	r29
    183e:	08 95       	ret

00001840 <__vector_1>:

//INT0
void __vector_1 (void) __attribute__((signal));
void __vector_1 (void){
    1840:	1f 92       	push	r1
    1842:	0f 92       	push	r0
    1844:	0f b6       	in	r0, 0x3f	; 63
    1846:	0f 92       	push	r0
    1848:	11 24       	eor	r1, r1
    184a:	2f 93       	push	r18
    184c:	3f 93       	push	r19
    184e:	4f 93       	push	r20
    1850:	5f 93       	push	r21
    1852:	6f 93       	push	r22
    1854:	7f 93       	push	r23
    1856:	8f 93       	push	r24
    1858:	9f 93       	push	r25
    185a:	af 93       	push	r26
    185c:	bf 93       	push	r27
    185e:	ef 93       	push	r30
    1860:	ff 93       	push	r31
    1862:	df 93       	push	r29
    1864:	cf 93       	push	r28
    1866:	cd b7       	in	r28, 0x3d	; 61
    1868:	de b7       	in	r29, 0x3e	; 62
	if(global_PTRINT0NotificationFunction!=0x00)
    186a:	80 91 89 01 	lds	r24, 0x0189
    186e:	90 91 8a 01 	lds	r25, 0x018A
    1872:	00 97       	sbiw	r24, 0x00	; 0
    1874:	29 f0       	breq	.+10     	; 0x1880 <__vector_1+0x40>
	global_PTRINT0NotificationFunction();
    1876:	e0 91 89 01 	lds	r30, 0x0189
    187a:	f0 91 8a 01 	lds	r31, 0x018A
    187e:	09 95       	icall
}
    1880:	cf 91       	pop	r28
    1882:	df 91       	pop	r29
    1884:	ff 91       	pop	r31
    1886:	ef 91       	pop	r30
    1888:	bf 91       	pop	r27
    188a:	af 91       	pop	r26
    188c:	9f 91       	pop	r25
    188e:	8f 91       	pop	r24
    1890:	7f 91       	pop	r23
    1892:	6f 91       	pop	r22
    1894:	5f 91       	pop	r21
    1896:	4f 91       	pop	r20
    1898:	3f 91       	pop	r19
    189a:	2f 91       	pop	r18
    189c:	0f 90       	pop	r0
    189e:	0f be       	out	0x3f, r0	; 63
    18a0:	0f 90       	pop	r0
    18a2:	1f 90       	pop	r1
    18a4:	18 95       	reti

000018a6 <__vector_2>:

//INT1
void __vector_2 (void) __attribute__((signal));
void __vector_2 (void){
    18a6:	1f 92       	push	r1
    18a8:	0f 92       	push	r0
    18aa:	0f b6       	in	r0, 0x3f	; 63
    18ac:	0f 92       	push	r0
    18ae:	11 24       	eor	r1, r1
    18b0:	2f 93       	push	r18
    18b2:	3f 93       	push	r19
    18b4:	4f 93       	push	r20
    18b6:	5f 93       	push	r21
    18b8:	6f 93       	push	r22
    18ba:	7f 93       	push	r23
    18bc:	8f 93       	push	r24
    18be:	9f 93       	push	r25
    18c0:	af 93       	push	r26
    18c2:	bf 93       	push	r27
    18c4:	ef 93       	push	r30
    18c6:	ff 93       	push	r31
    18c8:	df 93       	push	r29
    18ca:	cf 93       	push	r28
    18cc:	cd b7       	in	r28, 0x3d	; 61
    18ce:	de b7       	in	r29, 0x3e	; 62
	if(global_PTRINT1NotificationFunction!=0x00)
    18d0:	80 91 8b 01 	lds	r24, 0x018B
    18d4:	90 91 8c 01 	lds	r25, 0x018C
    18d8:	00 97       	sbiw	r24, 0x00	; 0
    18da:	29 f0       	breq	.+10     	; 0x18e6 <__vector_2+0x40>
		global_PTRINT1NotificationFunction();
    18dc:	e0 91 8b 01 	lds	r30, 0x018B
    18e0:	f0 91 8c 01 	lds	r31, 0x018C
    18e4:	09 95       	icall
}
    18e6:	cf 91       	pop	r28
    18e8:	df 91       	pop	r29
    18ea:	ff 91       	pop	r31
    18ec:	ef 91       	pop	r30
    18ee:	bf 91       	pop	r27
    18f0:	af 91       	pop	r26
    18f2:	9f 91       	pop	r25
    18f4:	8f 91       	pop	r24
    18f6:	7f 91       	pop	r23
    18f8:	6f 91       	pop	r22
    18fa:	5f 91       	pop	r21
    18fc:	4f 91       	pop	r20
    18fe:	3f 91       	pop	r19
    1900:	2f 91       	pop	r18
    1902:	0f 90       	pop	r0
    1904:	0f be       	out	0x3f, r0	; 63
    1906:	0f 90       	pop	r0
    1908:	1f 90       	pop	r1
    190a:	18 95       	reti

0000190c <DIO_VoidSetPinDirection>:
//(2) include self layers
//(3) include lower layers
//(4) include self files "its .h file"


void DIO_VoidSetPinDirection(u8 Copy_u8PortName,u8 Copy_u8PinNumber,u8 Copy_PinState){
    190c:	df 93       	push	r29
    190e:	cf 93       	push	r28
    1910:	cd b7       	in	r28, 0x3d	; 61
    1912:	de b7       	in	r29, 0x3e	; 62
    1914:	2d 97       	sbiw	r28, 0x0d	; 13
    1916:	0f b6       	in	r0, 0x3f	; 63
    1918:	f8 94       	cli
    191a:	de bf       	out	0x3e, r29	; 62
    191c:	0f be       	out	0x3f, r0	; 63
    191e:	cd bf       	out	0x3d, r28	; 61
    1920:	89 83       	std	Y+1, r24	; 0x01
    1922:	6a 83       	std	Y+2, r22	; 0x02
    1924:	4b 83       	std	Y+3, r20	; 0x03
	//Better Array to Be {&DDRA,&DDRB,&DDRC,&DDRD}
	//u8* arr={&DDRA,&DDRB,&DDRC,&DDRD};
	//arr[Copy_u8PortName]
	switch(Copy_u8PortName){
    1926:	89 81       	ldd	r24, Y+1	; 0x01
    1928:	28 2f       	mov	r18, r24
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	3d 87       	std	Y+13, r19	; 0x0d
    192e:	2c 87       	std	Y+12, r18	; 0x0c
    1930:	8c 85       	ldd	r24, Y+12	; 0x0c
    1932:	9d 85       	ldd	r25, Y+13	; 0x0d
    1934:	81 30       	cpi	r24, 0x01	; 1
    1936:	91 05       	cpc	r25, r1
    1938:	09 f4       	brne	.+2      	; 0x193c <DIO_VoidSetPinDirection+0x30>
    193a:	4f c0       	rjmp	.+158    	; 0x19da <DIO_VoidSetPinDirection+0xce>
    193c:	2c 85       	ldd	r18, Y+12	; 0x0c
    193e:	3d 85       	ldd	r19, Y+13	; 0x0d
    1940:	22 30       	cpi	r18, 0x02	; 2
    1942:	31 05       	cpc	r19, r1
    1944:	2c f4       	brge	.+10     	; 0x1950 <DIO_VoidSetPinDirection+0x44>
    1946:	8c 85       	ldd	r24, Y+12	; 0x0c
    1948:	9d 85       	ldd	r25, Y+13	; 0x0d
    194a:	00 97       	sbiw	r24, 0x00	; 0
    194c:	71 f0       	breq	.+28     	; 0x196a <DIO_VoidSetPinDirection+0x5e>
    194e:	eb c0       	rjmp	.+470    	; 0x1b26 <DIO_VoidSetPinDirection+0x21a>
    1950:	2c 85       	ldd	r18, Y+12	; 0x0c
    1952:	3d 85       	ldd	r19, Y+13	; 0x0d
    1954:	22 30       	cpi	r18, 0x02	; 2
    1956:	31 05       	cpc	r19, r1
    1958:	09 f4       	brne	.+2      	; 0x195c <DIO_VoidSetPinDirection+0x50>
    195a:	77 c0       	rjmp	.+238    	; 0x1a4a <DIO_VoidSetPinDirection+0x13e>
    195c:	8c 85       	ldd	r24, Y+12	; 0x0c
    195e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1960:	83 30       	cpi	r24, 0x03	; 3
    1962:	91 05       	cpc	r25, r1
    1964:	09 f4       	brne	.+2      	; 0x1968 <DIO_VoidSetPinDirection+0x5c>
    1966:	a9 c0       	rjmp	.+338    	; 0x1aba <DIO_VoidSetPinDirection+0x1ae>
    1968:	de c0       	rjmp	.+444    	; 0x1b26 <DIO_VoidSetPinDirection+0x21a>
	case DIO_PORTA:
		switch(Copy_PinState){
    196a:	8b 81       	ldd	r24, Y+3	; 0x03
    196c:	28 2f       	mov	r18, r24
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	3b 87       	std	Y+11, r19	; 0x0b
    1972:	2a 87       	std	Y+10, r18	; 0x0a
    1974:	8a 85       	ldd	r24, Y+10	; 0x0a
    1976:	9b 85       	ldd	r25, Y+11	; 0x0b
    1978:	00 97       	sbiw	r24, 0x00	; 0
    197a:	d1 f0       	breq	.+52     	; 0x19b0 <DIO_VoidSetPinDirection+0xa4>
    197c:	2a 85       	ldd	r18, Y+10	; 0x0a
    197e:	3b 85       	ldd	r19, Y+11	; 0x0b
    1980:	21 30       	cpi	r18, 0x01	; 1
    1982:	31 05       	cpc	r19, r1
    1984:	09 f0       	breq	.+2      	; 0x1988 <DIO_VoidSetPinDirection+0x7c>
    1986:	cf c0       	rjmp	.+414    	; 0x1b26 <DIO_VoidSetPinDirection+0x21a>
		case OUTPUT:
			Set_Bit(DDRA,Copy_u8PinNumber);
    1988:	aa e3       	ldi	r26, 0x3A	; 58
    198a:	b0 e0       	ldi	r27, 0x00	; 0
    198c:	ea e3       	ldi	r30, 0x3A	; 58
    198e:	f0 e0       	ldi	r31, 0x00	; 0
    1990:	80 81       	ld	r24, Z
    1992:	48 2f       	mov	r20, r24
    1994:	8a 81       	ldd	r24, Y+2	; 0x02
    1996:	28 2f       	mov	r18, r24
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	81 e0       	ldi	r24, 0x01	; 1
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	02 2e       	mov	r0, r18
    19a0:	02 c0       	rjmp	.+4      	; 0x19a6 <DIO_VoidSetPinDirection+0x9a>
    19a2:	88 0f       	add	r24, r24
    19a4:	99 1f       	adc	r25, r25
    19a6:	0a 94       	dec	r0
    19a8:	e2 f7       	brpl	.-8      	; 0x19a2 <DIO_VoidSetPinDirection+0x96>
    19aa:	84 2b       	or	r24, r20
    19ac:	8c 93       	st	X, r24
    19ae:	bb c0       	rjmp	.+374    	; 0x1b26 <DIO_VoidSetPinDirection+0x21a>
			break;
		case INPUT:
			CLR_Bit(DDRA,Copy_u8PinNumber);
    19b0:	aa e3       	ldi	r26, 0x3A	; 58
    19b2:	b0 e0       	ldi	r27, 0x00	; 0
    19b4:	ea e3       	ldi	r30, 0x3A	; 58
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	80 81       	ld	r24, Z
    19ba:	48 2f       	mov	r20, r24
    19bc:	8a 81       	ldd	r24, Y+2	; 0x02
    19be:	28 2f       	mov	r18, r24
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	81 e0       	ldi	r24, 0x01	; 1
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	02 2e       	mov	r0, r18
    19c8:	02 c0       	rjmp	.+4      	; 0x19ce <DIO_VoidSetPinDirection+0xc2>
    19ca:	88 0f       	add	r24, r24
    19cc:	99 1f       	adc	r25, r25
    19ce:	0a 94       	dec	r0
    19d0:	e2 f7       	brpl	.-8      	; 0x19ca <DIO_VoidSetPinDirection+0xbe>
    19d2:	80 95       	com	r24
    19d4:	84 23       	and	r24, r20
    19d6:	8c 93       	st	X, r24
    19d8:	a6 c0       	rjmp	.+332    	; 0x1b26 <DIO_VoidSetPinDirection+0x21a>
			break;
		}
		break;
	case DIO_PORTB:
		switch(Copy_PinState){
    19da:	8b 81       	ldd	r24, Y+3	; 0x03
    19dc:	28 2f       	mov	r18, r24
    19de:	30 e0       	ldi	r19, 0x00	; 0
    19e0:	39 87       	std	Y+9, r19	; 0x09
    19e2:	28 87       	std	Y+8, r18	; 0x08
    19e4:	88 85       	ldd	r24, Y+8	; 0x08
    19e6:	99 85       	ldd	r25, Y+9	; 0x09
    19e8:	00 97       	sbiw	r24, 0x00	; 0
    19ea:	d1 f0       	breq	.+52     	; 0x1a20 <DIO_VoidSetPinDirection+0x114>
    19ec:	28 85       	ldd	r18, Y+8	; 0x08
    19ee:	39 85       	ldd	r19, Y+9	; 0x09
    19f0:	21 30       	cpi	r18, 0x01	; 1
    19f2:	31 05       	cpc	r19, r1
    19f4:	09 f0       	breq	.+2      	; 0x19f8 <DIO_VoidSetPinDirection+0xec>
    19f6:	97 c0       	rjmp	.+302    	; 0x1b26 <DIO_VoidSetPinDirection+0x21a>
			case OUTPUT:
				Set_Bit(DDRB,Copy_u8PinNumber);
    19f8:	a7 e3       	ldi	r26, 0x37	; 55
    19fa:	b0 e0       	ldi	r27, 0x00	; 0
    19fc:	e7 e3       	ldi	r30, 0x37	; 55
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	80 81       	ld	r24, Z
    1a02:	48 2f       	mov	r20, r24
    1a04:	8a 81       	ldd	r24, Y+2	; 0x02
    1a06:	28 2f       	mov	r18, r24
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	02 2e       	mov	r0, r18
    1a10:	02 c0       	rjmp	.+4      	; 0x1a16 <DIO_VoidSetPinDirection+0x10a>
    1a12:	88 0f       	add	r24, r24
    1a14:	99 1f       	adc	r25, r25
    1a16:	0a 94       	dec	r0
    1a18:	e2 f7       	brpl	.-8      	; 0x1a12 <DIO_VoidSetPinDirection+0x106>
    1a1a:	84 2b       	or	r24, r20
    1a1c:	8c 93       	st	X, r24
    1a1e:	83 c0       	rjmp	.+262    	; 0x1b26 <DIO_VoidSetPinDirection+0x21a>
				break;
			case INPUT:
				CLR_Bit(DDRB,Copy_u8PinNumber);
    1a20:	a7 e3       	ldi	r26, 0x37	; 55
    1a22:	b0 e0       	ldi	r27, 0x00	; 0
    1a24:	e7 e3       	ldi	r30, 0x37	; 55
    1a26:	f0 e0       	ldi	r31, 0x00	; 0
    1a28:	80 81       	ld	r24, Z
    1a2a:	48 2f       	mov	r20, r24
    1a2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2e:	28 2f       	mov	r18, r24
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	81 e0       	ldi	r24, 0x01	; 1
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	02 2e       	mov	r0, r18
    1a38:	02 c0       	rjmp	.+4      	; 0x1a3e <DIO_VoidSetPinDirection+0x132>
    1a3a:	88 0f       	add	r24, r24
    1a3c:	99 1f       	adc	r25, r25
    1a3e:	0a 94       	dec	r0
    1a40:	e2 f7       	brpl	.-8      	; 0x1a3a <DIO_VoidSetPinDirection+0x12e>
    1a42:	80 95       	com	r24
    1a44:	84 23       	and	r24, r20
    1a46:	8c 93       	st	X, r24
    1a48:	6e c0       	rjmp	.+220    	; 0x1b26 <DIO_VoidSetPinDirection+0x21a>
				break;}
		break;
	case DIO_PORTC:
		switch(Copy_PinState){
    1a4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4c:	28 2f       	mov	r18, r24
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	3f 83       	std	Y+7, r19	; 0x07
    1a52:	2e 83       	std	Y+6, r18	; 0x06
    1a54:	8e 81       	ldd	r24, Y+6	; 0x06
    1a56:	9f 81       	ldd	r25, Y+7	; 0x07
    1a58:	00 97       	sbiw	r24, 0x00	; 0
    1a5a:	d1 f0       	breq	.+52     	; 0x1a90 <DIO_VoidSetPinDirection+0x184>
    1a5c:	2e 81       	ldd	r18, Y+6	; 0x06
    1a5e:	3f 81       	ldd	r19, Y+7	; 0x07
    1a60:	21 30       	cpi	r18, 0x01	; 1
    1a62:	31 05       	cpc	r19, r1
    1a64:	09 f0       	breq	.+2      	; 0x1a68 <DIO_VoidSetPinDirection+0x15c>
    1a66:	5f c0       	rjmp	.+190    	; 0x1b26 <DIO_VoidSetPinDirection+0x21a>
			case OUTPUT:
				Set_Bit(DDRC,Copy_u8PinNumber);
    1a68:	a4 e3       	ldi	r26, 0x34	; 52
    1a6a:	b0 e0       	ldi	r27, 0x00	; 0
    1a6c:	e4 e3       	ldi	r30, 0x34	; 52
    1a6e:	f0 e0       	ldi	r31, 0x00	; 0
    1a70:	80 81       	ld	r24, Z
    1a72:	48 2f       	mov	r20, r24
    1a74:	8a 81       	ldd	r24, Y+2	; 0x02
    1a76:	28 2f       	mov	r18, r24
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	81 e0       	ldi	r24, 0x01	; 1
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	02 2e       	mov	r0, r18
    1a80:	02 c0       	rjmp	.+4      	; 0x1a86 <DIO_VoidSetPinDirection+0x17a>
    1a82:	88 0f       	add	r24, r24
    1a84:	99 1f       	adc	r25, r25
    1a86:	0a 94       	dec	r0
    1a88:	e2 f7       	brpl	.-8      	; 0x1a82 <DIO_VoidSetPinDirection+0x176>
    1a8a:	84 2b       	or	r24, r20
    1a8c:	8c 93       	st	X, r24
    1a8e:	4b c0       	rjmp	.+150    	; 0x1b26 <DIO_VoidSetPinDirection+0x21a>
				break;
			case INPUT:
				CLR_Bit(DDRC,Copy_u8PinNumber);
    1a90:	a4 e3       	ldi	r26, 0x34	; 52
    1a92:	b0 e0       	ldi	r27, 0x00	; 0
    1a94:	e4 e3       	ldi	r30, 0x34	; 52
    1a96:	f0 e0       	ldi	r31, 0x00	; 0
    1a98:	80 81       	ld	r24, Z
    1a9a:	48 2f       	mov	r20, r24
    1a9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9e:	28 2f       	mov	r18, r24
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	81 e0       	ldi	r24, 0x01	; 1
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	02 2e       	mov	r0, r18
    1aa8:	02 c0       	rjmp	.+4      	; 0x1aae <DIO_VoidSetPinDirection+0x1a2>
    1aaa:	88 0f       	add	r24, r24
    1aac:	99 1f       	adc	r25, r25
    1aae:	0a 94       	dec	r0
    1ab0:	e2 f7       	brpl	.-8      	; 0x1aaa <DIO_VoidSetPinDirection+0x19e>
    1ab2:	80 95       	com	r24
    1ab4:	84 23       	and	r24, r20
    1ab6:	8c 93       	st	X, r24
    1ab8:	36 c0       	rjmp	.+108    	; 0x1b26 <DIO_VoidSetPinDirection+0x21a>
				break;}
		break;
	case DIO_PORTD:
		switch(Copy_PinState){
    1aba:	8b 81       	ldd	r24, Y+3	; 0x03
    1abc:	28 2f       	mov	r18, r24
    1abe:	30 e0       	ldi	r19, 0x00	; 0
    1ac0:	3d 83       	std	Y+5, r19	; 0x05
    1ac2:	2c 83       	std	Y+4, r18	; 0x04
    1ac4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ac6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ac8:	00 97       	sbiw	r24, 0x00	; 0
    1aca:	c9 f0       	breq	.+50     	; 0x1afe <DIO_VoidSetPinDirection+0x1f2>
    1acc:	2c 81       	ldd	r18, Y+4	; 0x04
    1ace:	3d 81       	ldd	r19, Y+5	; 0x05
    1ad0:	21 30       	cpi	r18, 0x01	; 1
    1ad2:	31 05       	cpc	r19, r1
    1ad4:	41 f5       	brne	.+80     	; 0x1b26 <DIO_VoidSetPinDirection+0x21a>
			case OUTPUT:
				Set_Bit(DDRD,Copy_u8PinNumber);
    1ad6:	a1 e3       	ldi	r26, 0x31	; 49
    1ad8:	b0 e0       	ldi	r27, 0x00	; 0
    1ada:	e1 e3       	ldi	r30, 0x31	; 49
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	80 81       	ld	r24, Z
    1ae0:	48 2f       	mov	r20, r24
    1ae2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae4:	28 2f       	mov	r18, r24
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	81 e0       	ldi	r24, 0x01	; 1
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	02 2e       	mov	r0, r18
    1aee:	02 c0       	rjmp	.+4      	; 0x1af4 <DIO_VoidSetPinDirection+0x1e8>
    1af0:	88 0f       	add	r24, r24
    1af2:	99 1f       	adc	r25, r25
    1af4:	0a 94       	dec	r0
    1af6:	e2 f7       	brpl	.-8      	; 0x1af0 <DIO_VoidSetPinDirection+0x1e4>
    1af8:	84 2b       	or	r24, r20
    1afa:	8c 93       	st	X, r24
    1afc:	14 c0       	rjmp	.+40     	; 0x1b26 <DIO_VoidSetPinDirection+0x21a>
				break;
			case INPUT:
				CLR_Bit(DDRD,Copy_u8PinNumber);
    1afe:	a1 e3       	ldi	r26, 0x31	; 49
    1b00:	b0 e0       	ldi	r27, 0x00	; 0
    1b02:	e1 e3       	ldi	r30, 0x31	; 49
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	80 81       	ld	r24, Z
    1b08:	48 2f       	mov	r20, r24
    1b0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0c:	28 2f       	mov	r18, r24
    1b0e:	30 e0       	ldi	r19, 0x00	; 0
    1b10:	81 e0       	ldi	r24, 0x01	; 1
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	02 2e       	mov	r0, r18
    1b16:	02 c0       	rjmp	.+4      	; 0x1b1c <DIO_VoidSetPinDirection+0x210>
    1b18:	88 0f       	add	r24, r24
    1b1a:	99 1f       	adc	r25, r25
    1b1c:	0a 94       	dec	r0
    1b1e:	e2 f7       	brpl	.-8      	; 0x1b18 <DIO_VoidSetPinDirection+0x20c>
    1b20:	80 95       	com	r24
    1b22:	84 23       	and	r24, r20
    1b24:	8c 93       	st	X, r24
				break;}
		break;

	}
}
    1b26:	2d 96       	adiw	r28, 0x0d	; 13
    1b28:	0f b6       	in	r0, 0x3f	; 63
    1b2a:	f8 94       	cli
    1b2c:	de bf       	out	0x3e, r29	; 62
    1b2e:	0f be       	out	0x3f, r0	; 63
    1b30:	cd bf       	out	0x3d, r28	; 61
    1b32:	cf 91       	pop	r28
    1b34:	df 91       	pop	r29
    1b36:	08 95       	ret

00001b38 <DIO_VoidSetPinValue>:

void DIO_VoidSetPinValue(u8 Copy_u8PortName,u8 Copy_u8PinNumber,u8 Copy_PinValue){
    1b38:	df 93       	push	r29
    1b3a:	cf 93       	push	r28
    1b3c:	cd b7       	in	r28, 0x3d	; 61
    1b3e:	de b7       	in	r29, 0x3e	; 62
    1b40:	2d 97       	sbiw	r28, 0x0d	; 13
    1b42:	0f b6       	in	r0, 0x3f	; 63
    1b44:	f8 94       	cli
    1b46:	de bf       	out	0x3e, r29	; 62
    1b48:	0f be       	out	0x3f, r0	; 63
    1b4a:	cd bf       	out	0x3d, r28	; 61
    1b4c:	89 83       	std	Y+1, r24	; 0x01
    1b4e:	6a 83       	std	Y+2, r22	; 0x02
    1b50:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_u8PortName){
    1b52:	89 81       	ldd	r24, Y+1	; 0x01
    1b54:	28 2f       	mov	r18, r24
    1b56:	30 e0       	ldi	r19, 0x00	; 0
    1b58:	3d 87       	std	Y+13, r19	; 0x0d
    1b5a:	2c 87       	std	Y+12, r18	; 0x0c
    1b5c:	8c 85       	ldd	r24, Y+12	; 0x0c
    1b5e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1b60:	81 30       	cpi	r24, 0x01	; 1
    1b62:	91 05       	cpc	r25, r1
    1b64:	09 f4       	brne	.+2      	; 0x1b68 <DIO_VoidSetPinValue+0x30>
    1b66:	4f c0       	rjmp	.+158    	; 0x1c06 <DIO_VoidSetPinValue+0xce>
    1b68:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b6a:	3d 85       	ldd	r19, Y+13	; 0x0d
    1b6c:	22 30       	cpi	r18, 0x02	; 2
    1b6e:	31 05       	cpc	r19, r1
    1b70:	2c f4       	brge	.+10     	; 0x1b7c <DIO_VoidSetPinValue+0x44>
    1b72:	8c 85       	ldd	r24, Y+12	; 0x0c
    1b74:	9d 85       	ldd	r25, Y+13	; 0x0d
    1b76:	00 97       	sbiw	r24, 0x00	; 0
    1b78:	71 f0       	breq	.+28     	; 0x1b96 <DIO_VoidSetPinValue+0x5e>
    1b7a:	eb c0       	rjmp	.+470    	; 0x1d52 <DIO_VoidSetPinValue+0x21a>
    1b7c:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b7e:	3d 85       	ldd	r19, Y+13	; 0x0d
    1b80:	22 30       	cpi	r18, 0x02	; 2
    1b82:	31 05       	cpc	r19, r1
    1b84:	09 f4       	brne	.+2      	; 0x1b88 <DIO_VoidSetPinValue+0x50>
    1b86:	77 c0       	rjmp	.+238    	; 0x1c76 <DIO_VoidSetPinValue+0x13e>
    1b88:	8c 85       	ldd	r24, Y+12	; 0x0c
    1b8a:	9d 85       	ldd	r25, Y+13	; 0x0d
    1b8c:	83 30       	cpi	r24, 0x03	; 3
    1b8e:	91 05       	cpc	r25, r1
    1b90:	09 f4       	brne	.+2      	; 0x1b94 <DIO_VoidSetPinValue+0x5c>
    1b92:	a9 c0       	rjmp	.+338    	; 0x1ce6 <DIO_VoidSetPinValue+0x1ae>
    1b94:	de c0       	rjmp	.+444    	; 0x1d52 <DIO_VoidSetPinValue+0x21a>
	case DIO_PORTA:
		switch(Copy_PinValue){
    1b96:	8b 81       	ldd	r24, Y+3	; 0x03
    1b98:	28 2f       	mov	r18, r24
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	3b 87       	std	Y+11, r19	; 0x0b
    1b9e:	2a 87       	std	Y+10, r18	; 0x0a
    1ba0:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ba2:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ba4:	00 97       	sbiw	r24, 0x00	; 0
    1ba6:	d1 f0       	breq	.+52     	; 0x1bdc <DIO_VoidSetPinValue+0xa4>
    1ba8:	2a 85       	ldd	r18, Y+10	; 0x0a
    1baa:	3b 85       	ldd	r19, Y+11	; 0x0b
    1bac:	21 30       	cpi	r18, 0x01	; 1
    1bae:	31 05       	cpc	r19, r1
    1bb0:	09 f0       	breq	.+2      	; 0x1bb4 <DIO_VoidSetPinValue+0x7c>
    1bb2:	cf c0       	rjmp	.+414    	; 0x1d52 <DIO_VoidSetPinValue+0x21a>
		case HIGH:
			Set_Bit(PORTA,Copy_u8PinNumber);
    1bb4:	ab e3       	ldi	r26, 0x3B	; 59
    1bb6:	b0 e0       	ldi	r27, 0x00	; 0
    1bb8:	eb e3       	ldi	r30, 0x3B	; 59
    1bba:	f0 e0       	ldi	r31, 0x00	; 0
    1bbc:	80 81       	ld	r24, Z
    1bbe:	48 2f       	mov	r20, r24
    1bc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc2:	28 2f       	mov	r18, r24
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	02 2e       	mov	r0, r18
    1bcc:	02 c0       	rjmp	.+4      	; 0x1bd2 <DIO_VoidSetPinValue+0x9a>
    1bce:	88 0f       	add	r24, r24
    1bd0:	99 1f       	adc	r25, r25
    1bd2:	0a 94       	dec	r0
    1bd4:	e2 f7       	brpl	.-8      	; 0x1bce <DIO_VoidSetPinValue+0x96>
    1bd6:	84 2b       	or	r24, r20
    1bd8:	8c 93       	st	X, r24
    1bda:	bb c0       	rjmp	.+374    	; 0x1d52 <DIO_VoidSetPinValue+0x21a>
			break;
		case LOW:
			CLR_Bit(PORTA,Copy_u8PinNumber);
    1bdc:	ab e3       	ldi	r26, 0x3B	; 59
    1bde:	b0 e0       	ldi	r27, 0x00	; 0
    1be0:	eb e3       	ldi	r30, 0x3B	; 59
    1be2:	f0 e0       	ldi	r31, 0x00	; 0
    1be4:	80 81       	ld	r24, Z
    1be6:	48 2f       	mov	r20, r24
    1be8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bea:	28 2f       	mov	r18, r24
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	81 e0       	ldi	r24, 0x01	; 1
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	02 2e       	mov	r0, r18
    1bf4:	02 c0       	rjmp	.+4      	; 0x1bfa <DIO_VoidSetPinValue+0xc2>
    1bf6:	88 0f       	add	r24, r24
    1bf8:	99 1f       	adc	r25, r25
    1bfa:	0a 94       	dec	r0
    1bfc:	e2 f7       	brpl	.-8      	; 0x1bf6 <DIO_VoidSetPinValue+0xbe>
    1bfe:	80 95       	com	r24
    1c00:	84 23       	and	r24, r20
    1c02:	8c 93       	st	X, r24
    1c04:	a6 c0       	rjmp	.+332    	; 0x1d52 <DIO_VoidSetPinValue+0x21a>
			break;
		}
		break;
	case DIO_PORTB:
		switch(Copy_PinValue){
    1c06:	8b 81       	ldd	r24, Y+3	; 0x03
    1c08:	28 2f       	mov	r18, r24
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	39 87       	std	Y+9, r19	; 0x09
    1c0e:	28 87       	std	Y+8, r18	; 0x08
    1c10:	88 85       	ldd	r24, Y+8	; 0x08
    1c12:	99 85       	ldd	r25, Y+9	; 0x09
    1c14:	00 97       	sbiw	r24, 0x00	; 0
    1c16:	d1 f0       	breq	.+52     	; 0x1c4c <DIO_VoidSetPinValue+0x114>
    1c18:	28 85       	ldd	r18, Y+8	; 0x08
    1c1a:	39 85       	ldd	r19, Y+9	; 0x09
    1c1c:	21 30       	cpi	r18, 0x01	; 1
    1c1e:	31 05       	cpc	r19, r1
    1c20:	09 f0       	breq	.+2      	; 0x1c24 <DIO_VoidSetPinValue+0xec>
    1c22:	97 c0       	rjmp	.+302    	; 0x1d52 <DIO_VoidSetPinValue+0x21a>
			case HIGH:
				Set_Bit(PORTB,Copy_u8PinNumber);
    1c24:	a8 e3       	ldi	r26, 0x38	; 56
    1c26:	b0 e0       	ldi	r27, 0x00	; 0
    1c28:	e8 e3       	ldi	r30, 0x38	; 56
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	80 81       	ld	r24, Z
    1c2e:	48 2f       	mov	r20, r24
    1c30:	8a 81       	ldd	r24, Y+2	; 0x02
    1c32:	28 2f       	mov	r18, r24
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	02 2e       	mov	r0, r18
    1c3c:	02 c0       	rjmp	.+4      	; 0x1c42 <DIO_VoidSetPinValue+0x10a>
    1c3e:	88 0f       	add	r24, r24
    1c40:	99 1f       	adc	r25, r25
    1c42:	0a 94       	dec	r0
    1c44:	e2 f7       	brpl	.-8      	; 0x1c3e <DIO_VoidSetPinValue+0x106>
    1c46:	84 2b       	or	r24, r20
    1c48:	8c 93       	st	X, r24
    1c4a:	83 c0       	rjmp	.+262    	; 0x1d52 <DIO_VoidSetPinValue+0x21a>
				break;
			case LOW:
				CLR_Bit(PORTB,Copy_u8PinNumber);
    1c4c:	a8 e3       	ldi	r26, 0x38	; 56
    1c4e:	b0 e0       	ldi	r27, 0x00	; 0
    1c50:	e8 e3       	ldi	r30, 0x38	; 56
    1c52:	f0 e0       	ldi	r31, 0x00	; 0
    1c54:	80 81       	ld	r24, Z
    1c56:	48 2f       	mov	r20, r24
    1c58:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5a:	28 2f       	mov	r18, r24
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	81 e0       	ldi	r24, 0x01	; 1
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	02 2e       	mov	r0, r18
    1c64:	02 c0       	rjmp	.+4      	; 0x1c6a <DIO_VoidSetPinValue+0x132>
    1c66:	88 0f       	add	r24, r24
    1c68:	99 1f       	adc	r25, r25
    1c6a:	0a 94       	dec	r0
    1c6c:	e2 f7       	brpl	.-8      	; 0x1c66 <DIO_VoidSetPinValue+0x12e>
    1c6e:	80 95       	com	r24
    1c70:	84 23       	and	r24, r20
    1c72:	8c 93       	st	X, r24
    1c74:	6e c0       	rjmp	.+220    	; 0x1d52 <DIO_VoidSetPinValue+0x21a>
				break;}
		break;
	case DIO_PORTC:
		switch(Copy_PinValue){
    1c76:	8b 81       	ldd	r24, Y+3	; 0x03
    1c78:	28 2f       	mov	r18, r24
    1c7a:	30 e0       	ldi	r19, 0x00	; 0
    1c7c:	3f 83       	std	Y+7, r19	; 0x07
    1c7e:	2e 83       	std	Y+6, r18	; 0x06
    1c80:	8e 81       	ldd	r24, Y+6	; 0x06
    1c82:	9f 81       	ldd	r25, Y+7	; 0x07
    1c84:	00 97       	sbiw	r24, 0x00	; 0
    1c86:	d1 f0       	breq	.+52     	; 0x1cbc <DIO_VoidSetPinValue+0x184>
    1c88:	2e 81       	ldd	r18, Y+6	; 0x06
    1c8a:	3f 81       	ldd	r19, Y+7	; 0x07
    1c8c:	21 30       	cpi	r18, 0x01	; 1
    1c8e:	31 05       	cpc	r19, r1
    1c90:	09 f0       	breq	.+2      	; 0x1c94 <DIO_VoidSetPinValue+0x15c>
    1c92:	5f c0       	rjmp	.+190    	; 0x1d52 <DIO_VoidSetPinValue+0x21a>
			case HIGH:
				Set_Bit(PORTC,Copy_u8PinNumber);
    1c94:	a5 e3       	ldi	r26, 0x35	; 53
    1c96:	b0 e0       	ldi	r27, 0x00	; 0
    1c98:	e5 e3       	ldi	r30, 0x35	; 53
    1c9a:	f0 e0       	ldi	r31, 0x00	; 0
    1c9c:	80 81       	ld	r24, Z
    1c9e:	48 2f       	mov	r20, r24
    1ca0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca2:	28 2f       	mov	r18, r24
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	81 e0       	ldi	r24, 0x01	; 1
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	02 2e       	mov	r0, r18
    1cac:	02 c0       	rjmp	.+4      	; 0x1cb2 <DIO_VoidSetPinValue+0x17a>
    1cae:	88 0f       	add	r24, r24
    1cb0:	99 1f       	adc	r25, r25
    1cb2:	0a 94       	dec	r0
    1cb4:	e2 f7       	brpl	.-8      	; 0x1cae <DIO_VoidSetPinValue+0x176>
    1cb6:	84 2b       	or	r24, r20
    1cb8:	8c 93       	st	X, r24
    1cba:	4b c0       	rjmp	.+150    	; 0x1d52 <DIO_VoidSetPinValue+0x21a>
				break;
			case LOW:
				CLR_Bit(PORTC,Copy_u8PinNumber);
    1cbc:	a5 e3       	ldi	r26, 0x35	; 53
    1cbe:	b0 e0       	ldi	r27, 0x00	; 0
    1cc0:	e5 e3       	ldi	r30, 0x35	; 53
    1cc2:	f0 e0       	ldi	r31, 0x00	; 0
    1cc4:	80 81       	ld	r24, Z
    1cc6:	48 2f       	mov	r20, r24
    1cc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cca:	28 2f       	mov	r18, r24
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	81 e0       	ldi	r24, 0x01	; 1
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	02 2e       	mov	r0, r18
    1cd4:	02 c0       	rjmp	.+4      	; 0x1cda <DIO_VoidSetPinValue+0x1a2>
    1cd6:	88 0f       	add	r24, r24
    1cd8:	99 1f       	adc	r25, r25
    1cda:	0a 94       	dec	r0
    1cdc:	e2 f7       	brpl	.-8      	; 0x1cd6 <DIO_VoidSetPinValue+0x19e>
    1cde:	80 95       	com	r24
    1ce0:	84 23       	and	r24, r20
    1ce2:	8c 93       	st	X, r24
    1ce4:	36 c0       	rjmp	.+108    	; 0x1d52 <DIO_VoidSetPinValue+0x21a>
				break;}
		break;
	case DIO_PORTD:
		switch(Copy_PinValue){
    1ce6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce8:	28 2f       	mov	r18, r24
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	3d 83       	std	Y+5, r19	; 0x05
    1cee:	2c 83       	std	Y+4, r18	; 0x04
    1cf0:	8c 81       	ldd	r24, Y+4	; 0x04
    1cf2:	9d 81       	ldd	r25, Y+5	; 0x05
    1cf4:	00 97       	sbiw	r24, 0x00	; 0
    1cf6:	c9 f0       	breq	.+50     	; 0x1d2a <DIO_VoidSetPinValue+0x1f2>
    1cf8:	2c 81       	ldd	r18, Y+4	; 0x04
    1cfa:	3d 81       	ldd	r19, Y+5	; 0x05
    1cfc:	21 30       	cpi	r18, 0x01	; 1
    1cfe:	31 05       	cpc	r19, r1
    1d00:	41 f5       	brne	.+80     	; 0x1d52 <DIO_VoidSetPinValue+0x21a>
			case HIGH:
				Set_Bit(PORTD,Copy_u8PinNumber);
    1d02:	a2 e3       	ldi	r26, 0x32	; 50
    1d04:	b0 e0       	ldi	r27, 0x00	; 0
    1d06:	e2 e3       	ldi	r30, 0x32	; 50
    1d08:	f0 e0       	ldi	r31, 0x00	; 0
    1d0a:	80 81       	ld	r24, Z
    1d0c:	48 2f       	mov	r20, r24
    1d0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d10:	28 2f       	mov	r18, r24
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	81 e0       	ldi	r24, 0x01	; 1
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	02 2e       	mov	r0, r18
    1d1a:	02 c0       	rjmp	.+4      	; 0x1d20 <DIO_VoidSetPinValue+0x1e8>
    1d1c:	88 0f       	add	r24, r24
    1d1e:	99 1f       	adc	r25, r25
    1d20:	0a 94       	dec	r0
    1d22:	e2 f7       	brpl	.-8      	; 0x1d1c <DIO_VoidSetPinValue+0x1e4>
    1d24:	84 2b       	or	r24, r20
    1d26:	8c 93       	st	X, r24
    1d28:	14 c0       	rjmp	.+40     	; 0x1d52 <DIO_VoidSetPinValue+0x21a>
				break;
			case LOW:
				CLR_Bit(PORTD,Copy_u8PinNumber);
    1d2a:	a2 e3       	ldi	r26, 0x32	; 50
    1d2c:	b0 e0       	ldi	r27, 0x00	; 0
    1d2e:	e2 e3       	ldi	r30, 0x32	; 50
    1d30:	f0 e0       	ldi	r31, 0x00	; 0
    1d32:	80 81       	ld	r24, Z
    1d34:	48 2f       	mov	r20, r24
    1d36:	8a 81       	ldd	r24, Y+2	; 0x02
    1d38:	28 2f       	mov	r18, r24
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	81 e0       	ldi	r24, 0x01	; 1
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	02 2e       	mov	r0, r18
    1d42:	02 c0       	rjmp	.+4      	; 0x1d48 <DIO_VoidSetPinValue+0x210>
    1d44:	88 0f       	add	r24, r24
    1d46:	99 1f       	adc	r25, r25
    1d48:	0a 94       	dec	r0
    1d4a:	e2 f7       	brpl	.-8      	; 0x1d44 <DIO_VoidSetPinValue+0x20c>
    1d4c:	80 95       	com	r24
    1d4e:	84 23       	and	r24, r20
    1d50:	8c 93       	st	X, r24
				break;}
		break;

	}
}
    1d52:	2d 96       	adiw	r28, 0x0d	; 13
    1d54:	0f b6       	in	r0, 0x3f	; 63
    1d56:	f8 94       	cli
    1d58:	de bf       	out	0x3e, r29	; 62
    1d5a:	0f be       	out	0x3f, r0	; 63
    1d5c:	cd bf       	out	0x3d, r28	; 61
    1d5e:	cf 91       	pop	r28
    1d60:	df 91       	pop	r29
    1d62:	08 95       	ret

00001d64 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortName,u8 Copy_u8PinNumber){
    1d64:	df 93       	push	r29
    1d66:	cf 93       	push	r28
    1d68:	00 d0       	rcall	.+0      	; 0x1d6a <DIO_u8GetPinValue+0x6>
    1d6a:	00 d0       	rcall	.+0      	; 0x1d6c <DIO_u8GetPinValue+0x8>
    1d6c:	0f 92       	push	r0
    1d6e:	cd b7       	in	r28, 0x3d	; 61
    1d70:	de b7       	in	r29, 0x3e	; 62
    1d72:	8a 83       	std	Y+2, r24	; 0x02
    1d74:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8PinValue;
	switch(Copy_u8PortName){
    1d76:	8a 81       	ldd	r24, Y+2	; 0x02
    1d78:	28 2f       	mov	r18, r24
    1d7a:	30 e0       	ldi	r19, 0x00	; 0
    1d7c:	3d 83       	std	Y+5, r19	; 0x05
    1d7e:	2c 83       	std	Y+4, r18	; 0x04
    1d80:	4c 81       	ldd	r20, Y+4	; 0x04
    1d82:	5d 81       	ldd	r21, Y+5	; 0x05
    1d84:	41 30       	cpi	r20, 0x01	; 1
    1d86:	51 05       	cpc	r21, r1
    1d88:	41 f1       	breq	.+80     	; 0x1dda <DIO_u8GetPinValue+0x76>
    1d8a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d8c:	9d 81       	ldd	r25, Y+5	; 0x05
    1d8e:	82 30       	cpi	r24, 0x02	; 2
    1d90:	91 05       	cpc	r25, r1
    1d92:	34 f4       	brge	.+12     	; 0x1da0 <DIO_u8GetPinValue+0x3c>
    1d94:	2c 81       	ldd	r18, Y+4	; 0x04
    1d96:	3d 81       	ldd	r19, Y+5	; 0x05
    1d98:	21 15       	cp	r18, r1
    1d9a:	31 05       	cpc	r19, r1
    1d9c:	61 f0       	breq	.+24     	; 0x1db6 <DIO_u8GetPinValue+0x52>
    1d9e:	52 c0       	rjmp	.+164    	; 0x1e44 <DIO_u8GetPinValue+0xe0>
    1da0:	4c 81       	ldd	r20, Y+4	; 0x04
    1da2:	5d 81       	ldd	r21, Y+5	; 0x05
    1da4:	42 30       	cpi	r20, 0x02	; 2
    1da6:	51 05       	cpc	r21, r1
    1da8:	51 f1       	breq	.+84     	; 0x1dfe <DIO_u8GetPinValue+0x9a>
    1daa:	8c 81       	ldd	r24, Y+4	; 0x04
    1dac:	9d 81       	ldd	r25, Y+5	; 0x05
    1dae:	83 30       	cpi	r24, 0x03	; 3
    1db0:	91 05       	cpc	r25, r1
    1db2:	b9 f1       	breq	.+110    	; 0x1e22 <DIO_u8GetPinValue+0xbe>
    1db4:	47 c0       	rjmp	.+142    	; 0x1e44 <DIO_u8GetPinValue+0xe0>
	case DIO_PORTA:
		Local_u8PinValue = Get_Bit(PINA,Copy_u8PinNumber);
    1db6:	e9 e3       	ldi	r30, 0x39	; 57
    1db8:	f0 e0       	ldi	r31, 0x00	; 0
    1dba:	80 81       	ld	r24, Z
    1dbc:	28 2f       	mov	r18, r24
    1dbe:	30 e0       	ldi	r19, 0x00	; 0
    1dc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc2:	88 2f       	mov	r24, r24
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	a9 01       	movw	r20, r18
    1dc8:	02 c0       	rjmp	.+4      	; 0x1dce <DIO_u8GetPinValue+0x6a>
    1dca:	55 95       	asr	r21
    1dcc:	47 95       	ror	r20
    1dce:	8a 95       	dec	r24
    1dd0:	e2 f7       	brpl	.-8      	; 0x1dca <DIO_u8GetPinValue+0x66>
    1dd2:	ca 01       	movw	r24, r20
    1dd4:	81 70       	andi	r24, 0x01	; 1
    1dd6:	89 83       	std	Y+1, r24	; 0x01
    1dd8:	35 c0       	rjmp	.+106    	; 0x1e44 <DIO_u8GetPinValue+0xe0>
		break;
	case DIO_PORTB:
		Local_u8PinValue = Get_Bit(PINB,Copy_u8PinNumber);
    1dda:	e6 e3       	ldi	r30, 0x36	; 54
    1ddc:	f0 e0       	ldi	r31, 0x00	; 0
    1dde:	80 81       	ld	r24, Z
    1de0:	28 2f       	mov	r18, r24
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	8b 81       	ldd	r24, Y+3	; 0x03
    1de6:	88 2f       	mov	r24, r24
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	a9 01       	movw	r20, r18
    1dec:	02 c0       	rjmp	.+4      	; 0x1df2 <DIO_u8GetPinValue+0x8e>
    1dee:	55 95       	asr	r21
    1df0:	47 95       	ror	r20
    1df2:	8a 95       	dec	r24
    1df4:	e2 f7       	brpl	.-8      	; 0x1dee <DIO_u8GetPinValue+0x8a>
    1df6:	ca 01       	movw	r24, r20
    1df8:	81 70       	andi	r24, 0x01	; 1
    1dfa:	89 83       	std	Y+1, r24	; 0x01
    1dfc:	23 c0       	rjmp	.+70     	; 0x1e44 <DIO_u8GetPinValue+0xe0>
		break;
	case DIO_PORTC:
		Local_u8PinValue = Get_Bit(PINC,Copy_u8PinNumber);
    1dfe:	e3 e3       	ldi	r30, 0x33	; 51
    1e00:	f0 e0       	ldi	r31, 0x00	; 0
    1e02:	80 81       	ld	r24, Z
    1e04:	28 2f       	mov	r18, r24
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0a:	88 2f       	mov	r24, r24
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	a9 01       	movw	r20, r18
    1e10:	02 c0       	rjmp	.+4      	; 0x1e16 <DIO_u8GetPinValue+0xb2>
    1e12:	55 95       	asr	r21
    1e14:	47 95       	ror	r20
    1e16:	8a 95       	dec	r24
    1e18:	e2 f7       	brpl	.-8      	; 0x1e12 <DIO_u8GetPinValue+0xae>
    1e1a:	ca 01       	movw	r24, r20
    1e1c:	81 70       	andi	r24, 0x01	; 1
    1e1e:	89 83       	std	Y+1, r24	; 0x01
    1e20:	11 c0       	rjmp	.+34     	; 0x1e44 <DIO_u8GetPinValue+0xe0>
		break;
	case DIO_PORTD:
		Local_u8PinValue = Get_Bit(PIND,Copy_u8PinNumber);
    1e22:	e0 e3       	ldi	r30, 0x30	; 48
    1e24:	f0 e0       	ldi	r31, 0x00	; 0
    1e26:	80 81       	ld	r24, Z
    1e28:	28 2f       	mov	r18, r24
    1e2a:	30 e0       	ldi	r19, 0x00	; 0
    1e2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2e:	88 2f       	mov	r24, r24
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	a9 01       	movw	r20, r18
    1e34:	02 c0       	rjmp	.+4      	; 0x1e3a <DIO_u8GetPinValue+0xd6>
    1e36:	55 95       	asr	r21
    1e38:	47 95       	ror	r20
    1e3a:	8a 95       	dec	r24
    1e3c:	e2 f7       	brpl	.-8      	; 0x1e36 <DIO_u8GetPinValue+0xd2>
    1e3e:	ca 01       	movw	r24, r20
    1e40:	81 70       	andi	r24, 0x01	; 1
    1e42:	89 83       	std	Y+1, r24	; 0x01
			break;
	}


	return Local_u8PinValue;
    1e44:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e46:	0f 90       	pop	r0
    1e48:	0f 90       	pop	r0
    1e4a:	0f 90       	pop	r0
    1e4c:	0f 90       	pop	r0
    1e4e:	0f 90       	pop	r0
    1e50:	cf 91       	pop	r28
    1e52:	df 91       	pop	r29
    1e54:	08 95       	ret

00001e56 <DIO_VoidSetPortDirection>:


void DIO_VoidSetPortDirection(u8 Copy_u8PortName, u8 Copy_u8PortDirection){
    1e56:	df 93       	push	r29
    1e58:	cf 93       	push	r28
    1e5a:	00 d0       	rcall	.+0      	; 0x1e5c <DIO_VoidSetPortDirection+0x6>
    1e5c:	00 d0       	rcall	.+0      	; 0x1e5e <DIO_VoidSetPortDirection+0x8>
    1e5e:	00 d0       	rcall	.+0      	; 0x1e60 <DIO_VoidSetPortDirection+0xa>
    1e60:	cd b7       	in	r28, 0x3d	; 61
    1e62:	de b7       	in	r29, 0x3e	; 62
    1e64:	8b 83       	std	Y+3, r24	; 0x03
    1e66:	6c 83       	std	Y+4, r22	; 0x04
	u8* SelPort = 0x00;
    1e68:	1a 82       	std	Y+2, r1	; 0x02
    1e6a:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8PortName){
    1e6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6e:	28 2f       	mov	r18, r24
    1e70:	30 e0       	ldi	r19, 0x00	; 0
    1e72:	3e 83       	std	Y+6, r19	; 0x06
    1e74:	2d 83       	std	Y+5, r18	; 0x05
    1e76:	8d 81       	ldd	r24, Y+5	; 0x05
    1e78:	9e 81       	ldd	r25, Y+6	; 0x06
    1e7a:	81 30       	cpi	r24, 0x01	; 1
    1e7c:	91 05       	cpc	r25, r1
    1e7e:	d1 f0       	breq	.+52     	; 0x1eb4 <DIO_VoidSetPortDirection+0x5e>
    1e80:	2d 81       	ldd	r18, Y+5	; 0x05
    1e82:	3e 81       	ldd	r19, Y+6	; 0x06
    1e84:	22 30       	cpi	r18, 0x02	; 2
    1e86:	31 05       	cpc	r19, r1
    1e88:	2c f4       	brge	.+10     	; 0x1e94 <DIO_VoidSetPortDirection+0x3e>
    1e8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e8e:	00 97       	sbiw	r24, 0x00	; 0
    1e90:	61 f0       	breq	.+24     	; 0x1eaa <DIO_VoidSetPortDirection+0x54>
    1e92:	1e c0       	rjmp	.+60     	; 0x1ed0 <DIO_VoidSetPortDirection+0x7a>
    1e94:	2d 81       	ldd	r18, Y+5	; 0x05
    1e96:	3e 81       	ldd	r19, Y+6	; 0x06
    1e98:	22 30       	cpi	r18, 0x02	; 2
    1e9a:	31 05       	cpc	r19, r1
    1e9c:	81 f0       	breq	.+32     	; 0x1ebe <DIO_VoidSetPortDirection+0x68>
    1e9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1ea0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ea2:	83 30       	cpi	r24, 0x03	; 3
    1ea4:	91 05       	cpc	r25, r1
    1ea6:	81 f0       	breq	.+32     	; 0x1ec8 <DIO_VoidSetPortDirection+0x72>
    1ea8:	13 c0       	rjmp	.+38     	; 0x1ed0 <DIO_VoidSetPortDirection+0x7a>
		case DIO_PORTA:
			SelPort = &DDRA;
    1eaa:	8a e3       	ldi	r24, 0x3A	; 58
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	9a 83       	std	Y+2, r25	; 0x02
    1eb0:	89 83       	std	Y+1, r24	; 0x01
    1eb2:	0e c0       	rjmp	.+28     	; 0x1ed0 <DIO_VoidSetPortDirection+0x7a>
			break;
		case DIO_PORTB:
			SelPort = &DDRB;
    1eb4:	87 e3       	ldi	r24, 0x37	; 55
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	9a 83       	std	Y+2, r25	; 0x02
    1eba:	89 83       	std	Y+1, r24	; 0x01
    1ebc:	09 c0       	rjmp	.+18     	; 0x1ed0 <DIO_VoidSetPortDirection+0x7a>
			break;
		case DIO_PORTC:
			SelPort = &DDRC;
    1ebe:	84 e3       	ldi	r24, 0x34	; 52
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	9a 83       	std	Y+2, r25	; 0x02
    1ec4:	89 83       	std	Y+1, r24	; 0x01
    1ec6:	04 c0       	rjmp	.+8      	; 0x1ed0 <DIO_VoidSetPortDirection+0x7a>
			break;
		case DIO_PORTD:
			SelPort = &DDRD;
    1ec8:	81 e3       	ldi	r24, 0x31	; 49
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	9a 83       	std	Y+2, r25	; 0x02
    1ece:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	* SelPort = Copy_u8PortDirection;
    1ed0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ed2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ed4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ed6:	80 83       	st	Z, r24
}
    1ed8:	26 96       	adiw	r28, 0x06	; 6
    1eda:	0f b6       	in	r0, 0x3f	; 63
    1edc:	f8 94       	cli
    1ede:	de bf       	out	0x3e, r29	; 62
    1ee0:	0f be       	out	0x3f, r0	; 63
    1ee2:	cd bf       	out	0x3d, r28	; 61
    1ee4:	cf 91       	pop	r28
    1ee6:	df 91       	pop	r29
    1ee8:	08 95       	ret

00001eea <DIO_VoidSetPortValue>:

void DIO_VoidSetPortValue(u8 Copy_u8PortName, u8 Copy_u8PortValue){
    1eea:	df 93       	push	r29
    1eec:	cf 93       	push	r28
    1eee:	00 d0       	rcall	.+0      	; 0x1ef0 <DIO_VoidSetPortValue+0x6>
    1ef0:	00 d0       	rcall	.+0      	; 0x1ef2 <DIO_VoidSetPortValue+0x8>
    1ef2:	00 d0       	rcall	.+0      	; 0x1ef4 <DIO_VoidSetPortValue+0xa>
    1ef4:	cd b7       	in	r28, 0x3d	; 61
    1ef6:	de b7       	in	r29, 0x3e	; 62
    1ef8:	8b 83       	std	Y+3, r24	; 0x03
    1efa:	6c 83       	std	Y+4, r22	; 0x04
	u8* SelPort = 0x00;
    1efc:	1a 82       	std	Y+2, r1	; 0x02
    1efe:	19 82       	std	Y+1, r1	; 0x01
		switch(Copy_u8PortName){
    1f00:	8b 81       	ldd	r24, Y+3	; 0x03
    1f02:	28 2f       	mov	r18, r24
    1f04:	30 e0       	ldi	r19, 0x00	; 0
    1f06:	3e 83       	std	Y+6, r19	; 0x06
    1f08:	2d 83       	std	Y+5, r18	; 0x05
    1f0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f0e:	81 30       	cpi	r24, 0x01	; 1
    1f10:	91 05       	cpc	r25, r1
    1f12:	d1 f0       	breq	.+52     	; 0x1f48 <DIO_VoidSetPortValue+0x5e>
    1f14:	2d 81       	ldd	r18, Y+5	; 0x05
    1f16:	3e 81       	ldd	r19, Y+6	; 0x06
    1f18:	22 30       	cpi	r18, 0x02	; 2
    1f1a:	31 05       	cpc	r19, r1
    1f1c:	2c f4       	brge	.+10     	; 0x1f28 <DIO_VoidSetPortValue+0x3e>
    1f1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f20:	9e 81       	ldd	r25, Y+6	; 0x06
    1f22:	00 97       	sbiw	r24, 0x00	; 0
    1f24:	61 f0       	breq	.+24     	; 0x1f3e <DIO_VoidSetPortValue+0x54>
    1f26:	1e c0       	rjmp	.+60     	; 0x1f64 <DIO_VoidSetPortValue+0x7a>
    1f28:	2d 81       	ldd	r18, Y+5	; 0x05
    1f2a:	3e 81       	ldd	r19, Y+6	; 0x06
    1f2c:	22 30       	cpi	r18, 0x02	; 2
    1f2e:	31 05       	cpc	r19, r1
    1f30:	81 f0       	breq	.+32     	; 0x1f52 <DIO_VoidSetPortValue+0x68>
    1f32:	8d 81       	ldd	r24, Y+5	; 0x05
    1f34:	9e 81       	ldd	r25, Y+6	; 0x06
    1f36:	83 30       	cpi	r24, 0x03	; 3
    1f38:	91 05       	cpc	r25, r1
    1f3a:	81 f0       	breq	.+32     	; 0x1f5c <DIO_VoidSetPortValue+0x72>
    1f3c:	13 c0       	rjmp	.+38     	; 0x1f64 <DIO_VoidSetPortValue+0x7a>
			case DIO_PORTA:
				SelPort = &PORTA;
    1f3e:	8b e3       	ldi	r24, 0x3B	; 59
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	9a 83       	std	Y+2, r25	; 0x02
    1f44:	89 83       	std	Y+1, r24	; 0x01
    1f46:	0e c0       	rjmp	.+28     	; 0x1f64 <DIO_VoidSetPortValue+0x7a>
				break;
			case DIO_PORTB:
				SelPort = &PORTB;
    1f48:	88 e3       	ldi	r24, 0x38	; 56
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	9a 83       	std	Y+2, r25	; 0x02
    1f4e:	89 83       	std	Y+1, r24	; 0x01
    1f50:	09 c0       	rjmp	.+18     	; 0x1f64 <DIO_VoidSetPortValue+0x7a>
				break;
			case DIO_PORTC:
				SelPort = &PORTC;
    1f52:	85 e3       	ldi	r24, 0x35	; 53
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	9a 83       	std	Y+2, r25	; 0x02
    1f58:	89 83       	std	Y+1, r24	; 0x01
    1f5a:	04 c0       	rjmp	.+8      	; 0x1f64 <DIO_VoidSetPortValue+0x7a>
				break;
			case DIO_PORTD:
				SelPort = &PORTD;
    1f5c:	82 e3       	ldi	r24, 0x32	; 50
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	9a 83       	std	Y+2, r25	; 0x02
    1f62:	89 83       	std	Y+1, r24	; 0x01
				break;
		}
		* SelPort = Copy_u8PortValue;
    1f64:	e9 81       	ldd	r30, Y+1	; 0x01
    1f66:	fa 81       	ldd	r31, Y+2	; 0x02
    1f68:	8c 81       	ldd	r24, Y+4	; 0x04
    1f6a:	80 83       	st	Z, r24
}
    1f6c:	26 96       	adiw	r28, 0x06	; 6
    1f6e:	0f b6       	in	r0, 0x3f	; 63
    1f70:	f8 94       	cli
    1f72:	de bf       	out	0x3e, r29	; 62
    1f74:	0f be       	out	0x3f, r0	; 63
    1f76:	cd bf       	out	0x3d, r28	; 61
    1f78:	cf 91       	pop	r28
    1f7a:	df 91       	pop	r29
    1f7c:	08 95       	ret

00001f7e <ADC_VoidInit>:
#include"../../LIB/BIT_MATH.h"
#include"../../LIB/STD_Type.h"

#include"ADC_Interface.h"

void ADC_VoidInit(void){
    1f7e:	df 93       	push	r29
    1f80:	cf 93       	push	r28
    1f82:	cd b7       	in	r28, 0x3d	; 61
    1f84:	de b7       	in	r29, 0x3e	; 62
	//set reference voltage ===> AVCC
	Set_Bit(ADMUX,6);
    1f86:	a7 e2       	ldi	r26, 0x27	; 39
    1f88:	b0 e0       	ldi	r27, 0x00	; 0
    1f8a:	e7 e2       	ldi	r30, 0x27	; 39
    1f8c:	f0 e0       	ldi	r31, 0x00	; 0
    1f8e:	80 81       	ld	r24, Z
    1f90:	80 64       	ori	r24, 0x40	; 64
    1f92:	8c 93       	st	X, r24
	CLR_Bit(ADMUX,7);
    1f94:	a7 e2       	ldi	r26, 0x27	; 39
    1f96:	b0 e0       	ldi	r27, 0x00	; 0
    1f98:	e7 e2       	ldi	r30, 0x27	; 39
    1f9a:	f0 e0       	ldi	r31, 0x00	; 0
    1f9c:	80 81       	ld	r24, Z
    1f9e:	8f 77       	andi	r24, 0x7F	; 127
    1fa0:	8c 93       	st	X, r24

	//set left adjustment
	Set_Bit(ADMUX,5);
    1fa2:	a7 e2       	ldi	r26, 0x27	; 39
    1fa4:	b0 e0       	ldi	r27, 0x00	; 0
    1fa6:	e7 e2       	ldi	r30, 0x27	; 39
    1fa8:	f0 e0       	ldi	r31, 0x00	; 0
    1faa:	80 81       	ld	r24, Z
    1fac:	80 62       	ori	r24, 0x20	; 32
    1fae:	8c 93       	st	X, r24

	//set ADC Prescaller  ===> 64
	CLR_Bit(ADCSRA,0);
    1fb0:	a6 e2       	ldi	r26, 0x26	; 38
    1fb2:	b0 e0       	ldi	r27, 0x00	; 0
    1fb4:	e6 e2       	ldi	r30, 0x26	; 38
    1fb6:	f0 e0       	ldi	r31, 0x00	; 0
    1fb8:	80 81       	ld	r24, Z
    1fba:	8e 7f       	andi	r24, 0xFE	; 254
    1fbc:	8c 93       	st	X, r24
	Set_Bit(ADCSRA,1);
    1fbe:	a6 e2       	ldi	r26, 0x26	; 38
    1fc0:	b0 e0       	ldi	r27, 0x00	; 0
    1fc2:	e6 e2       	ldi	r30, 0x26	; 38
    1fc4:	f0 e0       	ldi	r31, 0x00	; 0
    1fc6:	80 81       	ld	r24, Z
    1fc8:	82 60       	ori	r24, 0x02	; 2
    1fca:	8c 93       	st	X, r24
	Set_Bit(ADCSRA,2);
    1fcc:	a6 e2       	ldi	r26, 0x26	; 38
    1fce:	b0 e0       	ldi	r27, 0x00	; 0
    1fd0:	e6 e2       	ldi	r30, 0x26	; 38
    1fd2:	f0 e0       	ldi	r31, 0x00	; 0
    1fd4:	80 81       	ld	r24, Z
    1fd6:	84 60       	ori	r24, 0x04	; 4
    1fd8:	8c 93       	st	X, r24

	//Enable ADC
	Set_Bit(ADCSRA,7);
    1fda:	a6 e2       	ldi	r26, 0x26	; 38
    1fdc:	b0 e0       	ldi	r27, 0x00	; 0
    1fde:	e6 e2       	ldi	r30, 0x26	; 38
    1fe0:	f0 e0       	ldi	r31, 0x00	; 0
    1fe2:	80 81       	ld	r24, Z
    1fe4:	80 68       	ori	r24, 0x80	; 128
    1fe6:	8c 93       	st	X, r24


}
    1fe8:	cf 91       	pop	r28
    1fea:	df 91       	pop	r29
    1fec:	08 95       	ret

00001fee <ADC_u8StartConversion>:

u8 ADC_u8StartConversion(u8 Copy_u8ChannelNumber){
    1fee:	df 93       	push	r29
    1ff0:	cf 93       	push	r28
    1ff2:	0f 92       	push	r0
    1ff4:	cd b7       	in	r28, 0x3d	; 61
    1ff6:	de b7       	in	r29, 0x3e	; 62
    1ff8:	89 83       	std	Y+1, r24	; 0x01
	//ADC Channel Select
	ADMUX&=0b11100000;
    1ffa:	a7 e2       	ldi	r26, 0x27	; 39
    1ffc:	b0 e0       	ldi	r27, 0x00	; 0
    1ffe:	e7 e2       	ldi	r30, 0x27	; 39
    2000:	f0 e0       	ldi	r31, 0x00	; 0
    2002:	80 81       	ld	r24, Z
    2004:	80 7e       	andi	r24, 0xE0	; 224
    2006:	8c 93       	st	X, r24
	ADMUX|=Copy_u8ChannelNumber;
    2008:	a7 e2       	ldi	r26, 0x27	; 39
    200a:	b0 e0       	ldi	r27, 0x00	; 0
    200c:	e7 e2       	ldi	r30, 0x27	; 39
    200e:	f0 e0       	ldi	r31, 0x00	; 0
    2010:	90 81       	ld	r25, Z
    2012:	89 81       	ldd	r24, Y+1	; 0x01
    2014:	89 2b       	or	r24, r25
    2016:	8c 93       	st	X, r24

	//ADC Start Conversion
	Set_Bit(ADCSRA,6);
    2018:	a6 e2       	ldi	r26, 0x26	; 38
    201a:	b0 e0       	ldi	r27, 0x00	; 0
    201c:	e6 e2       	ldi	r30, 0x26	; 38
    201e:	f0 e0       	ldi	r31, 0x00	; 0
    2020:	80 81       	ld	r24, Z
    2022:	80 64       	ori	r24, 0x40	; 64
    2024:	8c 93       	st	X, r24

	//wait until conversion is completed
	while(!Get_Bit(ADCSRA,4));
    2026:	e6 e2       	ldi	r30, 0x26	; 38
    2028:	f0 e0       	ldi	r31, 0x00	; 0
    202a:	80 81       	ld	r24, Z
    202c:	82 95       	swap	r24
    202e:	8f 70       	andi	r24, 0x0F	; 15
    2030:	88 2f       	mov	r24, r24
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	81 70       	andi	r24, 0x01	; 1
    2036:	90 70       	andi	r25, 0x00	; 0
    2038:	00 97       	sbiw	r24, 0x00	; 0
    203a:	a9 f3       	breq	.-22     	; 0x2026 <ADC_u8StartConversion+0x38>

	//Clear Flag
	Set_Bit(ADCSRA,4);
    203c:	a6 e2       	ldi	r26, 0x26	; 38
    203e:	b0 e0       	ldi	r27, 0x00	; 0
    2040:	e6 e2       	ldi	r30, 0x26	; 38
    2042:	f0 e0       	ldi	r31, 0x00	; 0
    2044:	80 81       	ld	r24, Z
    2046:	80 61       	ori	r24, 0x10	; 16
    2048:	8c 93       	st	X, r24

	//return value from ADCH
	return ADCH;
    204a:	e5 e2       	ldi	r30, 0x25	; 37
    204c:	f0 e0       	ldi	r31, 0x00	; 0
    204e:	80 81       	ld	r24, Z
}
    2050:	0f 90       	pop	r0
    2052:	cf 91       	pop	r28
    2054:	df 91       	pop	r29
    2056:	08 95       	ret

00002058 <Servo_VoidInit>:
#include"../../LIB/STD_Type.h"

#include"../../MCAL/TIMER/TIMER_Interface.h"
 u16 Ticks=0;

 void Servo_VoidInit(void){
    2058:	df 93       	push	r29
    205a:	cf 93       	push	r28
    205c:	cd b7       	in	r28, 0x3d	; 61
    205e:	de b7       	in	r29, 0x3e	; 62
		TIMER_VoidTimer1Init(PWM,10);
    2060:	82 e0       	ldi	r24, 0x02	; 2
    2062:	6a e0       	ldi	r22, 0x0A	; 10
    2064:	0e 94 b8 08 	call	0x1170	; 0x1170 <TIMER_VoidTimer1Init>
		TIMER_VoidSetOverFlow(20000);
    2068:	80 e2       	ldi	r24, 0x20	; 32
    206a:	9e e4       	ldi	r25, 0x4E	; 78
    206c:	0e 94 5d 09 	call	0x12ba	; 0x12ba <TIMER_VoidSetOverFlow>
 }
    2070:	cf 91       	pop	r28
    2072:	df 91       	pop	r29
    2074:	08 95       	ret

00002076 <Servo_VoidDegree>:

void Servo_VoidDegree(u8 Copy_u8Degree){
    2076:	df 93       	push	r29
    2078:	cf 93       	push	r28
    207a:	00 d0       	rcall	.+0      	; 0x207c <Servo_VoidDegree+0x6>
    207c:	00 d0       	rcall	.+0      	; 0x207e <Servo_VoidDegree+0x8>
    207e:	0f 92       	push	r0
    2080:	cd b7       	in	r28, 0x3d	; 61
    2082:	de b7       	in	r29, 0x3e	; 62
    2084:	8d 83       	std	Y+5, r24	; 0x05
	if(Copy_u8Degree>180)
    2086:	8d 81       	ldd	r24, Y+5	; 0x05
    2088:	85 3b       	cpi	r24, 0xB5	; 181
    208a:	10 f0       	brcs	.+4      	; 0x2090 <Servo_VoidDegree+0x1a>
		Copy_u8Degree = 180;
    208c:	84 eb       	ldi	r24, 0xB4	; 180
    208e:	8d 83       	std	Y+5, r24	; 0x05
	f32 Ton = (1/180.0) * Copy_u8Degree + 1;
    2090:	8d 81       	ldd	r24, Y+5	; 0x05
    2092:	88 2f       	mov	r24, r24
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	aa 27       	eor	r26, r26
    2098:	97 fd       	sbrc	r25, 7
    209a:	a0 95       	com	r26
    209c:	ba 2f       	mov	r27, r26
    209e:	bc 01       	movw	r22, r24
    20a0:	cd 01       	movw	r24, r26
    20a2:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    20a6:	dc 01       	movw	r26, r24
    20a8:	cb 01       	movw	r24, r22
    20aa:	bc 01       	movw	r22, r24
    20ac:	cd 01       	movw	r24, r26
    20ae:	21 e6       	ldi	r18, 0x61	; 97
    20b0:	3b e0       	ldi	r19, 0x0B	; 11
    20b2:	46 eb       	ldi	r20, 0xB6	; 182
    20b4:	5b e3       	ldi	r21, 0x3B	; 59
    20b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ba:	dc 01       	movw	r26, r24
    20bc:	cb 01       	movw	r24, r22
    20be:	bc 01       	movw	r22, r24
    20c0:	cd 01       	movw	r24, r26
    20c2:	20 e0       	ldi	r18, 0x00	; 0
    20c4:	30 e0       	ldi	r19, 0x00	; 0
    20c6:	40 e8       	ldi	r20, 0x80	; 128
    20c8:	5f e3       	ldi	r21, 0x3F	; 63
    20ca:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    20ce:	dc 01       	movw	r26, r24
    20d0:	cb 01       	movw	r24, r22
    20d2:	89 83       	std	Y+1, r24	; 0x01
    20d4:	9a 83       	std	Y+2, r25	; 0x02
    20d6:	ab 83       	std	Y+3, r26	; 0x03
    20d8:	bc 83       	std	Y+4, r27	; 0x04
	Ticks = Ton * 1000;
    20da:	69 81       	ldd	r22, Y+1	; 0x01
    20dc:	7a 81       	ldd	r23, Y+2	; 0x02
    20de:	8b 81       	ldd	r24, Y+3	; 0x03
    20e0:	9c 81       	ldd	r25, Y+4	; 0x04
    20e2:	20 e0       	ldi	r18, 0x00	; 0
    20e4:	30 e0       	ldi	r19, 0x00	; 0
    20e6:	4a e7       	ldi	r20, 0x7A	; 122
    20e8:	54 e4       	ldi	r21, 0x44	; 68
    20ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ee:	dc 01       	movw	r26, r24
    20f0:	cb 01       	movw	r24, r22
    20f2:	bc 01       	movw	r22, r24
    20f4:	cd 01       	movw	r24, r26
    20f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20fa:	dc 01       	movw	r26, r24
    20fc:	cb 01       	movw	r24, r22
    20fe:	90 93 8e 01 	sts	0x018E, r25
    2102:	80 93 8d 01 	sts	0x018D, r24
	TIMER_VoidTimer1ChannelASetCompareValue(Ticks);
    2106:	80 91 8d 01 	lds	r24, 0x018D
    210a:	90 91 8e 01 	lds	r25, 0x018E
    210e:	0e 94 6f 09 	call	0x12de	; 0x12de <TIMER_VoidTimer1ChannelASetCompareValue>
}
    2112:	0f 90       	pop	r0
    2114:	0f 90       	pop	r0
    2116:	0f 90       	pop	r0
    2118:	0f 90       	pop	r0
    211a:	0f 90       	pop	r0
    211c:	cf 91       	pop	r28
    211e:	df 91       	pop	r29
    2120:	08 95       	ret

00002122 <Servo_VoidReset>:

void Servo_VoidReset(void){
    2122:	df 93       	push	r29
    2124:	cf 93       	push	r28
    2126:	cd b7       	in	r28, 0x3d	; 61
    2128:	de b7       	in	r29, 0x3e	; 62
	TIMER_VoidTimer1ChannelASetCompareValue(0);
    212a:	80 e0       	ldi	r24, 0x00	; 0
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	0e 94 6f 09 	call	0x12de	; 0x12de <TIMER_VoidTimer1ChannelASetCompareValue>
}
    2132:	cf 91       	pop	r28
    2134:	df 91       	pop	r29
    2136:	08 95       	ret

00002138 <Servo_u16GetTicks>:

u16 Servo_u16GetTicks(void){
    2138:	df 93       	push	r29
    213a:	cf 93       	push	r28
    213c:	cd b7       	in	r28, 0x3d	; 61
    213e:	de b7       	in	r29, 0x3e	; 62
	return Ticks;
    2140:	80 91 8d 01 	lds	r24, 0x018D
    2144:	90 91 8e 01 	lds	r25, 0x018E
}
    2148:	cf 91       	pop	r28
    214a:	df 91       	pop	r29
    214c:	08 95       	ret

0000214e <LCD_VoidSendData>:
#include"../../LIB/BIT_MATH.h"
#include"../../MCAL/Driver_DIO_V1/DIO_Interface.h"
#include"LCD_Interface.h"


void LCD_VoidSendData(u8 Copy_u8Data){
    214e:	df 93       	push	r29
    2150:	cf 93       	push	r28
    2152:	cd b7       	in	r28, 0x3d	; 61
    2154:	de b7       	in	r29, 0x3e	; 62
    2156:	2f 97       	sbiw	r28, 0x0f	; 15
    2158:	0f b6       	in	r0, 0x3f	; 63
    215a:	f8 94       	cli
    215c:	de bf       	out	0x3e, r29	; 62
    215e:	0f be       	out	0x3f, r0	; 63
    2160:	cd bf       	out	0x3d, r28	; 61
    2162:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_VoidSetPinValue(LCD_RS_PORT,LCD_RS_PIN,HIGH);//Send Command
    2164:	83 e0       	ldi	r24, 0x03	; 3
    2166:	60 e0       	ldi	r22, 0x00	; 0
    2168:	41 e0       	ldi	r20, 0x01	; 1
    216a:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(LCD_RW_PORT,LCD_RW_PIN,LOW); //Write
    216e:	83 e0       	ldi	r24, 0x03	; 3
    2170:	61 e0       	ldi	r22, 0x01	; 1
    2172:	40 e0       	ldi	r20, 0x00	; 0
    2174:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <DIO_VoidSetPinValue>
	DIO_VoidSetPortValue(LCD_DATA_PORT,Copy_u8Data);
    2178:	82 e0       	ldi	r24, 0x02	; 2
    217a:	6f 85       	ldd	r22, Y+15	; 0x0f
    217c:	0e 94 75 0f 	call	0x1eea	; 0x1eea <DIO_VoidSetPortValue>

	DIO_VoidSetPinValue(LCD_EN_PORT,LCD_EN_PIN,HIGH);
    2180:	83 e0       	ldi	r24, 0x03	; 3
    2182:	62 e0       	ldi	r22, 0x02	; 2
    2184:	41 e0       	ldi	r20, 0x01	; 1
    2186:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <DIO_VoidSetPinValue>
    218a:	80 e0       	ldi	r24, 0x00	; 0
    218c:	90 e0       	ldi	r25, 0x00	; 0
    218e:	a0 e0       	ldi	r26, 0x00	; 0
    2190:	b0 e4       	ldi	r27, 0x40	; 64
    2192:	8b 87       	std	Y+11, r24	; 0x0b
    2194:	9c 87       	std	Y+12, r25	; 0x0c
    2196:	ad 87       	std	Y+13, r26	; 0x0d
    2198:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    219a:	6b 85       	ldd	r22, Y+11	; 0x0b
    219c:	7c 85       	ldd	r23, Y+12	; 0x0c
    219e:	8d 85       	ldd	r24, Y+13	; 0x0d
    21a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    21a2:	20 e0       	ldi	r18, 0x00	; 0
    21a4:	30 e0       	ldi	r19, 0x00	; 0
    21a6:	4a ef       	ldi	r20, 0xFA	; 250
    21a8:	54 e4       	ldi	r21, 0x44	; 68
    21aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ae:	dc 01       	movw	r26, r24
    21b0:	cb 01       	movw	r24, r22
    21b2:	8f 83       	std	Y+7, r24	; 0x07
    21b4:	98 87       	std	Y+8, r25	; 0x08
    21b6:	a9 87       	std	Y+9, r26	; 0x09
    21b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21ba:	6f 81       	ldd	r22, Y+7	; 0x07
    21bc:	78 85       	ldd	r23, Y+8	; 0x08
    21be:	89 85       	ldd	r24, Y+9	; 0x09
    21c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    21c2:	20 e0       	ldi	r18, 0x00	; 0
    21c4:	30 e0       	ldi	r19, 0x00	; 0
    21c6:	40 e8       	ldi	r20, 0x80	; 128
    21c8:	5f e3       	ldi	r21, 0x3F	; 63
    21ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21ce:	88 23       	and	r24, r24
    21d0:	2c f4       	brge	.+10     	; 0x21dc <LCD_VoidSendData+0x8e>
		__ticks = 1;
    21d2:	81 e0       	ldi	r24, 0x01	; 1
    21d4:	90 e0       	ldi	r25, 0x00	; 0
    21d6:	9e 83       	std	Y+6, r25	; 0x06
    21d8:	8d 83       	std	Y+5, r24	; 0x05
    21da:	3f c0       	rjmp	.+126    	; 0x225a <LCD_VoidSendData+0x10c>
	else if (__tmp > 65535)
    21dc:	6f 81       	ldd	r22, Y+7	; 0x07
    21de:	78 85       	ldd	r23, Y+8	; 0x08
    21e0:	89 85       	ldd	r24, Y+9	; 0x09
    21e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    21e4:	20 e0       	ldi	r18, 0x00	; 0
    21e6:	3f ef       	ldi	r19, 0xFF	; 255
    21e8:	4f e7       	ldi	r20, 0x7F	; 127
    21ea:	57 e4       	ldi	r21, 0x47	; 71
    21ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21f0:	18 16       	cp	r1, r24
    21f2:	4c f5       	brge	.+82     	; 0x2246 <LCD_VoidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    21f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    21f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    21fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    21fc:	20 e0       	ldi	r18, 0x00	; 0
    21fe:	30 e0       	ldi	r19, 0x00	; 0
    2200:	40 e2       	ldi	r20, 0x20	; 32
    2202:	51 e4       	ldi	r21, 0x41	; 65
    2204:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2208:	dc 01       	movw	r26, r24
    220a:	cb 01       	movw	r24, r22
    220c:	bc 01       	movw	r22, r24
    220e:	cd 01       	movw	r24, r26
    2210:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2214:	dc 01       	movw	r26, r24
    2216:	cb 01       	movw	r24, r22
    2218:	9e 83       	std	Y+6, r25	; 0x06
    221a:	8d 83       	std	Y+5, r24	; 0x05
    221c:	0f c0       	rjmp	.+30     	; 0x223c <LCD_VoidSendData+0xee>
    221e:	88 ec       	ldi	r24, 0xC8	; 200
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	9c 83       	std	Y+4, r25	; 0x04
    2224:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2226:	8b 81       	ldd	r24, Y+3	; 0x03
    2228:	9c 81       	ldd	r25, Y+4	; 0x04
    222a:	01 97       	sbiw	r24, 0x01	; 1
    222c:	f1 f7       	brne	.-4      	; 0x222a <LCD_VoidSendData+0xdc>
    222e:	9c 83       	std	Y+4, r25	; 0x04
    2230:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2232:	8d 81       	ldd	r24, Y+5	; 0x05
    2234:	9e 81       	ldd	r25, Y+6	; 0x06
    2236:	01 97       	sbiw	r24, 0x01	; 1
    2238:	9e 83       	std	Y+6, r25	; 0x06
    223a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    223c:	8d 81       	ldd	r24, Y+5	; 0x05
    223e:	9e 81       	ldd	r25, Y+6	; 0x06
    2240:	00 97       	sbiw	r24, 0x00	; 0
    2242:	69 f7       	brne	.-38     	; 0x221e <LCD_VoidSendData+0xd0>
    2244:	14 c0       	rjmp	.+40     	; 0x226e <LCD_VoidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2246:	6f 81       	ldd	r22, Y+7	; 0x07
    2248:	78 85       	ldd	r23, Y+8	; 0x08
    224a:	89 85       	ldd	r24, Y+9	; 0x09
    224c:	9a 85       	ldd	r25, Y+10	; 0x0a
    224e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2252:	dc 01       	movw	r26, r24
    2254:	cb 01       	movw	r24, r22
    2256:	9e 83       	std	Y+6, r25	; 0x06
    2258:	8d 83       	std	Y+5, r24	; 0x05
    225a:	8d 81       	ldd	r24, Y+5	; 0x05
    225c:	9e 81       	ldd	r25, Y+6	; 0x06
    225e:	9a 83       	std	Y+2, r25	; 0x02
    2260:	89 83       	std	Y+1, r24	; 0x01
    2262:	89 81       	ldd	r24, Y+1	; 0x01
    2264:	9a 81       	ldd	r25, Y+2	; 0x02
    2266:	01 97       	sbiw	r24, 0x01	; 1
    2268:	f1 f7       	brne	.-4      	; 0x2266 <LCD_VoidSendData+0x118>
    226a:	9a 83       	std	Y+2, r25	; 0x02
    226c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_VoidSetPinValue(LCD_EN_PORT,LCD_EN_PIN,LOW);
    226e:	83 e0       	ldi	r24, 0x03	; 3
    2270:	62 e0       	ldi	r22, 0x02	; 2
    2272:	40 e0       	ldi	r20, 0x00	; 0
    2274:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <DIO_VoidSetPinValue>
}
    2278:	2f 96       	adiw	r28, 0x0f	; 15
    227a:	0f b6       	in	r0, 0x3f	; 63
    227c:	f8 94       	cli
    227e:	de bf       	out	0x3e, r29	; 62
    2280:	0f be       	out	0x3f, r0	; 63
    2282:	cd bf       	out	0x3d, r28	; 61
    2284:	cf 91       	pop	r28
    2286:	df 91       	pop	r29
    2288:	08 95       	ret

0000228a <LCD_VoidSendCommand>:

void LCD_VoidSendCommand(u8 Copy_u8Command){
    228a:	df 93       	push	r29
    228c:	cf 93       	push	r28
    228e:	cd b7       	in	r28, 0x3d	; 61
    2290:	de b7       	in	r29, 0x3e	; 62
    2292:	60 97       	sbiw	r28, 0x10	; 16
    2294:	0f b6       	in	r0, 0x3f	; 63
    2296:	f8 94       	cli
    2298:	de bf       	out	0x3e, r29	; 62
    229a:	0f be       	out	0x3f, r0	; 63
    229c:	cd bf       	out	0x3d, r28	; 61
    229e:	88 8b       	std	Y+16, r24	; 0x10
	DIO_VoidSetPinValue(LCD_RS_PORT,LCD_RS_PIN,LOW);//Send Command
    22a0:	83 e0       	ldi	r24, 0x03	; 3
    22a2:	60 e0       	ldi	r22, 0x00	; 0
    22a4:	40 e0       	ldi	r20, 0x00	; 0
    22a6:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <DIO_VoidSetPinValue>
		DIO_VoidSetPinValue(LCD_RW_PORT,LCD_RW_PIN,LOW); //Write
    22aa:	83 e0       	ldi	r24, 0x03	; 3
    22ac:	61 e0       	ldi	r22, 0x01	; 1
    22ae:	40 e0       	ldi	r20, 0x00	; 0
    22b0:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <DIO_VoidSetPinValue>
		for(u8 i=0;i<8;i++){
    22b4:	1f 86       	std	Y+15, r1	; 0x0f
    22b6:	17 c0       	rjmp	.+46     	; 0x22e6 <LCD_VoidSendCommand+0x5c>
			DIO_VoidSetPinValue(LCD_DATA_PORT,i,Get_Bit(Copy_u8Command,i));
    22b8:	88 89       	ldd	r24, Y+16	; 0x10
    22ba:	28 2f       	mov	r18, r24
    22bc:	30 e0       	ldi	r19, 0x00	; 0
    22be:	8f 85       	ldd	r24, Y+15	; 0x0f
    22c0:	88 2f       	mov	r24, r24
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	a9 01       	movw	r20, r18
    22c6:	02 c0       	rjmp	.+4      	; 0x22cc <LCD_VoidSendCommand+0x42>
    22c8:	55 95       	asr	r21
    22ca:	47 95       	ror	r20
    22cc:	8a 95       	dec	r24
    22ce:	e2 f7       	brpl	.-8      	; 0x22c8 <LCD_VoidSendCommand+0x3e>
    22d0:	ca 01       	movw	r24, r20
    22d2:	98 2f       	mov	r25, r24
    22d4:	91 70       	andi	r25, 0x01	; 1
    22d6:	82 e0       	ldi	r24, 0x02	; 2
    22d8:	6f 85       	ldd	r22, Y+15	; 0x0f
    22da:	49 2f       	mov	r20, r25
    22dc:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <DIO_VoidSetPinValue>
}

void LCD_VoidSendCommand(u8 Copy_u8Command){
	DIO_VoidSetPinValue(LCD_RS_PORT,LCD_RS_PIN,LOW);//Send Command
		DIO_VoidSetPinValue(LCD_RW_PORT,LCD_RW_PIN,LOW); //Write
		for(u8 i=0;i<8;i++){
    22e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    22e2:	8f 5f       	subi	r24, 0xFF	; 255
    22e4:	8f 87       	std	Y+15, r24	; 0x0f
    22e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    22e8:	88 30       	cpi	r24, 0x08	; 8
    22ea:	30 f3       	brcs	.-52     	; 0x22b8 <LCD_VoidSendCommand+0x2e>
			DIO_VoidSetPinValue(LCD_DATA_PORT,i,Get_Bit(Copy_u8Command,i));
		}
		DIO_VoidSetPinValue(LCD_EN_PORT,LCD_EN_PIN,HIGH);
    22ec:	83 e0       	ldi	r24, 0x03	; 3
    22ee:	62 e0       	ldi	r22, 0x02	; 2
    22f0:	41 e0       	ldi	r20, 0x01	; 1
    22f2:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <DIO_VoidSetPinValue>
    22f6:	80 e0       	ldi	r24, 0x00	; 0
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	a0 e0       	ldi	r26, 0x00	; 0
    22fc:	b0 e4       	ldi	r27, 0x40	; 64
    22fe:	8b 87       	std	Y+11, r24	; 0x0b
    2300:	9c 87       	std	Y+12, r25	; 0x0c
    2302:	ad 87       	std	Y+13, r26	; 0x0d
    2304:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2306:	6b 85       	ldd	r22, Y+11	; 0x0b
    2308:	7c 85       	ldd	r23, Y+12	; 0x0c
    230a:	8d 85       	ldd	r24, Y+13	; 0x0d
    230c:	9e 85       	ldd	r25, Y+14	; 0x0e
    230e:	20 e0       	ldi	r18, 0x00	; 0
    2310:	30 e0       	ldi	r19, 0x00	; 0
    2312:	4a ef       	ldi	r20, 0xFA	; 250
    2314:	54 e4       	ldi	r21, 0x44	; 68
    2316:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    231a:	dc 01       	movw	r26, r24
    231c:	cb 01       	movw	r24, r22
    231e:	8f 83       	std	Y+7, r24	; 0x07
    2320:	98 87       	std	Y+8, r25	; 0x08
    2322:	a9 87       	std	Y+9, r26	; 0x09
    2324:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2326:	6f 81       	ldd	r22, Y+7	; 0x07
    2328:	78 85       	ldd	r23, Y+8	; 0x08
    232a:	89 85       	ldd	r24, Y+9	; 0x09
    232c:	9a 85       	ldd	r25, Y+10	; 0x0a
    232e:	20 e0       	ldi	r18, 0x00	; 0
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	40 e8       	ldi	r20, 0x80	; 128
    2334:	5f e3       	ldi	r21, 0x3F	; 63
    2336:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    233a:	88 23       	and	r24, r24
    233c:	2c f4       	brge	.+10     	; 0x2348 <LCD_VoidSendCommand+0xbe>
		__ticks = 1;
    233e:	81 e0       	ldi	r24, 0x01	; 1
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	9e 83       	std	Y+6, r25	; 0x06
    2344:	8d 83       	std	Y+5, r24	; 0x05
    2346:	3f c0       	rjmp	.+126    	; 0x23c6 <LCD_VoidSendCommand+0x13c>
	else if (__tmp > 65535)
    2348:	6f 81       	ldd	r22, Y+7	; 0x07
    234a:	78 85       	ldd	r23, Y+8	; 0x08
    234c:	89 85       	ldd	r24, Y+9	; 0x09
    234e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2350:	20 e0       	ldi	r18, 0x00	; 0
    2352:	3f ef       	ldi	r19, 0xFF	; 255
    2354:	4f e7       	ldi	r20, 0x7F	; 127
    2356:	57 e4       	ldi	r21, 0x47	; 71
    2358:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    235c:	18 16       	cp	r1, r24
    235e:	4c f5       	brge	.+82     	; 0x23b2 <LCD_VoidSendCommand+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2360:	6b 85       	ldd	r22, Y+11	; 0x0b
    2362:	7c 85       	ldd	r23, Y+12	; 0x0c
    2364:	8d 85       	ldd	r24, Y+13	; 0x0d
    2366:	9e 85       	ldd	r25, Y+14	; 0x0e
    2368:	20 e0       	ldi	r18, 0x00	; 0
    236a:	30 e0       	ldi	r19, 0x00	; 0
    236c:	40 e2       	ldi	r20, 0x20	; 32
    236e:	51 e4       	ldi	r21, 0x41	; 65
    2370:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2374:	dc 01       	movw	r26, r24
    2376:	cb 01       	movw	r24, r22
    2378:	bc 01       	movw	r22, r24
    237a:	cd 01       	movw	r24, r26
    237c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2380:	dc 01       	movw	r26, r24
    2382:	cb 01       	movw	r24, r22
    2384:	9e 83       	std	Y+6, r25	; 0x06
    2386:	8d 83       	std	Y+5, r24	; 0x05
    2388:	0f c0       	rjmp	.+30     	; 0x23a8 <LCD_VoidSendCommand+0x11e>
    238a:	88 ec       	ldi	r24, 0xC8	; 200
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	9c 83       	std	Y+4, r25	; 0x04
    2390:	8b 83       	std	Y+3, r24	; 0x03
    2392:	8b 81       	ldd	r24, Y+3	; 0x03
    2394:	9c 81       	ldd	r25, Y+4	; 0x04
    2396:	01 97       	sbiw	r24, 0x01	; 1
    2398:	f1 f7       	brne	.-4      	; 0x2396 <LCD_VoidSendCommand+0x10c>
    239a:	9c 83       	std	Y+4, r25	; 0x04
    239c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    239e:	8d 81       	ldd	r24, Y+5	; 0x05
    23a0:	9e 81       	ldd	r25, Y+6	; 0x06
    23a2:	01 97       	sbiw	r24, 0x01	; 1
    23a4:	9e 83       	std	Y+6, r25	; 0x06
    23a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23a8:	8d 81       	ldd	r24, Y+5	; 0x05
    23aa:	9e 81       	ldd	r25, Y+6	; 0x06
    23ac:	00 97       	sbiw	r24, 0x00	; 0
    23ae:	69 f7       	brne	.-38     	; 0x238a <LCD_VoidSendCommand+0x100>
    23b0:	14 c0       	rjmp	.+40     	; 0x23da <LCD_VoidSendCommand+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23b2:	6f 81       	ldd	r22, Y+7	; 0x07
    23b4:	78 85       	ldd	r23, Y+8	; 0x08
    23b6:	89 85       	ldd	r24, Y+9	; 0x09
    23b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23be:	dc 01       	movw	r26, r24
    23c0:	cb 01       	movw	r24, r22
    23c2:	9e 83       	std	Y+6, r25	; 0x06
    23c4:	8d 83       	std	Y+5, r24	; 0x05
    23c6:	8d 81       	ldd	r24, Y+5	; 0x05
    23c8:	9e 81       	ldd	r25, Y+6	; 0x06
    23ca:	9a 83       	std	Y+2, r25	; 0x02
    23cc:	89 83       	std	Y+1, r24	; 0x01
    23ce:	89 81       	ldd	r24, Y+1	; 0x01
    23d0:	9a 81       	ldd	r25, Y+2	; 0x02
    23d2:	01 97       	sbiw	r24, 0x01	; 1
    23d4:	f1 f7       	brne	.-4      	; 0x23d2 <LCD_VoidSendCommand+0x148>
    23d6:	9a 83       	std	Y+2, r25	; 0x02
    23d8:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		DIO_VoidSetPinValue(LCD_EN_PORT,LCD_EN_PIN,LOW);
    23da:	83 e0       	ldi	r24, 0x03	; 3
    23dc:	62 e0       	ldi	r22, 0x02	; 2
    23de:	40 e0       	ldi	r20, 0x00	; 0
    23e0:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <DIO_VoidSetPinValue>
}
    23e4:	60 96       	adiw	r28, 0x10	; 16
    23e6:	0f b6       	in	r0, 0x3f	; 63
    23e8:	f8 94       	cli
    23ea:	de bf       	out	0x3e, r29	; 62
    23ec:	0f be       	out	0x3f, r0	; 63
    23ee:	cd bf       	out	0x3d, r28	; 61
    23f0:	cf 91       	pop	r28
    23f2:	df 91       	pop	r29
    23f4:	08 95       	ret

000023f6 <LCD_VoidInit>:

void LCD_VoidInit(void){
    23f6:	df 93       	push	r29
    23f8:	cf 93       	push	r28
    23fa:	cd b7       	in	r28, 0x3d	; 61
    23fc:	de b7       	in	r29, 0x3e	; 62
    23fe:	2e 97       	sbiw	r28, 0x0e	; 14
    2400:	0f b6       	in	r0, 0x3f	; 63
    2402:	f8 94       	cli
    2404:	de bf       	out	0x3e, r29	; 62
    2406:	0f be       	out	0x3f, r0	; 63
    2408:	cd bf       	out	0x3d, r28	; 61
		DIO_VoidSetPortDirection(LCD_DATA_PORT,0x11);
    240a:	82 e0       	ldi	r24, 0x02	; 2
    240c:	61 e1       	ldi	r22, 0x11	; 17
    240e:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <DIO_VoidSetPortDirection>
		DIO_VoidSetPinDirection(LCD_RS_PORT,LCD_RS_PIN,OUTPUT);
    2412:	83 e0       	ldi	r24, 0x03	; 3
    2414:	60 e0       	ldi	r22, 0x00	; 0
    2416:	41 e0       	ldi	r20, 0x01	; 1
    2418:	0e 94 86 0c 	call	0x190c	; 0x190c <DIO_VoidSetPinDirection>
		DIO_VoidSetPinDirection(LCD_RW_PORT,LCD_RW_PIN,OUTPUT);
    241c:	83 e0       	ldi	r24, 0x03	; 3
    241e:	61 e0       	ldi	r22, 0x01	; 1
    2420:	41 e0       	ldi	r20, 0x01	; 1
    2422:	0e 94 86 0c 	call	0x190c	; 0x190c <DIO_VoidSetPinDirection>
		DIO_VoidSetPinDirection(LCD_EN_PORT,LCD_EN_PIN,OUTPUT);
    2426:	83 e0       	ldi	r24, 0x03	; 3
    2428:	62 e0       	ldi	r22, 0x02	; 2
    242a:	41 e0       	ldi	r20, 0x01	; 1
    242c:	0e 94 86 0c 	call	0x190c	; 0x190c <DIO_VoidSetPinDirection>
    2430:	80 e0       	ldi	r24, 0x00	; 0
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	a0 e2       	ldi	r26, 0x20	; 32
    2436:	b2 e4       	ldi	r27, 0x42	; 66
    2438:	8b 87       	std	Y+11, r24	; 0x0b
    243a:	9c 87       	std	Y+12, r25	; 0x0c
    243c:	ad 87       	std	Y+13, r26	; 0x0d
    243e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2440:	6b 85       	ldd	r22, Y+11	; 0x0b
    2442:	7c 85       	ldd	r23, Y+12	; 0x0c
    2444:	8d 85       	ldd	r24, Y+13	; 0x0d
    2446:	9e 85       	ldd	r25, Y+14	; 0x0e
    2448:	20 e0       	ldi	r18, 0x00	; 0
    244a:	30 e0       	ldi	r19, 0x00	; 0
    244c:	4a ef       	ldi	r20, 0xFA	; 250
    244e:	54 e4       	ldi	r21, 0x44	; 68
    2450:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2454:	dc 01       	movw	r26, r24
    2456:	cb 01       	movw	r24, r22
    2458:	8f 83       	std	Y+7, r24	; 0x07
    245a:	98 87       	std	Y+8, r25	; 0x08
    245c:	a9 87       	std	Y+9, r26	; 0x09
    245e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2460:	6f 81       	ldd	r22, Y+7	; 0x07
    2462:	78 85       	ldd	r23, Y+8	; 0x08
    2464:	89 85       	ldd	r24, Y+9	; 0x09
    2466:	9a 85       	ldd	r25, Y+10	; 0x0a
    2468:	20 e0       	ldi	r18, 0x00	; 0
    246a:	30 e0       	ldi	r19, 0x00	; 0
    246c:	40 e8       	ldi	r20, 0x80	; 128
    246e:	5f e3       	ldi	r21, 0x3F	; 63
    2470:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2474:	88 23       	and	r24, r24
    2476:	2c f4       	brge	.+10     	; 0x2482 <LCD_VoidInit+0x8c>
		__ticks = 1;
    2478:	81 e0       	ldi	r24, 0x01	; 1
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	9e 83       	std	Y+6, r25	; 0x06
    247e:	8d 83       	std	Y+5, r24	; 0x05
    2480:	3f c0       	rjmp	.+126    	; 0x2500 <LCD_VoidInit+0x10a>
	else if (__tmp > 65535)
    2482:	6f 81       	ldd	r22, Y+7	; 0x07
    2484:	78 85       	ldd	r23, Y+8	; 0x08
    2486:	89 85       	ldd	r24, Y+9	; 0x09
    2488:	9a 85       	ldd	r25, Y+10	; 0x0a
    248a:	20 e0       	ldi	r18, 0x00	; 0
    248c:	3f ef       	ldi	r19, 0xFF	; 255
    248e:	4f e7       	ldi	r20, 0x7F	; 127
    2490:	57 e4       	ldi	r21, 0x47	; 71
    2492:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2496:	18 16       	cp	r1, r24
    2498:	4c f5       	brge	.+82     	; 0x24ec <LCD_VoidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    249a:	6b 85       	ldd	r22, Y+11	; 0x0b
    249c:	7c 85       	ldd	r23, Y+12	; 0x0c
    249e:	8d 85       	ldd	r24, Y+13	; 0x0d
    24a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    24a2:	20 e0       	ldi	r18, 0x00	; 0
    24a4:	30 e0       	ldi	r19, 0x00	; 0
    24a6:	40 e2       	ldi	r20, 0x20	; 32
    24a8:	51 e4       	ldi	r21, 0x41	; 65
    24aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ae:	dc 01       	movw	r26, r24
    24b0:	cb 01       	movw	r24, r22
    24b2:	bc 01       	movw	r22, r24
    24b4:	cd 01       	movw	r24, r26
    24b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ba:	dc 01       	movw	r26, r24
    24bc:	cb 01       	movw	r24, r22
    24be:	9e 83       	std	Y+6, r25	; 0x06
    24c0:	8d 83       	std	Y+5, r24	; 0x05
    24c2:	0f c0       	rjmp	.+30     	; 0x24e2 <LCD_VoidInit+0xec>
    24c4:	88 ec       	ldi	r24, 0xC8	; 200
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	9c 83       	std	Y+4, r25	; 0x04
    24ca:	8b 83       	std	Y+3, r24	; 0x03
    24cc:	8b 81       	ldd	r24, Y+3	; 0x03
    24ce:	9c 81       	ldd	r25, Y+4	; 0x04
    24d0:	01 97       	sbiw	r24, 0x01	; 1
    24d2:	f1 f7       	brne	.-4      	; 0x24d0 <LCD_VoidInit+0xda>
    24d4:	9c 83       	std	Y+4, r25	; 0x04
    24d6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24d8:	8d 81       	ldd	r24, Y+5	; 0x05
    24da:	9e 81       	ldd	r25, Y+6	; 0x06
    24dc:	01 97       	sbiw	r24, 0x01	; 1
    24de:	9e 83       	std	Y+6, r25	; 0x06
    24e0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24e2:	8d 81       	ldd	r24, Y+5	; 0x05
    24e4:	9e 81       	ldd	r25, Y+6	; 0x06
    24e6:	00 97       	sbiw	r24, 0x00	; 0
    24e8:	69 f7       	brne	.-38     	; 0x24c4 <LCD_VoidInit+0xce>
    24ea:	14 c0       	rjmp	.+40     	; 0x2514 <LCD_VoidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24ec:	6f 81       	ldd	r22, Y+7	; 0x07
    24ee:	78 85       	ldd	r23, Y+8	; 0x08
    24f0:	89 85       	ldd	r24, Y+9	; 0x09
    24f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    24f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24f8:	dc 01       	movw	r26, r24
    24fa:	cb 01       	movw	r24, r22
    24fc:	9e 83       	std	Y+6, r25	; 0x06
    24fe:	8d 83       	std	Y+5, r24	; 0x05
    2500:	8d 81       	ldd	r24, Y+5	; 0x05
    2502:	9e 81       	ldd	r25, Y+6	; 0x06
    2504:	9a 83       	std	Y+2, r25	; 0x02
    2506:	89 83       	std	Y+1, r24	; 0x01
    2508:	89 81       	ldd	r24, Y+1	; 0x01
    250a:	9a 81       	ldd	r25, Y+2	; 0x02
    250c:	01 97       	sbiw	r24, 0x01	; 1
    250e:	f1 f7       	brne	.-4      	; 0x250c <LCD_VoidInit+0x116>
    2510:	9a 83       	std	Y+2, r25	; 0x02
    2512:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(40);
		LCD_VoidSendCommand(0b00111000);
    2514:	88 e3       	ldi	r24, 0x38	; 56
    2516:	0e 94 45 11 	call	0x228a	; 0x228a <LCD_VoidSendCommand>
		LCD_VoidSendCommand(0b00001100);
    251a:	8c e0       	ldi	r24, 0x0C	; 12
    251c:	0e 94 45 11 	call	0x228a	; 0x228a <LCD_VoidSendCommand>
		LCD_VoidSendCommand(0b00000001);
    2520:	81 e0       	ldi	r24, 0x01	; 1
    2522:	0e 94 45 11 	call	0x228a	; 0x228a <LCD_VoidSendCommand>
}
    2526:	2e 96       	adiw	r28, 0x0e	; 14
    2528:	0f b6       	in	r0, 0x3f	; 63
    252a:	f8 94       	cli
    252c:	de bf       	out	0x3e, r29	; 62
    252e:	0f be       	out	0x3f, r0	; 63
    2530:	cd bf       	out	0x3d, r28	; 61
    2532:	cf 91       	pop	r28
    2534:	df 91       	pop	r29
    2536:	08 95       	ret

00002538 <LCD_VoidClearDisplay>:

void LCD_VoidClearDisplay(void){
    2538:	df 93       	push	r29
    253a:	cf 93       	push	r28
    253c:	cd b7       	in	r28, 0x3d	; 61
    253e:	de b7       	in	r29, 0x3e	; 62
	LCD_VoidSendCommand(0b00000001);
    2540:	81 e0       	ldi	r24, 0x01	; 1
    2542:	0e 94 45 11 	call	0x228a	; 0x228a <LCD_VoidSendCommand>
}
    2546:	cf 91       	pop	r28
    2548:	df 91       	pop	r29
    254a:	08 95       	ret

0000254c <LCD_GoTOXY>:

void LCD_GoTOXY(u8 Copy_u8X,u8 Copy_u8Y){
    254c:	df 93       	push	r29
    254e:	cf 93       	push	r28
    2550:	00 d0       	rcall	.+0      	; 0x2552 <LCD_GoTOXY+0x6>
    2552:	0f 92       	push	r0
    2554:	cd b7       	in	r28, 0x3d	; 61
    2556:	de b7       	in	r29, 0x3e	; 62
    2558:	8a 83       	std	Y+2, r24	; 0x02
    255a:	6b 83       	std	Y+3, r22	; 0x03
	 *  at x=1, y=3   address=0x43
	 *
	 *  at x=0  address = y position
	 *  at x=1 address = y+0x40
	 * */
	u8 Local_add=0;
    255c:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8X==0){
    255e:	8a 81       	ldd	r24, Y+2	; 0x02
    2560:	88 23       	and	r24, r24
    2562:	19 f4       	brne	.+6      	; 0x256a <LCD_GoTOXY+0x1e>
		Local_add = Copy_u8Y;
    2564:	8b 81       	ldd	r24, Y+3	; 0x03
    2566:	89 83       	std	Y+1, r24	; 0x01
    2568:	03 c0       	rjmp	.+6      	; 0x2570 <LCD_GoTOXY+0x24>
	}
	else{
		Local_add = Copy_u8Y+0x40;
    256a:	8b 81       	ldd	r24, Y+3	; 0x03
    256c:	80 5c       	subi	r24, 0xC0	; 192
    256e:	89 83       	std	Y+1, r24	; 0x01
	}

	Set_Bit(Local_add,7); //lcd understand that is an address of postion
    2570:	89 81       	ldd	r24, Y+1	; 0x01
    2572:	80 68       	ori	r24, 0x80	; 128
    2574:	89 83       	std	Y+1, r24	; 0x01
	LCD_VoidSendCommand(Local_add);
    2576:	89 81       	ldd	r24, Y+1	; 0x01
    2578:	0e 94 45 11 	call	0x228a	; 0x228a <LCD_VoidSendCommand>


}
    257c:	0f 90       	pop	r0
    257e:	0f 90       	pop	r0
    2580:	0f 90       	pop	r0
    2582:	cf 91       	pop	r28
    2584:	df 91       	pop	r29
    2586:	08 95       	ret

00002588 <LCD_voidSendString>:

void LCD_voidSendString(u8* Copy_pcString)
{
    2588:	df 93       	push	r29
    258a:	cf 93       	push	r28
    258c:	00 d0       	rcall	.+0      	; 0x258e <LCD_voidSendString+0x6>
    258e:	0f 92       	push	r0
    2590:	cd b7       	in	r28, 0x3d	; 61
    2592:	de b7       	in	r29, 0x3e	; 62
    2594:	9b 83       	std	Y+3, r25	; 0x03
    2596:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Index=0;
    2598:	19 82       	std	Y+1, r1	; 0x01
    259a:	0e c0       	rjmp	.+28     	; 0x25b8 <LCD_voidSendString+0x30>

	while(Copy_pcString[Local_u8Index]!='\0')
	{
		LCD_VoidSendData(Copy_pcString[Local_u8Index]);
    259c:	89 81       	ldd	r24, Y+1	; 0x01
    259e:	28 2f       	mov	r18, r24
    25a0:	30 e0       	ldi	r19, 0x00	; 0
    25a2:	8a 81       	ldd	r24, Y+2	; 0x02
    25a4:	9b 81       	ldd	r25, Y+3	; 0x03
    25a6:	fc 01       	movw	r30, r24
    25a8:	e2 0f       	add	r30, r18
    25aa:	f3 1f       	adc	r31, r19
    25ac:	80 81       	ld	r24, Z
    25ae:	0e 94 a7 10 	call	0x214e	; 0x214e <LCD_VoidSendData>
		Local_u8Index++;
    25b2:	89 81       	ldd	r24, Y+1	; 0x01
    25b4:	8f 5f       	subi	r24, 0xFF	; 255
    25b6:	89 83       	std	Y+1, r24	; 0x01

void LCD_voidSendString(u8* Copy_pcString)
{
	u8 Local_u8Index=0;

	while(Copy_pcString[Local_u8Index]!='\0')
    25b8:	89 81       	ldd	r24, Y+1	; 0x01
    25ba:	28 2f       	mov	r18, r24
    25bc:	30 e0       	ldi	r19, 0x00	; 0
    25be:	8a 81       	ldd	r24, Y+2	; 0x02
    25c0:	9b 81       	ldd	r25, Y+3	; 0x03
    25c2:	fc 01       	movw	r30, r24
    25c4:	e2 0f       	add	r30, r18
    25c6:	f3 1f       	adc	r31, r19
    25c8:	80 81       	ld	r24, Z
    25ca:	88 23       	and	r24, r24
    25cc:	39 f7       	brne	.-50     	; 0x259c <LCD_voidSendString+0x14>
	{
		LCD_VoidSendData(Copy_pcString[Local_u8Index]);
		Local_u8Index++;
	}
}
    25ce:	0f 90       	pop	r0
    25d0:	0f 90       	pop	r0
    25d2:	0f 90       	pop	r0
    25d4:	cf 91       	pop	r28
    25d6:	df 91       	pop	r29
    25d8:	08 95       	ret

000025da <LCD_voidSendNumber>:

void LCD_voidSendNumber(u32 Copy_u32Number)
{
    25da:	df 93       	push	r29
    25dc:	cf 93       	push	r28
    25de:	cd b7       	in	r28, 0x3d	; 61
    25e0:	de b7       	in	r29, 0x3e	; 62
    25e2:	2e 97       	sbiw	r28, 0x0e	; 14
    25e4:	0f b6       	in	r0, 0x3f	; 63
    25e6:	f8 94       	cli
    25e8:	de bf       	out	0x3e, r29	; 62
    25ea:	0f be       	out	0x3f, r0	; 63
    25ec:	cd bf       	out	0x3d, r28	; 61
    25ee:	6b 87       	std	Y+11, r22	; 0x0b
    25f0:	7c 87       	std	Y+12, r23	; 0x0c
    25f2:	8d 87       	std	Y+13, r24	; 0x0d
    25f4:	9e 87       	std	Y+14, r25	; 0x0e
   //sec par: represent buffer to store string convention
   //third par: represent number base 10==>Decimal   2==>Binary

   //OR:
   //  sprintf(str, "%d", number); // Convert integer to string
   itoa(Copy_u32Number, Local_u8Str,10);
    25f6:	8b 85       	ldd	r24, Y+11	; 0x0b
    25f8:	9c 85       	ldd	r25, Y+12	; 0x0c
    25fa:	9e 01       	movw	r18, r28
    25fc:	2f 5f       	subi	r18, 0xFF	; 255
    25fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2600:	b9 01       	movw	r22, r18
    2602:	4a e0       	ldi	r20, 0x0A	; 10
    2604:	50 e0       	ldi	r21, 0x00	; 0
    2606:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <itoa>
   LCD_voidSendString(Local_u8Str);
    260a:	ce 01       	movw	r24, r28
    260c:	01 96       	adiw	r24, 0x01	; 1
    260e:	0e 94 c4 12 	call	0x2588	; 0x2588 <LCD_voidSendString>

}
    2612:	2e 96       	adiw	r28, 0x0e	; 14
    2614:	0f b6       	in	r0, 0x3f	; 63
    2616:	f8 94       	cli
    2618:	de bf       	out	0x3e, r29	; 62
    261a:	0f be       	out	0x3f, r0	; 63
    261c:	cd bf       	out	0x3d, r28	; 61
    261e:	cf 91       	pop	r28
    2620:	df 91       	pop	r29
    2622:	08 95       	ret

00002624 <KPD_VoidInit>:
#include"KPD_Interface.h"


u8 ROW_PORT; u8 COL_PORT;

void KPD_VoidInit(u8 Copy_ROW_PORT,u8  Copy_Col_PORT){
    2624:	df 93       	push	r29
    2626:	cf 93       	push	r28
    2628:	00 d0       	rcall	.+0      	; 0x262a <KPD_VoidInit+0x6>
    262a:	cd b7       	in	r28, 0x3d	; 61
    262c:	de b7       	in	r29, 0x3e	; 62
    262e:	89 83       	std	Y+1, r24	; 0x01
    2630:	6a 83       	std	Y+2, r22	; 0x02
	ROW_PORT = Copy_ROW_PORT;
    2632:	89 81       	ldd	r24, Y+1	; 0x01
    2634:	80 93 8f 01 	sts	0x018F, r24
	COL_PORT = Copy_Col_PORT;
    2638:	8a 81       	ldd	r24, Y+2	; 0x02
    263a:	80 93 90 01 	sts	0x0190, r24

	DIO_VoidSetPinDirection(Copy_Col_PORT,KPD_COL0_PIN,OUTPUT);
    263e:	8a 81       	ldd	r24, Y+2	; 0x02
    2640:	60 e0       	ldi	r22, 0x00	; 0
    2642:	41 e0       	ldi	r20, 0x01	; 1
    2644:	0e 94 86 0c 	call	0x190c	; 0x190c <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(Copy_Col_PORT,KPD_COL1_PIN,OUTPUT);
    2648:	8a 81       	ldd	r24, Y+2	; 0x02
    264a:	61 e0       	ldi	r22, 0x01	; 1
    264c:	41 e0       	ldi	r20, 0x01	; 1
    264e:	0e 94 86 0c 	call	0x190c	; 0x190c <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(Copy_Col_PORT,KPD_COL2_PIN,OUTPUT);
    2652:	8a 81       	ldd	r24, Y+2	; 0x02
    2654:	62 e0       	ldi	r22, 0x02	; 2
    2656:	41 e0       	ldi	r20, 0x01	; 1
    2658:	0e 94 86 0c 	call	0x190c	; 0x190c <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(Copy_Col_PORT,KPD_COL3_PIN,OUTPUT);
    265c:	8a 81       	ldd	r24, Y+2	; 0x02
    265e:	63 e0       	ldi	r22, 0x03	; 3
    2660:	41 e0       	ldi	r20, 0x01	; 1
    2662:	0e 94 86 0c 	call	0x190c	; 0x190c <DIO_VoidSetPinDirection>

	DIO_VoidSetPinValue(Copy_Col_PORT,KPD_COL0_PIN,HIGH);
    2666:	8a 81       	ldd	r24, Y+2	; 0x02
    2668:	60 e0       	ldi	r22, 0x00	; 0
    266a:	41 e0       	ldi	r20, 0x01	; 1
    266c:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(Copy_Col_PORT,KPD_COL1_PIN,HIGH);
    2670:	8a 81       	ldd	r24, Y+2	; 0x02
    2672:	61 e0       	ldi	r22, 0x01	; 1
    2674:	41 e0       	ldi	r20, 0x01	; 1
    2676:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(Copy_Col_PORT,KPD_COL2_PIN,HIGH);
    267a:	8a 81       	ldd	r24, Y+2	; 0x02
    267c:	62 e0       	ldi	r22, 0x02	; 2
    267e:	41 e0       	ldi	r20, 0x01	; 1
    2680:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(Copy_Col_PORT,KPD_COL3_PIN,HIGH);
    2684:	8a 81       	ldd	r24, Y+2	; 0x02
    2686:	63 e0       	ldi	r22, 0x03	; 3
    2688:	41 e0       	ldi	r20, 0x01	; 1
    268a:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <DIO_VoidSetPinValue>

	DIO_VoidSetPinDirection(Copy_ROW_PORT,KPD_ROW0_PIN,INPUT);
    268e:	89 81       	ldd	r24, Y+1	; 0x01
    2690:	64 e0       	ldi	r22, 0x04	; 4
    2692:	40 e0       	ldi	r20, 0x00	; 0
    2694:	0e 94 86 0c 	call	0x190c	; 0x190c <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(Copy_ROW_PORT,KPD_ROW1_PIN,INPUT);
    2698:	89 81       	ldd	r24, Y+1	; 0x01
    269a:	65 e0       	ldi	r22, 0x05	; 5
    269c:	40 e0       	ldi	r20, 0x00	; 0
    269e:	0e 94 86 0c 	call	0x190c	; 0x190c <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(Copy_ROW_PORT,KPD_ROW2_PIN,INPUT);
    26a2:	89 81       	ldd	r24, Y+1	; 0x01
    26a4:	66 e0       	ldi	r22, 0x06	; 6
    26a6:	40 e0       	ldi	r20, 0x00	; 0
    26a8:	0e 94 86 0c 	call	0x190c	; 0x190c <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(Copy_ROW_PORT,KPD_ROW3_PIN,INPUT);
    26ac:	89 81       	ldd	r24, Y+1	; 0x01
    26ae:	67 e0       	ldi	r22, 0x07	; 7
    26b0:	40 e0       	ldi	r20, 0x00	; 0
    26b2:	0e 94 86 0c 	call	0x190c	; 0x190c <DIO_VoidSetPinDirection>

	DIO_VoidSetPinValue(Copy_ROW_PORT,KPD_ROW0_PIN,HIGH);
    26b6:	89 81       	ldd	r24, Y+1	; 0x01
    26b8:	64 e0       	ldi	r22, 0x04	; 4
    26ba:	41 e0       	ldi	r20, 0x01	; 1
    26bc:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(Copy_ROW_PORT,KPD_ROW1_PIN,HIGH);
    26c0:	89 81       	ldd	r24, Y+1	; 0x01
    26c2:	65 e0       	ldi	r22, 0x05	; 5
    26c4:	41 e0       	ldi	r20, 0x01	; 1
    26c6:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(Copy_ROW_PORT,KPD_ROW2_PIN,HIGH);
    26ca:	89 81       	ldd	r24, Y+1	; 0x01
    26cc:	66 e0       	ldi	r22, 0x06	; 6
    26ce:	41 e0       	ldi	r20, 0x01	; 1
    26d0:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(Copy_ROW_PORT,KPD_ROW3_PIN,HIGH);
    26d4:	89 81       	ldd	r24, Y+1	; 0x01
    26d6:	67 e0       	ldi	r22, 0x07	; 7
    26d8:	41 e0       	ldi	r20, 0x01	; 1
    26da:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <DIO_VoidSetPinValue>

}
    26de:	0f 90       	pop	r0
    26e0:	0f 90       	pop	r0
    26e2:	cf 91       	pop	r28
    26e4:	df 91       	pop	r29
    26e6:	08 95       	ret

000026e8 <KPD_u8GetPressedKey>:

u8 KPD_u8GetPressedKey(void){
    26e8:	df 93       	push	r29
    26ea:	cf 93       	push	r28
    26ec:	cd b7       	in	r28, 0x3d	; 61
    26ee:	de b7       	in	r29, 0x3e	; 62
    26f0:	a2 97       	sbiw	r28, 0x22	; 34
    26f2:	0f b6       	in	r0, 0x3f	; 63
    26f4:	f8 94       	cli
    26f6:	de bf       	out	0x3e, r29	; 62
    26f8:	0f be       	out	0x3f, r0	; 63
    26fa:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8PressedKey=0xFF;
    26fc:	8f ef       	ldi	r24, 0xFF	; 255
    26fe:	8c 83       	std	Y+4, r24	; 0x04

	u8 Local_u8ColumsArray[4]={KPD_COL0_PIN,KPD_COL1_PIN,KPD_COL2_PIN,KPD_COL3_PIN};
    2700:	1d 82       	std	Y+5, r1	; 0x05
    2702:	81 e0       	ldi	r24, 0x01	; 1
    2704:	8e 83       	std	Y+6, r24	; 0x06
    2706:	82 e0       	ldi	r24, 0x02	; 2
    2708:	8f 83       	std	Y+7, r24	; 0x07
    270a:	83 e0       	ldi	r24, 0x03	; 3
    270c:	88 87       	std	Y+8, r24	; 0x08
	u8 Local_u8RowsArray[4]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};
    270e:	84 e0       	ldi	r24, 0x04	; 4
    2710:	89 87       	std	Y+9, r24	; 0x09
    2712:	85 e0       	ldi	r24, 0x05	; 5
    2714:	8a 87       	std	Y+10, r24	; 0x0a
    2716:	86 e0       	ldi	r24, 0x06	; 6
    2718:	8b 87       	std	Y+11, r24	; 0x0b
    271a:	87 e0       	ldi	r24, 0x07	; 7
    271c:	8c 87       	std	Y+12, r24	; 0x0c

	u8 Local_u8KeyArray[4][4]={{7,8,9,'/'},{4,5,6,'*'},{1,2,3,'-'},{'&',0,'=','+'}};
    271e:	ce 01       	movw	r24, r28
    2720:	0d 96       	adiw	r24, 0x0d	; 13
    2722:	9f 8f       	std	Y+31, r25	; 0x1f
    2724:	8e 8f       	std	Y+30, r24	; 0x1e
    2726:	e2 e7       	ldi	r30, 0x72	; 114
    2728:	f1 e0       	ldi	r31, 0x01	; 1
    272a:	f9 a3       	std	Y+33, r31	; 0x21
    272c:	e8 a3       	std	Y+32, r30	; 0x20
    272e:	f0 e1       	ldi	r31, 0x10	; 16
    2730:	fa a3       	std	Y+34, r31	; 0x22
    2732:	e8 a1       	ldd	r30, Y+32	; 0x20
    2734:	f9 a1       	ldd	r31, Y+33	; 0x21
    2736:	00 80       	ld	r0, Z
    2738:	88 a1       	ldd	r24, Y+32	; 0x20
    273a:	99 a1       	ldd	r25, Y+33	; 0x21
    273c:	01 96       	adiw	r24, 0x01	; 1
    273e:	99 a3       	std	Y+33, r25	; 0x21
    2740:	88 a3       	std	Y+32, r24	; 0x20
    2742:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2744:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2746:	00 82       	st	Z, r0
    2748:	8e 8d       	ldd	r24, Y+30	; 0x1e
    274a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    274c:	01 96       	adiw	r24, 0x01	; 1
    274e:	9f 8f       	std	Y+31, r25	; 0x1f
    2750:	8e 8f       	std	Y+30, r24	; 0x1e
    2752:	9a a1       	ldd	r25, Y+34	; 0x22
    2754:	91 50       	subi	r25, 0x01	; 1
    2756:	9a a3       	std	Y+34, r25	; 0x22
    2758:	ea a1       	ldd	r30, Y+34	; 0x22
    275a:	ee 23       	and	r30, r30
    275c:	51 f7       	brne	.-44     	; 0x2732 <KPD_u8GetPressedKey+0x4a>

	for(u8 Local_u8ColumsIndex=0;Local_u8ColumsIndex<4;Local_u8ColumsIndex++){
    275e:	1b 82       	std	Y+3, r1	; 0x03
    2760:	6a c0       	rjmp	.+212    	; 0x2836 <KPD_u8GetPressedKey+0x14e>

		DIO_VoidSetPinValue(COL_PORT,Local_u8ColumsArray[Local_u8ColumsIndex],LOW);
    2762:	40 91 90 01 	lds	r20, 0x0190
    2766:	8b 81       	ldd	r24, Y+3	; 0x03
    2768:	28 2f       	mov	r18, r24
    276a:	30 e0       	ldi	r19, 0x00	; 0
    276c:	ce 01       	movw	r24, r28
    276e:	05 96       	adiw	r24, 0x05	; 5
    2770:	fc 01       	movw	r30, r24
    2772:	e2 0f       	add	r30, r18
    2774:	f3 1f       	adc	r31, r19
    2776:	90 81       	ld	r25, Z
    2778:	84 2f       	mov	r24, r20
    277a:	69 2f       	mov	r22, r25
    277c:	40 e0       	ldi	r20, 0x00	; 0
    277e:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <DIO_VoidSetPinValue>

		for(u8 Local_u8RowsIndex=0;Local_u8RowsIndex < 4;Local_u8RowsIndex++){
    2782:	1a 82       	std	Y+2, r1	; 0x02
    2784:	41 c0       	rjmp	.+130    	; 0x2808 <KPD_u8GetPressedKey+0x120>

			u8 Local_u8PinState=DIO_u8GetPinValue(ROW_PORT,Local_u8RowsArray[Local_u8RowsIndex]);
    2786:	40 91 8f 01 	lds	r20, 0x018F
    278a:	8a 81       	ldd	r24, Y+2	; 0x02
    278c:	28 2f       	mov	r18, r24
    278e:	30 e0       	ldi	r19, 0x00	; 0
    2790:	ce 01       	movw	r24, r28
    2792:	09 96       	adiw	r24, 0x09	; 9
    2794:	fc 01       	movw	r30, r24
    2796:	e2 0f       	add	r30, r18
    2798:	f3 1f       	adc	r31, r19
    279a:	90 81       	ld	r25, Z
    279c:	84 2f       	mov	r24, r20
    279e:	69 2f       	mov	r22, r25
    27a0:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <DIO_u8GetPinValue>
    27a4:	89 83       	std	Y+1, r24	; 0x01

			if(Local_u8PinState==0){
    27a6:	89 81       	ldd	r24, Y+1	; 0x01
    27a8:	88 23       	and	r24, r24
    27aa:	59 f5       	brne	.+86     	; 0x2802 <KPD_u8GetPressedKey+0x11a>
				Local_u8PressedKey=Local_u8KeyArray[Local_u8RowsIndex][Local_u8ColumsIndex];
    27ac:	8a 81       	ldd	r24, Y+2	; 0x02
    27ae:	28 2f       	mov	r18, r24
    27b0:	30 e0       	ldi	r19, 0x00	; 0
    27b2:	8b 81       	ldd	r24, Y+3	; 0x03
    27b4:	48 2f       	mov	r20, r24
    27b6:	50 e0       	ldi	r21, 0x00	; 0
    27b8:	22 0f       	add	r18, r18
    27ba:	33 1f       	adc	r19, r19
    27bc:	22 0f       	add	r18, r18
    27be:	33 1f       	adc	r19, r19
    27c0:	ce 01       	movw	r24, r28
    27c2:	01 96       	adiw	r24, 0x01	; 1
    27c4:	82 0f       	add	r24, r18
    27c6:	93 1f       	adc	r25, r19
    27c8:	84 0f       	add	r24, r20
    27ca:	95 1f       	adc	r25, r21
    27cc:	fc 01       	movw	r30, r24
    27ce:	3c 96       	adiw	r30, 0x0c	; 12
    27d0:	80 81       	ld	r24, Z
    27d2:	8c 83       	std	Y+4, r24	; 0x04
    27d4:	10 c0       	rjmp	.+32     	; 0x27f6 <KPD_u8GetPressedKey+0x10e>
				while(Local_u8PinState==0){
					Local_u8PinState=DIO_u8GetPinValue(ROW_PORT,Local_u8RowsArray[Local_u8RowsIndex]);
    27d6:	40 91 8f 01 	lds	r20, 0x018F
    27da:	8a 81       	ldd	r24, Y+2	; 0x02
    27dc:	28 2f       	mov	r18, r24
    27de:	30 e0       	ldi	r19, 0x00	; 0
    27e0:	ce 01       	movw	r24, r28
    27e2:	09 96       	adiw	r24, 0x09	; 9
    27e4:	fc 01       	movw	r30, r24
    27e6:	e2 0f       	add	r30, r18
    27e8:	f3 1f       	adc	r31, r19
    27ea:	90 81       	ld	r25, Z
    27ec:	84 2f       	mov	r24, r20
    27ee:	69 2f       	mov	r22, r25
    27f0:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <DIO_u8GetPinValue>
    27f4:	89 83       	std	Y+1, r24	; 0x01

			u8 Local_u8PinState=DIO_u8GetPinValue(ROW_PORT,Local_u8RowsArray[Local_u8RowsIndex]);

			if(Local_u8PinState==0){
				Local_u8PressedKey=Local_u8KeyArray[Local_u8RowsIndex][Local_u8ColumsIndex];
				while(Local_u8PinState==0){
    27f6:	89 81       	ldd	r24, Y+1	; 0x01
    27f8:	88 23       	and	r24, r24
    27fa:	69 f3       	breq	.-38     	; 0x27d6 <KPD_u8GetPressedKey+0xee>
					Local_u8PinState=DIO_u8GetPinValue(ROW_PORT,Local_u8RowsArray[Local_u8RowsIndex]);
				}
				return Local_u8PressedKey;
    27fc:	fc 81       	ldd	r31, Y+4	; 0x04
    27fe:	fd 8f       	std	Y+29, r31	; 0x1d
    2800:	20 c0       	rjmp	.+64     	; 0x2842 <KPD_u8GetPressedKey+0x15a>

	for(u8 Local_u8ColumsIndex=0;Local_u8ColumsIndex<4;Local_u8ColumsIndex++){

		DIO_VoidSetPinValue(COL_PORT,Local_u8ColumsArray[Local_u8ColumsIndex],LOW);

		for(u8 Local_u8RowsIndex=0;Local_u8RowsIndex < 4;Local_u8RowsIndex++){
    2802:	8a 81       	ldd	r24, Y+2	; 0x02
    2804:	8f 5f       	subi	r24, 0xFF	; 255
    2806:	8a 83       	std	Y+2, r24	; 0x02
    2808:	8a 81       	ldd	r24, Y+2	; 0x02
    280a:	84 30       	cpi	r24, 0x04	; 4
    280c:	08 f4       	brcc	.+2      	; 0x2810 <KPD_u8GetPressedKey+0x128>
    280e:	bb cf       	rjmp	.-138    	; 0x2786 <KPD_u8GetPressedKey+0x9e>
					Local_u8PinState=DIO_u8GetPinValue(ROW_PORT,Local_u8RowsArray[Local_u8RowsIndex]);
				}
				return Local_u8PressedKey;
			}
		}
		DIO_VoidSetPinValue(COL_PORT,Local_u8ColumsArray[Local_u8ColumsIndex],HIGH);
    2810:	40 91 90 01 	lds	r20, 0x0190
    2814:	8b 81       	ldd	r24, Y+3	; 0x03
    2816:	28 2f       	mov	r18, r24
    2818:	30 e0       	ldi	r19, 0x00	; 0
    281a:	ce 01       	movw	r24, r28
    281c:	05 96       	adiw	r24, 0x05	; 5
    281e:	fc 01       	movw	r30, r24
    2820:	e2 0f       	add	r30, r18
    2822:	f3 1f       	adc	r31, r19
    2824:	90 81       	ld	r25, Z
    2826:	84 2f       	mov	r24, r20
    2828:	69 2f       	mov	r22, r25
    282a:	41 e0       	ldi	r20, 0x01	; 1
    282c:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <DIO_VoidSetPinValue>
	u8 Local_u8ColumsArray[4]={KPD_COL0_PIN,KPD_COL1_PIN,KPD_COL2_PIN,KPD_COL3_PIN};
	u8 Local_u8RowsArray[4]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};

	u8 Local_u8KeyArray[4][4]={{7,8,9,'/'},{4,5,6,'*'},{1,2,3,'-'},{'&',0,'=','+'}};

	for(u8 Local_u8ColumsIndex=0;Local_u8ColumsIndex<4;Local_u8ColumsIndex++){
    2830:	8b 81       	ldd	r24, Y+3	; 0x03
    2832:	8f 5f       	subi	r24, 0xFF	; 255
    2834:	8b 83       	std	Y+3, r24	; 0x03
    2836:	8b 81       	ldd	r24, Y+3	; 0x03
    2838:	84 30       	cpi	r24, 0x04	; 4
    283a:	08 f4       	brcc	.+2      	; 0x283e <KPD_u8GetPressedKey+0x156>
    283c:	92 cf       	rjmp	.-220    	; 0x2762 <KPD_u8GetPressedKey+0x7a>
				return Local_u8PressedKey;
			}
		}
		DIO_VoidSetPinValue(COL_PORT,Local_u8ColumsArray[Local_u8ColumsIndex],HIGH);
	}
	return Local_u8PressedKey;
    283e:	8c 81       	ldd	r24, Y+4	; 0x04
    2840:	8d 8f       	std	Y+29, r24	; 0x1d
    2842:	8d 8d       	ldd	r24, Y+29	; 0x1d

}
    2844:	a2 96       	adiw	r28, 0x22	; 34
    2846:	0f b6       	in	r0, 0x3f	; 63
    2848:	f8 94       	cli
    284a:	de bf       	out	0x3e, r29	; 62
    284c:	0f be       	out	0x3f, r0	; 63
    284e:	cd bf       	out	0x3d, r28	; 61
    2850:	cf 91       	pop	r28
    2852:	df 91       	pop	r29
    2854:	08 95       	ret

00002856 <SvSeg_VoidInit>:
	             0b00000111, //7
	             0b01111111, //8
	             0b01101111, //9
	             };

void SvSeg_VoidInit(u8 Copy_Port){
    2856:	df 93       	push	r29
    2858:	cf 93       	push	r28
    285a:	0f 92       	push	r0
    285c:	cd b7       	in	r28, 0x3d	; 61
    285e:	de b7       	in	r29, 0x3e	; 62
    2860:	89 83       	std	Y+1, r24	; 0x01
	Port = Copy_Port;
    2862:	89 81       	ldd	r24, Y+1	; 0x01
    2864:	80 93 91 01 	sts	0x0191, r24
	DIO_VoidSetPortDirection(Copy_Port,0xFF);
    2868:	89 81       	ldd	r24, Y+1	; 0x01
    286a:	6f ef       	ldi	r22, 0xFF	; 255
    286c:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <DIO_VoidSetPortDirection>
}
    2870:	0f 90       	pop	r0
    2872:	cf 91       	pop	r28
    2874:	df 91       	pop	r29
    2876:	08 95       	ret

00002878 <SvSeg_VoidCounter>:
void SvSeg_VoidCounter(u8 del_Sec){
    2878:	df 93       	push	r29
    287a:	cf 93       	push	r28
    287c:	cd b7       	in	r28, 0x3d	; 61
    287e:	de b7       	in	r29, 0x3e	; 62
    2880:	60 97       	sbiw	r28, 0x10	; 16
    2882:	0f b6       	in	r0, 0x3f	; 63
    2884:	f8 94       	cli
    2886:	de bf       	out	0x3e, r29	; 62
    2888:	0f be       	out	0x3f, r0	; 63
    288a:	cd bf       	out	0x3d, r28	; 61
    288c:	88 8b       	std	Y+16, r24	; 0x10
	for(u8 i=0;i<10;i++){
    288e:	1f 86       	std	Y+15, r1	; 0x0f
    2890:	95 c0       	rjmp	.+298    	; 0x29bc <SvSeg_VoidCounter+0x144>
		DIO_VoidSetPortValue(Port,arr[i]);
    2892:	20 91 91 01 	lds	r18, 0x0191
    2896:	8f 85       	ldd	r24, Y+15	; 0x0f
    2898:	88 2f       	mov	r24, r24
    289a:	90 e0       	ldi	r25, 0x00	; 0
    289c:	fc 01       	movw	r30, r24
    289e:	e8 59       	subi	r30, 0x98	; 152
    28a0:	fe 4f       	sbci	r31, 0xFE	; 254
    28a2:	90 81       	ld	r25, Z
    28a4:	82 2f       	mov	r24, r18
    28a6:	69 2f       	mov	r22, r25
    28a8:	0e 94 75 0f 	call	0x1eea	; 0x1eea <DIO_VoidSetPortValue>
		_delay_ms(del_Sec*1000);
    28ac:	88 89       	ldd	r24, Y+16	; 0x10
    28ae:	28 2f       	mov	r18, r24
    28b0:	30 e0       	ldi	r19, 0x00	; 0
    28b2:	88 ee       	ldi	r24, 0xE8	; 232
    28b4:	93 e0       	ldi	r25, 0x03	; 3
    28b6:	ac 01       	movw	r20, r24
    28b8:	24 9f       	mul	r18, r20
    28ba:	c0 01       	movw	r24, r0
    28bc:	25 9f       	mul	r18, r21
    28be:	90 0d       	add	r25, r0
    28c0:	34 9f       	mul	r19, r20
    28c2:	90 0d       	add	r25, r0
    28c4:	11 24       	eor	r1, r1
    28c6:	aa 27       	eor	r26, r26
    28c8:	97 fd       	sbrc	r25, 7
    28ca:	a0 95       	com	r26
    28cc:	ba 2f       	mov	r27, r26
    28ce:	bc 01       	movw	r22, r24
    28d0:	cd 01       	movw	r24, r26
    28d2:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    28d6:	dc 01       	movw	r26, r24
    28d8:	cb 01       	movw	r24, r22
    28da:	8b 87       	std	Y+11, r24	; 0x0b
    28dc:	9c 87       	std	Y+12, r25	; 0x0c
    28de:	ad 87       	std	Y+13, r26	; 0x0d
    28e0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    28e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    28e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    28e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    28ea:	20 e0       	ldi	r18, 0x00	; 0
    28ec:	30 e0       	ldi	r19, 0x00	; 0
    28ee:	4a ef       	ldi	r20, 0xFA	; 250
    28f0:	54 e4       	ldi	r21, 0x44	; 68
    28f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28f6:	dc 01       	movw	r26, r24
    28f8:	cb 01       	movw	r24, r22
    28fa:	8f 83       	std	Y+7, r24	; 0x07
    28fc:	98 87       	std	Y+8, r25	; 0x08
    28fe:	a9 87       	std	Y+9, r26	; 0x09
    2900:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2902:	6f 81       	ldd	r22, Y+7	; 0x07
    2904:	78 85       	ldd	r23, Y+8	; 0x08
    2906:	89 85       	ldd	r24, Y+9	; 0x09
    2908:	9a 85       	ldd	r25, Y+10	; 0x0a
    290a:	20 e0       	ldi	r18, 0x00	; 0
    290c:	30 e0       	ldi	r19, 0x00	; 0
    290e:	40 e8       	ldi	r20, 0x80	; 128
    2910:	5f e3       	ldi	r21, 0x3F	; 63
    2912:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2916:	88 23       	and	r24, r24
    2918:	2c f4       	brge	.+10     	; 0x2924 <SvSeg_VoidCounter+0xac>
		__ticks = 1;
    291a:	81 e0       	ldi	r24, 0x01	; 1
    291c:	90 e0       	ldi	r25, 0x00	; 0
    291e:	9e 83       	std	Y+6, r25	; 0x06
    2920:	8d 83       	std	Y+5, r24	; 0x05
    2922:	3f c0       	rjmp	.+126    	; 0x29a2 <SvSeg_VoidCounter+0x12a>
	else if (__tmp > 65535)
    2924:	6f 81       	ldd	r22, Y+7	; 0x07
    2926:	78 85       	ldd	r23, Y+8	; 0x08
    2928:	89 85       	ldd	r24, Y+9	; 0x09
    292a:	9a 85       	ldd	r25, Y+10	; 0x0a
    292c:	20 e0       	ldi	r18, 0x00	; 0
    292e:	3f ef       	ldi	r19, 0xFF	; 255
    2930:	4f e7       	ldi	r20, 0x7F	; 127
    2932:	57 e4       	ldi	r21, 0x47	; 71
    2934:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2938:	18 16       	cp	r1, r24
    293a:	4c f5       	brge	.+82     	; 0x298e <SvSeg_VoidCounter+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    293c:	6b 85       	ldd	r22, Y+11	; 0x0b
    293e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2940:	8d 85       	ldd	r24, Y+13	; 0x0d
    2942:	9e 85       	ldd	r25, Y+14	; 0x0e
    2944:	20 e0       	ldi	r18, 0x00	; 0
    2946:	30 e0       	ldi	r19, 0x00	; 0
    2948:	40 e2       	ldi	r20, 0x20	; 32
    294a:	51 e4       	ldi	r21, 0x41	; 65
    294c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2950:	dc 01       	movw	r26, r24
    2952:	cb 01       	movw	r24, r22
    2954:	bc 01       	movw	r22, r24
    2956:	cd 01       	movw	r24, r26
    2958:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    295c:	dc 01       	movw	r26, r24
    295e:	cb 01       	movw	r24, r22
    2960:	9e 83       	std	Y+6, r25	; 0x06
    2962:	8d 83       	std	Y+5, r24	; 0x05
    2964:	0f c0       	rjmp	.+30     	; 0x2984 <SvSeg_VoidCounter+0x10c>
    2966:	88 ec       	ldi	r24, 0xC8	; 200
    2968:	90 e0       	ldi	r25, 0x00	; 0
    296a:	9c 83       	std	Y+4, r25	; 0x04
    296c:	8b 83       	std	Y+3, r24	; 0x03
    296e:	8b 81       	ldd	r24, Y+3	; 0x03
    2970:	9c 81       	ldd	r25, Y+4	; 0x04
    2972:	01 97       	sbiw	r24, 0x01	; 1
    2974:	f1 f7       	brne	.-4      	; 0x2972 <SvSeg_VoidCounter+0xfa>
    2976:	9c 83       	std	Y+4, r25	; 0x04
    2978:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    297a:	8d 81       	ldd	r24, Y+5	; 0x05
    297c:	9e 81       	ldd	r25, Y+6	; 0x06
    297e:	01 97       	sbiw	r24, 0x01	; 1
    2980:	9e 83       	std	Y+6, r25	; 0x06
    2982:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2984:	8d 81       	ldd	r24, Y+5	; 0x05
    2986:	9e 81       	ldd	r25, Y+6	; 0x06
    2988:	00 97       	sbiw	r24, 0x00	; 0
    298a:	69 f7       	brne	.-38     	; 0x2966 <SvSeg_VoidCounter+0xee>
    298c:	14 c0       	rjmp	.+40     	; 0x29b6 <SvSeg_VoidCounter+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    298e:	6f 81       	ldd	r22, Y+7	; 0x07
    2990:	78 85       	ldd	r23, Y+8	; 0x08
    2992:	89 85       	ldd	r24, Y+9	; 0x09
    2994:	9a 85       	ldd	r25, Y+10	; 0x0a
    2996:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    299a:	dc 01       	movw	r26, r24
    299c:	cb 01       	movw	r24, r22
    299e:	9e 83       	std	Y+6, r25	; 0x06
    29a0:	8d 83       	std	Y+5, r24	; 0x05
    29a2:	8d 81       	ldd	r24, Y+5	; 0x05
    29a4:	9e 81       	ldd	r25, Y+6	; 0x06
    29a6:	9a 83       	std	Y+2, r25	; 0x02
    29a8:	89 83       	std	Y+1, r24	; 0x01
    29aa:	89 81       	ldd	r24, Y+1	; 0x01
    29ac:	9a 81       	ldd	r25, Y+2	; 0x02
    29ae:	01 97       	sbiw	r24, 0x01	; 1
    29b0:	f1 f7       	brne	.-4      	; 0x29ae <SvSeg_VoidCounter+0x136>
    29b2:	9a 83       	std	Y+2, r25	; 0x02
    29b4:	89 83       	std	Y+1, r24	; 0x01
void SvSeg_VoidInit(u8 Copy_Port){
	Port = Copy_Port;
	DIO_VoidSetPortDirection(Copy_Port,0xFF);
}
void SvSeg_VoidCounter(u8 del_Sec){
	for(u8 i=0;i<10;i++){
    29b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    29b8:	8f 5f       	subi	r24, 0xFF	; 255
    29ba:	8f 87       	std	Y+15, r24	; 0x0f
    29bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    29be:	8a 30       	cpi	r24, 0x0A	; 10
    29c0:	08 f4       	brcc	.+2      	; 0x29c4 <SvSeg_VoidCounter+0x14c>
    29c2:	67 cf       	rjmp	.-306    	; 0x2892 <SvSeg_VoidCounter+0x1a>
		DIO_VoidSetPortValue(Port,arr[i]);
		_delay_ms(del_Sec*1000);
	}
}
    29c4:	60 96       	adiw	r28, 0x10	; 16
    29c6:	0f b6       	in	r0, 0x3f	; 63
    29c8:	f8 94       	cli
    29ca:	de bf       	out	0x3e, r29	; 62
    29cc:	0f be       	out	0x3f, r0	; 63
    29ce:	cd bf       	out	0x3d, r28	; 61
    29d0:	cf 91       	pop	r28
    29d2:	df 91       	pop	r29
    29d4:	08 95       	ret

000029d6 <SvSeg_VoidDisplay>:

void SvSeg_VoidDisplay(u8 number){
    29d6:	df 93       	push	r29
    29d8:	cf 93       	push	r28
    29da:	0f 92       	push	r0
    29dc:	cd b7       	in	r28, 0x3d	; 61
    29de:	de b7       	in	r29, 0x3e	; 62
    29e0:	89 83       	std	Y+1, r24	; 0x01
	DIO_VoidSetPortValue(Port,arr[number]);
    29e2:	20 91 91 01 	lds	r18, 0x0191
    29e6:	89 81       	ldd	r24, Y+1	; 0x01
    29e8:	88 2f       	mov	r24, r24
    29ea:	90 e0       	ldi	r25, 0x00	; 0
    29ec:	fc 01       	movw	r30, r24
    29ee:	e8 59       	subi	r30, 0x98	; 152
    29f0:	fe 4f       	sbci	r31, 0xFE	; 254
    29f2:	90 81       	ld	r25, Z
    29f4:	82 2f       	mov	r24, r18
    29f6:	69 2f       	mov	r22, r25
    29f8:	0e 94 75 0f 	call	0x1eea	; 0x1eea <DIO_VoidSetPortValue>
}
    29fc:	0f 90       	pop	r0
    29fe:	cf 91       	pop	r28
    2a00:	df 91       	pop	r29
    2a02:	08 95       	ret

00002a04 <SvSeg_CLR>:

void SvSeg_CLR(void){
    2a04:	df 93       	push	r29
    2a06:	cf 93       	push	r28
    2a08:	cd b7       	in	r28, 0x3d	; 61
    2a0a:	de b7       	in	r29, 0x3e	; 62
	DIO_VoidSetPortValue(Port,OFF);
    2a0c:	80 91 91 01 	lds	r24, 0x0191
    2a10:	60 e0       	ldi	r22, 0x00	; 0
    2a12:	0e 94 75 0f 	call	0x1eea	; 0x1eea <DIO_VoidSetPortValue>
}
    2a16:	cf 91       	pop	r28
    2a18:	df 91       	pop	r29
    2a1a:	08 95       	ret

00002a1c <main>:
#include"../MCAL/SPI/SPI_Interface.h"
#include"../MCAL/EXTI/EXTI_Interface.h"
#include"../MCAL/GIE/GIE_Interface.h"

void Pressed(void);
void main(void){
    2a1c:	df 93       	push	r29
    2a1e:	cf 93       	push	r28
    2a20:	cd b7       	in	r28, 0x3d	; 61
    2a22:	de b7       	in	r29, 0x3e	; 62

	//SCLK
	DIO_VoidSetPinDirection(DIO_PORTB,DIO_PIN7,OUTPUT);
    2a24:	81 e0       	ldi	r24, 0x01	; 1
    2a26:	67 e0       	ldi	r22, 0x07	; 7
    2a28:	41 e0       	ldi	r20, 0x01	; 1
    2a2a:	0e 94 86 0c 	call	0x190c	; 0x190c <DIO_VoidSetPinDirection>
	//MOSI
	DIO_VoidSetPinDirection(DIO_PORTB,DIO_PIN5,OUTPUT);
    2a2e:	81 e0       	ldi	r24, 0x01	; 1
    2a30:	65 e0       	ldi	r22, 0x05	; 5
    2a32:	41 e0       	ldi	r20, 0x01	; 1
    2a34:	0e 94 86 0c 	call	0x190c	; 0x190c <DIO_VoidSetPinDirection>
	//MISO
	DIO_VoidSetPinDirection(DIO_PORTB,DIO_PIN6,INPUT);
    2a38:	81 e0       	ldi	r24, 0x01	; 1
    2a3a:	66 e0       	ldi	r22, 0x06	; 6
    2a3c:	40 e0       	ldi	r20, 0x00	; 0
    2a3e:	0e 94 86 0c 	call	0x190c	; 0x190c <DIO_VoidSetPinDirection>
	//SS
	DIO_VoidSetPinDirection(DIO_PORTB,DIO_PIN4,INPUT);
    2a42:	81 e0       	ldi	r24, 0x01	; 1
    2a44:	64 e0       	ldi	r22, 0x04	; 4
    2a46:	40 e0       	ldi	r20, 0x00	; 0
    2a48:	0e 94 86 0c 	call	0x190c	; 0x190c <DIO_VoidSetPinDirection>
	//Pull up
	DIO_VoidSetPinValue(DIO_PORTB,DIO_PIN4,HIGH);
    2a4c:	81 e0       	ldi	r24, 0x01	; 1
    2a4e:	64 e0       	ldi	r22, 0x04	; 4
    2a50:	41 e0       	ldi	r20, 0x01	; 1
    2a52:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <DIO_VoidSetPinValue>

	//Initialize MC as Master
	SPI_MasterInit();
    2a56:	0e 94 ac 0a 	call	0x1558	; 0x1558 <SPI_MasterInit>

	//Initialize EXT Interrupt
	EXTI_VoidInit(EXT_INT0,FALLING);
    2a5a:	80 e0       	ldi	r24, 0x00	; 0
    2a5c:	63 e0       	ldi	r22, 0x03	; 3
    2a5e:	0e 94 1d 0b 	call	0x163a	; 0x163a <EXTI_VoidInit>

	//Initialize EXTI Pin as Input
	DIO_VoidSetPinDirection(DIO_PORTD,DIO_PIN2,INPUT);
    2a62:	83 e0       	ldi	r24, 0x03	; 3
    2a64:	62 e0       	ldi	r22, 0x02	; 2
    2a66:	40 e0       	ldi	r20, 0x00	; 0
    2a68:	0e 94 86 0c 	call	0x190c	; 0x190c <DIO_VoidSetPinDirection>
	DIO_VoidSetPinValue(DIO_PORTD,DIO_PIN2,HIGH);
    2a6c:	83 e0       	ldi	r24, 0x03	; 3
    2a6e:	62 e0       	ldi	r22, 0x02	; 2
    2a70:	41 e0       	ldi	r20, 0x01	; 1
    2a72:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <DIO_VoidSetPinValue>
	//Initialize EXT interrupt SPI
	EXTI_VoidINT0CallBack(&Pressed);
    2a76:	82 e4       	ldi	r24, 0x42	; 66
    2a78:	95 e1       	ldi	r25, 0x15	; 21
    2a7a:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <EXTI_VoidINT0CallBack>
	//GIE
	GIE_voidEnableGlobalInterrupt();
    2a7e:	0e 94 01 0b 	call	0x1602	; 0x1602 <GIE_voidEnableGlobalInterrupt>
    2a82:	ff cf       	rjmp	.-2      	; 0x2a82 <main+0x66>

00002a84 <Pressed>:

	while(1);
}
void Pressed(void){
    2a84:	df 93       	push	r29
    2a86:	cf 93       	push	r28
    2a88:	cd b7       	in	r28, 0x3d	; 61
    2a8a:	de b7       	in	r29, 0x3e	; 62
	SPI_u8Transeive(1);
    2a8c:	81 e0       	ldi	r24, 0x01	; 1
    2a8e:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <SPI_u8Transeive>
}
    2a92:	cf 91       	pop	r28
    2a94:	df 91       	pop	r29
    2a96:	08 95       	ret

00002a98 <__udivmodqi4>:
    2a98:	99 1b       	sub	r25, r25
    2a9a:	79 e0       	ldi	r23, 0x09	; 9
    2a9c:	04 c0       	rjmp	.+8      	; 0x2aa6 <__udivmodqi4_ep>

00002a9e <__udivmodqi4_loop>:
    2a9e:	99 1f       	adc	r25, r25
    2aa0:	96 17       	cp	r25, r22
    2aa2:	08 f0       	brcs	.+2      	; 0x2aa6 <__udivmodqi4_ep>
    2aa4:	96 1b       	sub	r25, r22

00002aa6 <__udivmodqi4_ep>:
    2aa6:	88 1f       	adc	r24, r24
    2aa8:	7a 95       	dec	r23
    2aaa:	c9 f7       	brne	.-14     	; 0x2a9e <__udivmodqi4_loop>
    2aac:	80 95       	com	r24
    2aae:	08 95       	ret

00002ab0 <__prologue_saves__>:
    2ab0:	2f 92       	push	r2
    2ab2:	3f 92       	push	r3
    2ab4:	4f 92       	push	r4
    2ab6:	5f 92       	push	r5
    2ab8:	6f 92       	push	r6
    2aba:	7f 92       	push	r7
    2abc:	8f 92       	push	r8
    2abe:	9f 92       	push	r9
    2ac0:	af 92       	push	r10
    2ac2:	bf 92       	push	r11
    2ac4:	cf 92       	push	r12
    2ac6:	df 92       	push	r13
    2ac8:	ef 92       	push	r14
    2aca:	ff 92       	push	r15
    2acc:	0f 93       	push	r16
    2ace:	1f 93       	push	r17
    2ad0:	cf 93       	push	r28
    2ad2:	df 93       	push	r29
    2ad4:	cd b7       	in	r28, 0x3d	; 61
    2ad6:	de b7       	in	r29, 0x3e	; 62
    2ad8:	ca 1b       	sub	r28, r26
    2ada:	db 0b       	sbc	r29, r27
    2adc:	0f b6       	in	r0, 0x3f	; 63
    2ade:	f8 94       	cli
    2ae0:	de bf       	out	0x3e, r29	; 62
    2ae2:	0f be       	out	0x3f, r0	; 63
    2ae4:	cd bf       	out	0x3d, r28	; 61
    2ae6:	09 94       	ijmp

00002ae8 <__epilogue_restores__>:
    2ae8:	2a 88       	ldd	r2, Y+18	; 0x12
    2aea:	39 88       	ldd	r3, Y+17	; 0x11
    2aec:	48 88       	ldd	r4, Y+16	; 0x10
    2aee:	5f 84       	ldd	r5, Y+15	; 0x0f
    2af0:	6e 84       	ldd	r6, Y+14	; 0x0e
    2af2:	7d 84       	ldd	r7, Y+13	; 0x0d
    2af4:	8c 84       	ldd	r8, Y+12	; 0x0c
    2af6:	9b 84       	ldd	r9, Y+11	; 0x0b
    2af8:	aa 84       	ldd	r10, Y+10	; 0x0a
    2afa:	b9 84       	ldd	r11, Y+9	; 0x09
    2afc:	c8 84       	ldd	r12, Y+8	; 0x08
    2afe:	df 80       	ldd	r13, Y+7	; 0x07
    2b00:	ee 80       	ldd	r14, Y+6	; 0x06
    2b02:	fd 80       	ldd	r15, Y+5	; 0x05
    2b04:	0c 81       	ldd	r16, Y+4	; 0x04
    2b06:	1b 81       	ldd	r17, Y+3	; 0x03
    2b08:	aa 81       	ldd	r26, Y+2	; 0x02
    2b0a:	b9 81       	ldd	r27, Y+1	; 0x01
    2b0c:	ce 0f       	add	r28, r30
    2b0e:	d1 1d       	adc	r29, r1
    2b10:	0f b6       	in	r0, 0x3f	; 63
    2b12:	f8 94       	cli
    2b14:	de bf       	out	0x3e, r29	; 62
    2b16:	0f be       	out	0x3f, r0	; 63
    2b18:	cd bf       	out	0x3d, r28	; 61
    2b1a:	ed 01       	movw	r28, r26
    2b1c:	08 95       	ret

00002b1e <itoa>:
    2b1e:	fb 01       	movw	r30, r22
    2b20:	9f 01       	movw	r18, r30
    2b22:	e8 94       	clt
    2b24:	42 30       	cpi	r20, 0x02	; 2
    2b26:	c4 f0       	brlt	.+48     	; 0x2b58 <itoa+0x3a>
    2b28:	45 32       	cpi	r20, 0x25	; 37
    2b2a:	b4 f4       	brge	.+44     	; 0x2b58 <itoa+0x3a>
    2b2c:	4a 30       	cpi	r20, 0x0A	; 10
    2b2e:	29 f4       	brne	.+10     	; 0x2b3a <itoa+0x1c>
    2b30:	97 fb       	bst	r25, 7
    2b32:	1e f4       	brtc	.+6      	; 0x2b3a <itoa+0x1c>
    2b34:	90 95       	com	r25
    2b36:	81 95       	neg	r24
    2b38:	9f 4f       	sbci	r25, 0xFF	; 255
    2b3a:	64 2f       	mov	r22, r20
    2b3c:	77 27       	eor	r23, r23
    2b3e:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <__udivmodhi4>
    2b42:	80 5d       	subi	r24, 0xD0	; 208
    2b44:	8a 33       	cpi	r24, 0x3A	; 58
    2b46:	0c f0       	brlt	.+2      	; 0x2b4a <itoa+0x2c>
    2b48:	89 5d       	subi	r24, 0xD9	; 217
    2b4a:	81 93       	st	Z+, r24
    2b4c:	cb 01       	movw	r24, r22
    2b4e:	00 97       	sbiw	r24, 0x00	; 0
    2b50:	a1 f7       	brne	.-24     	; 0x2b3a <itoa+0x1c>
    2b52:	16 f4       	brtc	.+4      	; 0x2b58 <itoa+0x3a>
    2b54:	5d e2       	ldi	r21, 0x2D	; 45
    2b56:	51 93       	st	Z+, r21
    2b58:	10 82       	st	Z, r1
    2b5a:	c9 01       	movw	r24, r18
    2b5c:	0c 94 b0 15 	jmp	0x2b60	; 0x2b60 <strrev>

00002b60 <strrev>:
    2b60:	dc 01       	movw	r26, r24
    2b62:	fc 01       	movw	r30, r24
    2b64:	67 2f       	mov	r22, r23
    2b66:	71 91       	ld	r23, Z+
    2b68:	77 23       	and	r23, r23
    2b6a:	e1 f7       	brne	.-8      	; 0x2b64 <strrev+0x4>
    2b6c:	32 97       	sbiw	r30, 0x02	; 2
    2b6e:	04 c0       	rjmp	.+8      	; 0x2b78 <strrev+0x18>
    2b70:	7c 91       	ld	r23, X
    2b72:	6d 93       	st	X+, r22
    2b74:	70 83       	st	Z, r23
    2b76:	62 91       	ld	r22, -Z
    2b78:	ae 17       	cp	r26, r30
    2b7a:	bf 07       	cpc	r27, r31
    2b7c:	c8 f3       	brcs	.-14     	; 0x2b70 <strrev+0x10>
    2b7e:	08 95       	ret

00002b80 <__udivmodhi4>:
    2b80:	aa 1b       	sub	r26, r26
    2b82:	bb 1b       	sub	r27, r27
    2b84:	51 e1       	ldi	r21, 0x11	; 17
    2b86:	07 c0       	rjmp	.+14     	; 0x2b96 <__udivmodhi4_ep>

00002b88 <__udivmodhi4_loop>:
    2b88:	aa 1f       	adc	r26, r26
    2b8a:	bb 1f       	adc	r27, r27
    2b8c:	a6 17       	cp	r26, r22
    2b8e:	b7 07       	cpc	r27, r23
    2b90:	10 f0       	brcs	.+4      	; 0x2b96 <__udivmodhi4_ep>
    2b92:	a6 1b       	sub	r26, r22
    2b94:	b7 0b       	sbc	r27, r23

00002b96 <__udivmodhi4_ep>:
    2b96:	88 1f       	adc	r24, r24
    2b98:	99 1f       	adc	r25, r25
    2b9a:	5a 95       	dec	r21
    2b9c:	a9 f7       	brne	.-22     	; 0x2b88 <__udivmodhi4_loop>
    2b9e:	80 95       	com	r24
    2ba0:	90 95       	com	r25
    2ba2:	bc 01       	movw	r22, r24
    2ba4:	cd 01       	movw	r24, r26
    2ba6:	08 95       	ret

00002ba8 <_exit>:
    2ba8:	f8 94       	cli

00002baa <__stop_program>:
    2baa:	ff cf       	rjmp	.-2      	; 0x2baa <__stop_program>
