
Lec12_LayeredStructure.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002870  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000138  00800060  00002870  00002904  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  00800198  00800198  00002a3c  2**0
                  ALLOC
  3 .stab         00002c64  00000000  00000000  00002a3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001806  00000000  00000000  000056a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00006ea6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d1  00000000  00000000  00007026  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002010  00000000  00000000  000071f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001161  00000000  00000000  00009207  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001003  00000000  00000000  0000a368  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000b36c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002be  00000000  00000000  0000b50c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000090e  00000000  00000000  0000b7ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c0d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 36 0b 	jmp	0x166c	; 0x166c <__vector_1>
       8:	0c 94 69 0b 	jmp	0x16d2	; 0x16d2 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 e4 09 	jmp	0x13c8	; 0x13c8 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 b1 09 	jmp	0x1362	; 0x1362 <__vector_10>
      2c:	0c 94 7e 09 	jmp	0x12fc	; 0x12fc <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e7       	ldi	r30, 0x70	; 112
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 39       	cpi	r26, 0x98	; 152
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e9       	ldi	r26, 0x98	; 152
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 3a       	cpi	r26, 0xA7	; 167
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 41 13 	call	0x2682	; 0x2682 <main>
      8a:	0c 94 36 14 	jmp	0x286c	; 0x286c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ba 13 	jmp	0x2774	; 0x2774 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af e7       	ldi	r26, 0x7F	; 127
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d6 13 	jmp	0x27ac	; 0x27ac <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c6 13 	jmp	0x278c	; 0x278c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e2 13 	jmp	0x27c4	; 0x27c4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c6 13 	jmp	0x278c	; 0x278c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e2 13 	jmp	0x27c4	; 0x27c4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ba 13 	jmp	0x2774	; 0x2774 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8f e7       	ldi	r24, 0x7F	; 127
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d6 13 	jmp	0x27ac	; 0x27ac <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c6 13 	jmp	0x278c	; 0x278c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 e2 13 	jmp	0x27c4	; 0x27c4 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 c6 13 	jmp	0x278c	; 0x278c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 e2 13 	jmp	0x27c4	; 0x27c4 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 c6 13 	jmp	0x278c	; 0x278c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 e2 13 	jmp	0x27c4	; 0x27c4 <__epilogue_restores__+0x18>

00000752 <__floatsisf>:
     752:	a8 e0       	ldi	r26, 0x08	; 8
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 c3 13 	jmp	0x2786	; 0x2786 <__prologue_saves__+0x12>
     75e:	9b 01       	movw	r18, r22
     760:	ac 01       	movw	r20, r24
     762:	83 e0       	ldi	r24, 0x03	; 3
     764:	89 83       	std	Y+1, r24	; 0x01
     766:	da 01       	movw	r26, r20
     768:	c9 01       	movw	r24, r18
     76a:	88 27       	eor	r24, r24
     76c:	b7 fd       	sbrc	r27, 7
     76e:	83 95       	inc	r24
     770:	99 27       	eor	r25, r25
     772:	aa 27       	eor	r26, r26
     774:	bb 27       	eor	r27, r27
     776:	b8 2e       	mov	r11, r24
     778:	21 15       	cp	r18, r1
     77a:	31 05       	cpc	r19, r1
     77c:	41 05       	cpc	r20, r1
     77e:	51 05       	cpc	r21, r1
     780:	19 f4       	brne	.+6      	; 0x788 <__floatsisf+0x36>
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	89 83       	std	Y+1, r24	; 0x01
     786:	3a c0       	rjmp	.+116    	; 0x7fc <__floatsisf+0xaa>
     788:	88 23       	and	r24, r24
     78a:	a9 f0       	breq	.+42     	; 0x7b6 <__floatsisf+0x64>
     78c:	20 30       	cpi	r18, 0x00	; 0
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	38 07       	cpc	r19, r24
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	48 07       	cpc	r20, r24
     796:	80 e8       	ldi	r24, 0x80	; 128
     798:	58 07       	cpc	r21, r24
     79a:	29 f4       	brne	.+10     	; 0x7a6 <__floatsisf+0x54>
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	9f ec       	ldi	r25, 0xCF	; 207
     7a4:	30 c0       	rjmp	.+96     	; 0x806 <__floatsisf+0xb4>
     7a6:	ee 24       	eor	r14, r14
     7a8:	ff 24       	eor	r15, r15
     7aa:	87 01       	movw	r16, r14
     7ac:	e2 1a       	sub	r14, r18
     7ae:	f3 0a       	sbc	r15, r19
     7b0:	04 0b       	sbc	r16, r20
     7b2:	15 0b       	sbc	r17, r21
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <__floatsisf+0x68>
     7b6:	79 01       	movw	r14, r18
     7b8:	8a 01       	movw	r16, r20
     7ba:	8e e1       	ldi	r24, 0x1E	; 30
     7bc:	c8 2e       	mov	r12, r24
     7be:	d1 2c       	mov	r13, r1
     7c0:	dc 82       	std	Y+4, r13	; 0x04
     7c2:	cb 82       	std	Y+3, r12	; 0x03
     7c4:	ed 82       	std	Y+5, r14	; 0x05
     7c6:	fe 82       	std	Y+6, r15	; 0x06
     7c8:	0f 83       	std	Y+7, r16	; 0x07
     7ca:	18 87       	std	Y+8, r17	; 0x08
     7cc:	c8 01       	movw	r24, r16
     7ce:	b7 01       	movw	r22, r14
     7d0:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__clzsi2>
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	18 16       	cp	r1, r24
     7d8:	19 06       	cpc	r1, r25
     7da:	84 f4       	brge	.+32     	; 0x7fc <__floatsisf+0xaa>
     7dc:	08 2e       	mov	r0, r24
     7de:	04 c0       	rjmp	.+8      	; 0x7e8 <__floatsisf+0x96>
     7e0:	ee 0c       	add	r14, r14
     7e2:	ff 1c       	adc	r15, r15
     7e4:	00 1f       	adc	r16, r16
     7e6:	11 1f       	adc	r17, r17
     7e8:	0a 94       	dec	r0
     7ea:	d2 f7       	brpl	.-12     	; 0x7e0 <__floatsisf+0x8e>
     7ec:	ed 82       	std	Y+5, r14	; 0x05
     7ee:	fe 82       	std	Y+6, r15	; 0x06
     7f0:	0f 83       	std	Y+7, r16	; 0x07
     7f2:	18 87       	std	Y+8, r17	; 0x08
     7f4:	c8 1a       	sub	r12, r24
     7f6:	d9 0a       	sbc	r13, r25
     7f8:	dc 82       	std	Y+4, r13	; 0x04
     7fa:	cb 82       	std	Y+3, r12	; 0x03
     7fc:	ba 82       	std	Y+2, r11	; 0x02
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     806:	28 96       	adiw	r28, 0x08	; 8
     808:	e9 e0       	ldi	r30, 0x09	; 9
     80a:	0c 94 df 13 	jmp	0x27be	; 0x27be <__epilogue_restores__+0x12>

0000080e <__fixsfsi>:
     80e:	ac e0       	ldi	r26, 0x0C	; 12
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	ed e0       	ldi	r30, 0x0D	; 13
     814:	f4 e0       	ldi	r31, 0x04	; 4
     816:	0c 94 ca 13 	jmp	0x2794	; 0x2794 <__prologue_saves__+0x20>
     81a:	69 83       	std	Y+1, r22	; 0x01
     81c:	7a 83       	std	Y+2, r23	; 0x02
     81e:	8b 83       	std	Y+3, r24	; 0x03
     820:	9c 83       	std	Y+4, r25	; 0x04
     822:	ce 01       	movw	r24, r28
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	be 01       	movw	r22, r28
     828:	6b 5f       	subi	r22, 0xFB	; 251
     82a:	7f 4f       	sbci	r23, 0xFF	; 255
     82c:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     830:	8d 81       	ldd	r24, Y+5	; 0x05
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	61 f1       	breq	.+88     	; 0x88e <__stack+0x2f>
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	50 f1       	brcs	.+84     	; 0x88e <__stack+0x2f>
     83a:	84 30       	cpi	r24, 0x04	; 4
     83c:	21 f4       	brne	.+8      	; 0x846 <__fixsfsi+0x38>
     83e:	8e 81       	ldd	r24, Y+6	; 0x06
     840:	88 23       	and	r24, r24
     842:	51 f1       	breq	.+84     	; 0x898 <__stack+0x39>
     844:	2e c0       	rjmp	.+92     	; 0x8a2 <__stack+0x43>
     846:	2f 81       	ldd	r18, Y+7	; 0x07
     848:	38 85       	ldd	r19, Y+8	; 0x08
     84a:	37 fd       	sbrc	r19, 7
     84c:	20 c0       	rjmp	.+64     	; 0x88e <__stack+0x2f>
     84e:	6e 81       	ldd	r22, Y+6	; 0x06
     850:	2f 31       	cpi	r18, 0x1F	; 31
     852:	31 05       	cpc	r19, r1
     854:	1c f0       	brlt	.+6      	; 0x85c <__fixsfsi+0x4e>
     856:	66 23       	and	r22, r22
     858:	f9 f0       	breq	.+62     	; 0x898 <__stack+0x39>
     85a:	23 c0       	rjmp	.+70     	; 0x8a2 <__stack+0x43>
     85c:	8e e1       	ldi	r24, 0x1E	; 30
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	82 1b       	sub	r24, r18
     862:	93 0b       	sbc	r25, r19
     864:	29 85       	ldd	r18, Y+9	; 0x09
     866:	3a 85       	ldd	r19, Y+10	; 0x0a
     868:	4b 85       	ldd	r20, Y+11	; 0x0b
     86a:	5c 85       	ldd	r21, Y+12	; 0x0c
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	56 95       	lsr	r21
     870:	47 95       	ror	r20
     872:	37 95       	ror	r19
     874:	27 95       	ror	r18
     876:	8a 95       	dec	r24
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	66 23       	and	r22, r22
     87c:	b1 f0       	breq	.+44     	; 0x8aa <__stack+0x4b>
     87e:	50 95       	com	r21
     880:	40 95       	com	r20
     882:	30 95       	com	r19
     884:	21 95       	neg	r18
     886:	3f 4f       	sbci	r19, 0xFF	; 255
     888:	4f 4f       	sbci	r20, 0xFF	; 255
     88a:	5f 4f       	sbci	r21, 0xFF	; 255
     88c:	0e c0       	rjmp	.+28     	; 0x8aa <__stack+0x4b>
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	09 c0       	rjmp	.+18     	; 0x8aa <__stack+0x4b>
     898:	2f ef       	ldi	r18, 0xFF	; 255
     89a:	3f ef       	ldi	r19, 0xFF	; 255
     89c:	4f ef       	ldi	r20, 0xFF	; 255
     89e:	5f e7       	ldi	r21, 0x7F	; 127
     8a0:	04 c0       	rjmp	.+8      	; 0x8aa <__stack+0x4b>
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	50 e8       	ldi	r21, 0x80	; 128
     8aa:	b9 01       	movw	r22, r18
     8ac:	ca 01       	movw	r24, r20
     8ae:	2c 96       	adiw	r28, 0x0c	; 12
     8b0:	e2 e0       	ldi	r30, 0x02	; 2
     8b2:	0c 94 e6 13 	jmp	0x27cc	; 0x27cc <__epilogue_restores__+0x20>

000008b6 <__clzsi2>:
     8b6:	ef 92       	push	r14
     8b8:	ff 92       	push	r15
     8ba:	0f 93       	push	r16
     8bc:	1f 93       	push	r17
     8be:	7b 01       	movw	r14, r22
     8c0:	8c 01       	movw	r16, r24
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	e8 16       	cp	r14, r24
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	f8 06       	cpc	r15, r24
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	08 07       	cpc	r16, r24
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	18 07       	cpc	r17, r24
     8d2:	88 f4       	brcc	.+34     	; 0x8f6 <__clzsi2+0x40>
     8d4:	8f ef       	ldi	r24, 0xFF	; 255
     8d6:	e8 16       	cp	r14, r24
     8d8:	f1 04       	cpc	r15, r1
     8da:	01 05       	cpc	r16, r1
     8dc:	11 05       	cpc	r17, r1
     8de:	31 f0       	breq	.+12     	; 0x8ec <__clzsi2+0x36>
     8e0:	28 f0       	brcs	.+10     	; 0x8ec <__clzsi2+0x36>
     8e2:	88 e0       	ldi	r24, 0x08	; 8
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	b0 e0       	ldi	r27, 0x00	; 0
     8ea:	17 c0       	rjmp	.+46     	; 0x91a <__clzsi2+0x64>
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	a0 e0       	ldi	r26, 0x00	; 0
     8f2:	b0 e0       	ldi	r27, 0x00	; 0
     8f4:	12 c0       	rjmp	.+36     	; 0x91a <__clzsi2+0x64>
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	e8 16       	cp	r14, r24
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	f8 06       	cpc	r15, r24
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	08 07       	cpc	r16, r24
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	18 07       	cpc	r17, r24
     906:	28 f0       	brcs	.+10     	; 0x912 <__clzsi2+0x5c>
     908:	88 e1       	ldi	r24, 0x18	; 24
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e0       	ldi	r26, 0x00	; 0
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	04 c0       	rjmp	.+8      	; 0x91a <__clzsi2+0x64>
     912:	80 e1       	ldi	r24, 0x10	; 16
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a0 e0       	ldi	r26, 0x00	; 0
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	20 e2       	ldi	r18, 0x20	; 32
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	28 1b       	sub	r18, r24
     924:	39 0b       	sbc	r19, r25
     926:	4a 0b       	sbc	r20, r26
     928:	5b 0b       	sbc	r21, r27
     92a:	04 c0       	rjmp	.+8      	; 0x934 <__clzsi2+0x7e>
     92c:	16 95       	lsr	r17
     92e:	07 95       	ror	r16
     930:	f7 94       	ror	r15
     932:	e7 94       	ror	r14
     934:	8a 95       	dec	r24
     936:	d2 f7       	brpl	.-12     	; 0x92c <__clzsi2+0x76>
     938:	f7 01       	movw	r30, r14
     93a:	e9 57       	subi	r30, 0x79	; 121
     93c:	ff 4f       	sbci	r31, 0xFF	; 255
     93e:	80 81       	ld	r24, Z
     940:	28 1b       	sub	r18, r24
     942:	31 09       	sbc	r19, r1
     944:	41 09       	sbc	r20, r1
     946:	51 09       	sbc	r21, r1
     948:	c9 01       	movw	r24, r18
     94a:	1f 91       	pop	r17
     94c:	0f 91       	pop	r16
     94e:	ff 90       	pop	r15
     950:	ef 90       	pop	r14
     952:	08 95       	ret

00000954 <__pack_f>:
     954:	df 92       	push	r13
     956:	ef 92       	push	r14
     958:	ff 92       	push	r15
     95a:	0f 93       	push	r16
     95c:	1f 93       	push	r17
     95e:	fc 01       	movw	r30, r24
     960:	e4 80       	ldd	r14, Z+4	; 0x04
     962:	f5 80       	ldd	r15, Z+5	; 0x05
     964:	06 81       	ldd	r16, Z+6	; 0x06
     966:	17 81       	ldd	r17, Z+7	; 0x07
     968:	d1 80       	ldd	r13, Z+1	; 0x01
     96a:	80 81       	ld	r24, Z
     96c:	82 30       	cpi	r24, 0x02	; 2
     96e:	48 f4       	brcc	.+18     	; 0x982 <__pack_f+0x2e>
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	a0 e1       	ldi	r26, 0x10	; 16
     976:	b0 e0       	ldi	r27, 0x00	; 0
     978:	e8 2a       	or	r14, r24
     97a:	f9 2a       	or	r15, r25
     97c:	0a 2b       	or	r16, r26
     97e:	1b 2b       	or	r17, r27
     980:	a5 c0       	rjmp	.+330    	; 0xacc <__pack_f+0x178>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	09 f4       	brne	.+2      	; 0x988 <__pack_f+0x34>
     986:	9f c0       	rjmp	.+318    	; 0xac6 <__pack_f+0x172>
     988:	82 30       	cpi	r24, 0x02	; 2
     98a:	21 f4       	brne	.+8      	; 0x994 <__pack_f+0x40>
     98c:	ee 24       	eor	r14, r14
     98e:	ff 24       	eor	r15, r15
     990:	87 01       	movw	r16, r14
     992:	05 c0       	rjmp	.+10     	; 0x99e <__pack_f+0x4a>
     994:	e1 14       	cp	r14, r1
     996:	f1 04       	cpc	r15, r1
     998:	01 05       	cpc	r16, r1
     99a:	11 05       	cpc	r17, r1
     99c:	19 f4       	brne	.+6      	; 0x9a4 <__pack_f+0x50>
     99e:	e0 e0       	ldi	r30, 0x00	; 0
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	96 c0       	rjmp	.+300    	; 0xad0 <__pack_f+0x17c>
     9a4:	62 81       	ldd	r22, Z+2	; 0x02
     9a6:	73 81       	ldd	r23, Z+3	; 0x03
     9a8:	9f ef       	ldi	r25, 0xFF	; 255
     9aa:	62 38       	cpi	r22, 0x82	; 130
     9ac:	79 07       	cpc	r23, r25
     9ae:	0c f0       	brlt	.+2      	; 0x9b2 <__pack_f+0x5e>
     9b0:	5b c0       	rjmp	.+182    	; 0xa68 <__pack_f+0x114>
     9b2:	22 e8       	ldi	r18, 0x82	; 130
     9b4:	3f ef       	ldi	r19, 0xFF	; 255
     9b6:	26 1b       	sub	r18, r22
     9b8:	37 0b       	sbc	r19, r23
     9ba:	2a 31       	cpi	r18, 0x1A	; 26
     9bc:	31 05       	cpc	r19, r1
     9be:	2c f0       	brlt	.+10     	; 0x9ca <__pack_f+0x76>
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	40 e0       	ldi	r20, 0x00	; 0
     9c6:	50 e0       	ldi	r21, 0x00	; 0
     9c8:	2a c0       	rjmp	.+84     	; 0xa1e <__pack_f+0xca>
     9ca:	b8 01       	movw	r22, r16
     9cc:	a7 01       	movw	r20, r14
     9ce:	02 2e       	mov	r0, r18
     9d0:	04 c0       	rjmp	.+8      	; 0x9da <__pack_f+0x86>
     9d2:	76 95       	lsr	r23
     9d4:	67 95       	ror	r22
     9d6:	57 95       	ror	r21
     9d8:	47 95       	ror	r20
     9da:	0a 94       	dec	r0
     9dc:	d2 f7       	brpl	.-12     	; 0x9d2 <__pack_f+0x7e>
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	a0 e0       	ldi	r26, 0x00	; 0
     9e4:	b0 e0       	ldi	r27, 0x00	; 0
     9e6:	04 c0       	rjmp	.+8      	; 0x9f0 <__pack_f+0x9c>
     9e8:	88 0f       	add	r24, r24
     9ea:	99 1f       	adc	r25, r25
     9ec:	aa 1f       	adc	r26, r26
     9ee:	bb 1f       	adc	r27, r27
     9f0:	2a 95       	dec	r18
     9f2:	d2 f7       	brpl	.-12     	; 0x9e8 <__pack_f+0x94>
     9f4:	01 97       	sbiw	r24, 0x01	; 1
     9f6:	a1 09       	sbc	r26, r1
     9f8:	b1 09       	sbc	r27, r1
     9fa:	8e 21       	and	r24, r14
     9fc:	9f 21       	and	r25, r15
     9fe:	a0 23       	and	r26, r16
     a00:	b1 23       	and	r27, r17
     a02:	00 97       	sbiw	r24, 0x00	; 0
     a04:	a1 05       	cpc	r26, r1
     a06:	b1 05       	cpc	r27, r1
     a08:	21 f0       	breq	.+8      	; 0xa12 <__pack_f+0xbe>
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	a0 e0       	ldi	r26, 0x00	; 0
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	9a 01       	movw	r18, r20
     a14:	ab 01       	movw	r20, r22
     a16:	28 2b       	or	r18, r24
     a18:	39 2b       	or	r19, r25
     a1a:	4a 2b       	or	r20, r26
     a1c:	5b 2b       	or	r21, r27
     a1e:	da 01       	movw	r26, r20
     a20:	c9 01       	movw	r24, r18
     a22:	8f 77       	andi	r24, 0x7F	; 127
     a24:	90 70       	andi	r25, 0x00	; 0
     a26:	a0 70       	andi	r26, 0x00	; 0
     a28:	b0 70       	andi	r27, 0x00	; 0
     a2a:	80 34       	cpi	r24, 0x40	; 64
     a2c:	91 05       	cpc	r25, r1
     a2e:	a1 05       	cpc	r26, r1
     a30:	b1 05       	cpc	r27, r1
     a32:	39 f4       	brne	.+14     	; 0xa42 <__pack_f+0xee>
     a34:	27 ff       	sbrs	r18, 7
     a36:	09 c0       	rjmp	.+18     	; 0xa4a <__pack_f+0xf6>
     a38:	20 5c       	subi	r18, 0xC0	; 192
     a3a:	3f 4f       	sbci	r19, 0xFF	; 255
     a3c:	4f 4f       	sbci	r20, 0xFF	; 255
     a3e:	5f 4f       	sbci	r21, 0xFF	; 255
     a40:	04 c0       	rjmp	.+8      	; 0xa4a <__pack_f+0xf6>
     a42:	21 5c       	subi	r18, 0xC1	; 193
     a44:	3f 4f       	sbci	r19, 0xFF	; 255
     a46:	4f 4f       	sbci	r20, 0xFF	; 255
     a48:	5f 4f       	sbci	r21, 0xFF	; 255
     a4a:	e0 e0       	ldi	r30, 0x00	; 0
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	20 30       	cpi	r18, 0x00	; 0
     a50:	a0 e0       	ldi	r26, 0x00	; 0
     a52:	3a 07       	cpc	r19, r26
     a54:	a0 e0       	ldi	r26, 0x00	; 0
     a56:	4a 07       	cpc	r20, r26
     a58:	a0 e4       	ldi	r26, 0x40	; 64
     a5a:	5a 07       	cpc	r21, r26
     a5c:	10 f0       	brcs	.+4      	; 0xa62 <__pack_f+0x10e>
     a5e:	e1 e0       	ldi	r30, 0x01	; 1
     a60:	f0 e0       	ldi	r31, 0x00	; 0
     a62:	79 01       	movw	r14, r18
     a64:	8a 01       	movw	r16, r20
     a66:	27 c0       	rjmp	.+78     	; 0xab6 <__pack_f+0x162>
     a68:	60 38       	cpi	r22, 0x80	; 128
     a6a:	71 05       	cpc	r23, r1
     a6c:	64 f5       	brge	.+88     	; 0xac6 <__pack_f+0x172>
     a6e:	fb 01       	movw	r30, r22
     a70:	e1 58       	subi	r30, 0x81	; 129
     a72:	ff 4f       	sbci	r31, 0xFF	; 255
     a74:	d8 01       	movw	r26, r16
     a76:	c7 01       	movw	r24, r14
     a78:	8f 77       	andi	r24, 0x7F	; 127
     a7a:	90 70       	andi	r25, 0x00	; 0
     a7c:	a0 70       	andi	r26, 0x00	; 0
     a7e:	b0 70       	andi	r27, 0x00	; 0
     a80:	80 34       	cpi	r24, 0x40	; 64
     a82:	91 05       	cpc	r25, r1
     a84:	a1 05       	cpc	r26, r1
     a86:	b1 05       	cpc	r27, r1
     a88:	39 f4       	brne	.+14     	; 0xa98 <__pack_f+0x144>
     a8a:	e7 fe       	sbrs	r14, 7
     a8c:	0d c0       	rjmp	.+26     	; 0xaa8 <__pack_f+0x154>
     a8e:	80 e4       	ldi	r24, 0x40	; 64
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	a0 e0       	ldi	r26, 0x00	; 0
     a94:	b0 e0       	ldi	r27, 0x00	; 0
     a96:	04 c0       	rjmp	.+8      	; 0xaa0 <__pack_f+0x14c>
     a98:	8f e3       	ldi	r24, 0x3F	; 63
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	a0 e0       	ldi	r26, 0x00	; 0
     a9e:	b0 e0       	ldi	r27, 0x00	; 0
     aa0:	e8 0e       	add	r14, r24
     aa2:	f9 1e       	adc	r15, r25
     aa4:	0a 1f       	adc	r16, r26
     aa6:	1b 1f       	adc	r17, r27
     aa8:	17 ff       	sbrs	r17, 7
     aaa:	05 c0       	rjmp	.+10     	; 0xab6 <__pack_f+0x162>
     aac:	16 95       	lsr	r17
     aae:	07 95       	ror	r16
     ab0:	f7 94       	ror	r15
     ab2:	e7 94       	ror	r14
     ab4:	31 96       	adiw	r30, 0x01	; 1
     ab6:	87 e0       	ldi	r24, 0x07	; 7
     ab8:	16 95       	lsr	r17
     aba:	07 95       	ror	r16
     abc:	f7 94       	ror	r15
     abe:	e7 94       	ror	r14
     ac0:	8a 95       	dec	r24
     ac2:	d1 f7       	brne	.-12     	; 0xab8 <__pack_f+0x164>
     ac4:	05 c0       	rjmp	.+10     	; 0xad0 <__pack_f+0x17c>
     ac6:	ee 24       	eor	r14, r14
     ac8:	ff 24       	eor	r15, r15
     aca:	87 01       	movw	r16, r14
     acc:	ef ef       	ldi	r30, 0xFF	; 255
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	6e 2f       	mov	r22, r30
     ad2:	67 95       	ror	r22
     ad4:	66 27       	eor	r22, r22
     ad6:	67 95       	ror	r22
     ad8:	90 2f       	mov	r25, r16
     ada:	9f 77       	andi	r25, 0x7F	; 127
     adc:	d7 94       	ror	r13
     ade:	dd 24       	eor	r13, r13
     ae0:	d7 94       	ror	r13
     ae2:	8e 2f       	mov	r24, r30
     ae4:	86 95       	lsr	r24
     ae6:	49 2f       	mov	r20, r25
     ae8:	46 2b       	or	r20, r22
     aea:	58 2f       	mov	r21, r24
     aec:	5d 29       	or	r21, r13
     aee:	b7 01       	movw	r22, r14
     af0:	ca 01       	movw	r24, r20
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	ff 90       	pop	r15
     af8:	ef 90       	pop	r14
     afa:	df 90       	pop	r13
     afc:	08 95       	ret

00000afe <__unpack_f>:
     afe:	fc 01       	movw	r30, r24
     b00:	db 01       	movw	r26, r22
     b02:	40 81       	ld	r20, Z
     b04:	51 81       	ldd	r21, Z+1	; 0x01
     b06:	22 81       	ldd	r18, Z+2	; 0x02
     b08:	62 2f       	mov	r22, r18
     b0a:	6f 77       	andi	r22, 0x7F	; 127
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	22 1f       	adc	r18, r18
     b10:	22 27       	eor	r18, r18
     b12:	22 1f       	adc	r18, r18
     b14:	93 81       	ldd	r25, Z+3	; 0x03
     b16:	89 2f       	mov	r24, r25
     b18:	88 0f       	add	r24, r24
     b1a:	82 2b       	or	r24, r18
     b1c:	28 2f       	mov	r18, r24
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	99 1f       	adc	r25, r25
     b22:	99 27       	eor	r25, r25
     b24:	99 1f       	adc	r25, r25
     b26:	11 96       	adiw	r26, 0x01	; 1
     b28:	9c 93       	st	X, r25
     b2a:	11 97       	sbiw	r26, 0x01	; 1
     b2c:	21 15       	cp	r18, r1
     b2e:	31 05       	cpc	r19, r1
     b30:	a9 f5       	brne	.+106    	; 0xb9c <__unpack_f+0x9e>
     b32:	41 15       	cp	r20, r1
     b34:	51 05       	cpc	r21, r1
     b36:	61 05       	cpc	r22, r1
     b38:	71 05       	cpc	r23, r1
     b3a:	11 f4       	brne	.+4      	; 0xb40 <__unpack_f+0x42>
     b3c:	82 e0       	ldi	r24, 0x02	; 2
     b3e:	37 c0       	rjmp	.+110    	; 0xbae <__unpack_f+0xb0>
     b40:	82 e8       	ldi	r24, 0x82	; 130
     b42:	9f ef       	ldi	r25, 0xFF	; 255
     b44:	13 96       	adiw	r26, 0x03	; 3
     b46:	9c 93       	st	X, r25
     b48:	8e 93       	st	-X, r24
     b4a:	12 97       	sbiw	r26, 0x02	; 2
     b4c:	9a 01       	movw	r18, r20
     b4e:	ab 01       	movw	r20, r22
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	6a 95       	dec	r22
     b5c:	d1 f7       	brne	.-12     	; 0xb52 <__unpack_f+0x54>
     b5e:	83 e0       	ldi	r24, 0x03	; 3
     b60:	8c 93       	st	X, r24
     b62:	0d c0       	rjmp	.+26     	; 0xb7e <__unpack_f+0x80>
     b64:	22 0f       	add	r18, r18
     b66:	33 1f       	adc	r19, r19
     b68:	44 1f       	adc	r20, r20
     b6a:	55 1f       	adc	r21, r21
     b6c:	12 96       	adiw	r26, 0x02	; 2
     b6e:	8d 91       	ld	r24, X+
     b70:	9c 91       	ld	r25, X
     b72:	13 97       	sbiw	r26, 0x03	; 3
     b74:	01 97       	sbiw	r24, 0x01	; 1
     b76:	13 96       	adiw	r26, 0x03	; 3
     b78:	9c 93       	st	X, r25
     b7a:	8e 93       	st	-X, r24
     b7c:	12 97       	sbiw	r26, 0x02	; 2
     b7e:	20 30       	cpi	r18, 0x00	; 0
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	38 07       	cpc	r19, r24
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	48 07       	cpc	r20, r24
     b88:	80 e4       	ldi	r24, 0x40	; 64
     b8a:	58 07       	cpc	r21, r24
     b8c:	58 f3       	brcs	.-42     	; 0xb64 <__unpack_f+0x66>
     b8e:	14 96       	adiw	r26, 0x04	; 4
     b90:	2d 93       	st	X+, r18
     b92:	3d 93       	st	X+, r19
     b94:	4d 93       	st	X+, r20
     b96:	5c 93       	st	X, r21
     b98:	17 97       	sbiw	r26, 0x07	; 7
     b9a:	08 95       	ret
     b9c:	2f 3f       	cpi	r18, 0xFF	; 255
     b9e:	31 05       	cpc	r19, r1
     ba0:	79 f4       	brne	.+30     	; 0xbc0 <__unpack_f+0xc2>
     ba2:	41 15       	cp	r20, r1
     ba4:	51 05       	cpc	r21, r1
     ba6:	61 05       	cpc	r22, r1
     ba8:	71 05       	cpc	r23, r1
     baa:	19 f4       	brne	.+6      	; 0xbb2 <__unpack_f+0xb4>
     bac:	84 e0       	ldi	r24, 0x04	; 4
     bae:	8c 93       	st	X, r24
     bb0:	08 95       	ret
     bb2:	64 ff       	sbrs	r22, 4
     bb4:	03 c0       	rjmp	.+6      	; 0xbbc <__unpack_f+0xbe>
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	8c 93       	st	X, r24
     bba:	12 c0       	rjmp	.+36     	; 0xbe0 <__unpack_f+0xe2>
     bbc:	1c 92       	st	X, r1
     bbe:	10 c0       	rjmp	.+32     	; 0xbe0 <__unpack_f+0xe2>
     bc0:	2f 57       	subi	r18, 0x7F	; 127
     bc2:	30 40       	sbci	r19, 0x00	; 0
     bc4:	13 96       	adiw	r26, 0x03	; 3
     bc6:	3c 93       	st	X, r19
     bc8:	2e 93       	st	-X, r18
     bca:	12 97       	sbiw	r26, 0x02	; 2
     bcc:	83 e0       	ldi	r24, 0x03	; 3
     bce:	8c 93       	st	X, r24
     bd0:	87 e0       	ldi	r24, 0x07	; 7
     bd2:	44 0f       	add	r20, r20
     bd4:	55 1f       	adc	r21, r21
     bd6:	66 1f       	adc	r22, r22
     bd8:	77 1f       	adc	r23, r23
     bda:	8a 95       	dec	r24
     bdc:	d1 f7       	brne	.-12     	; 0xbd2 <__unpack_f+0xd4>
     bde:	70 64       	ori	r23, 0x40	; 64
     be0:	14 96       	adiw	r26, 0x04	; 4
     be2:	4d 93       	st	X+, r20
     be4:	5d 93       	st	X+, r21
     be6:	6d 93       	st	X+, r22
     be8:	7c 93       	st	X, r23
     bea:	17 97       	sbiw	r26, 0x07	; 7
     bec:	08 95       	ret

00000bee <__fpcmp_parts_f>:
     bee:	1f 93       	push	r17
     bf0:	dc 01       	movw	r26, r24
     bf2:	fb 01       	movw	r30, r22
     bf4:	9c 91       	ld	r25, X
     bf6:	92 30       	cpi	r25, 0x02	; 2
     bf8:	08 f4       	brcc	.+2      	; 0xbfc <__fpcmp_parts_f+0xe>
     bfa:	47 c0       	rjmp	.+142    	; 0xc8a <__fpcmp_parts_f+0x9c>
     bfc:	80 81       	ld	r24, Z
     bfe:	82 30       	cpi	r24, 0x02	; 2
     c00:	08 f4       	brcc	.+2      	; 0xc04 <__fpcmp_parts_f+0x16>
     c02:	43 c0       	rjmp	.+134    	; 0xc8a <__fpcmp_parts_f+0x9c>
     c04:	94 30       	cpi	r25, 0x04	; 4
     c06:	51 f4       	brne	.+20     	; 0xc1c <__fpcmp_parts_f+0x2e>
     c08:	11 96       	adiw	r26, 0x01	; 1
     c0a:	1c 91       	ld	r17, X
     c0c:	84 30       	cpi	r24, 0x04	; 4
     c0e:	99 f5       	brne	.+102    	; 0xc76 <__fpcmp_parts_f+0x88>
     c10:	81 81       	ldd	r24, Z+1	; 0x01
     c12:	68 2f       	mov	r22, r24
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	61 1b       	sub	r22, r17
     c18:	71 09       	sbc	r23, r1
     c1a:	3f c0       	rjmp	.+126    	; 0xc9a <__fpcmp_parts_f+0xac>
     c1c:	84 30       	cpi	r24, 0x04	; 4
     c1e:	21 f0       	breq	.+8      	; 0xc28 <__fpcmp_parts_f+0x3a>
     c20:	92 30       	cpi	r25, 0x02	; 2
     c22:	31 f4       	brne	.+12     	; 0xc30 <__fpcmp_parts_f+0x42>
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	b9 f1       	breq	.+110    	; 0xc96 <__fpcmp_parts_f+0xa8>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	88 23       	and	r24, r24
     c2c:	89 f1       	breq	.+98     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c2e:	2d c0       	rjmp	.+90     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c30:	11 96       	adiw	r26, 0x01	; 1
     c32:	1c 91       	ld	r17, X
     c34:	11 97       	sbiw	r26, 0x01	; 1
     c36:	82 30       	cpi	r24, 0x02	; 2
     c38:	f1 f0       	breq	.+60     	; 0xc76 <__fpcmp_parts_f+0x88>
     c3a:	81 81       	ldd	r24, Z+1	; 0x01
     c3c:	18 17       	cp	r17, r24
     c3e:	d9 f4       	brne	.+54     	; 0xc76 <__fpcmp_parts_f+0x88>
     c40:	12 96       	adiw	r26, 0x02	; 2
     c42:	2d 91       	ld	r18, X+
     c44:	3c 91       	ld	r19, X
     c46:	13 97       	sbiw	r26, 0x03	; 3
     c48:	82 81       	ldd	r24, Z+2	; 0x02
     c4a:	93 81       	ldd	r25, Z+3	; 0x03
     c4c:	82 17       	cp	r24, r18
     c4e:	93 07       	cpc	r25, r19
     c50:	94 f0       	brlt	.+36     	; 0xc76 <__fpcmp_parts_f+0x88>
     c52:	28 17       	cp	r18, r24
     c54:	39 07       	cpc	r19, r25
     c56:	bc f0       	brlt	.+46     	; 0xc86 <__fpcmp_parts_f+0x98>
     c58:	14 96       	adiw	r26, 0x04	; 4
     c5a:	8d 91       	ld	r24, X+
     c5c:	9d 91       	ld	r25, X+
     c5e:	0d 90       	ld	r0, X+
     c60:	bc 91       	ld	r27, X
     c62:	a0 2d       	mov	r26, r0
     c64:	24 81       	ldd	r18, Z+4	; 0x04
     c66:	35 81       	ldd	r19, Z+5	; 0x05
     c68:	46 81       	ldd	r20, Z+6	; 0x06
     c6a:	57 81       	ldd	r21, Z+7	; 0x07
     c6c:	28 17       	cp	r18, r24
     c6e:	39 07       	cpc	r19, r25
     c70:	4a 07       	cpc	r20, r26
     c72:	5b 07       	cpc	r21, r27
     c74:	18 f4       	brcc	.+6      	; 0xc7c <__fpcmp_parts_f+0x8e>
     c76:	11 23       	and	r17, r17
     c78:	41 f0       	breq	.+16     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c7a:	0a c0       	rjmp	.+20     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c7c:	82 17       	cp	r24, r18
     c7e:	93 07       	cpc	r25, r19
     c80:	a4 07       	cpc	r26, r20
     c82:	b5 07       	cpc	r27, r21
     c84:	40 f4       	brcc	.+16     	; 0xc96 <__fpcmp_parts_f+0xa8>
     c86:	11 23       	and	r17, r17
     c88:	19 f0       	breq	.+6      	; 0xc90 <__fpcmp_parts_f+0xa2>
     c8a:	61 e0       	ldi	r22, 0x01	; 1
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	05 c0       	rjmp	.+10     	; 0xc9a <__fpcmp_parts_f+0xac>
     c90:	6f ef       	ldi	r22, 0xFF	; 255
     c92:	7f ef       	ldi	r23, 0xFF	; 255
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <__fpcmp_parts_f+0xac>
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	cb 01       	movw	r24, r22
     c9c:	1f 91       	pop	r17
     c9e:	08 95       	ret

00000ca0 <WDT_VoidEnable>:
#include"../../LIB/STD_Type.h"
#include"../../LIB/BIT_MATH.h"

#include"WDT_Interface.h"

void WDT_VoidEnable(void){
     ca0:	df 93       	push	r29
     ca2:	cf 93       	push	r28
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(WDTCR,3);
     ca8:	a1 e4       	ldi	r26, 0x41	; 65
     caa:	b0 e0       	ldi	r27, 0x00	; 0
     cac:	e1 e4       	ldi	r30, 0x41	; 65
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	80 81       	ld	r24, Z
     cb2:	88 60       	ori	r24, 0x08	; 8
     cb4:	8c 93       	st	X, r24
}
     cb6:	cf 91       	pop	r28
     cb8:	df 91       	pop	r29
     cba:	08 95       	ret

00000cbc <WDT_VoidDisable>:

void WDT_VoidDisable(void){
     cbc:	df 93       	push	r29
     cbe:	cf 93       	push	r28
     cc0:	cd b7       	in	r28, 0x3d	; 61
     cc2:	de b7       	in	r29, 0x3e	; 62
	WDTCR |= (3<<3);
     cc4:	a1 e4       	ldi	r26, 0x41	; 65
     cc6:	b0 e0       	ldi	r27, 0x00	; 0
     cc8:	e1 e4       	ldi	r30, 0x41	; 65
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	80 81       	ld	r24, Z
     cce:	88 61       	ori	r24, 0x18	; 24
     cd0:	8c 93       	st	X, r24
	CLR_Bit(WDTCR,3);
     cd2:	a1 e4       	ldi	r26, 0x41	; 65
     cd4:	b0 e0       	ldi	r27, 0x00	; 0
     cd6:	e1 e4       	ldi	r30, 0x41	; 65
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	80 81       	ld	r24, Z
     cdc:	87 7f       	andi	r24, 0xF7	; 247
     cde:	8c 93       	st	X, r24
}
     ce0:	cf 91       	pop	r28
     ce2:	df 91       	pop	r29
     ce4:	08 95       	ret

00000ce6 <WDT_VoidSleep>:

void WDT_VoidSleep(u8 Copy_u8SleepTime){
     ce6:	df 93       	push	r29
     ce8:	cf 93       	push	r28
     cea:	00 d0       	rcall	.+0      	; 0xcec <WDT_VoidSleep+0x6>
     cec:	cd b7       	in	r28, 0x3d	; 61
     cee:	de b7       	in	r29, 0x3e	; 62
     cf0:	8a 83       	std	Y+2, r24	; 0x02
	//Set Prescale Value
	for(u8 i=0;i<3;i++){
     cf2:	19 82       	std	Y+1, r1	; 0x01
     cf4:	39 c0       	rjmp	.+114    	; 0xd68 <WDT_VoidSleep+0x82>
		if((Copy_u8SleepTime%10)==1)
     cf6:	8a 81       	ldd	r24, Y+2	; 0x02
     cf8:	9a e0       	ldi	r25, 0x0A	; 10
     cfa:	69 2f       	mov	r22, r25
     cfc:	0e 94 ae 13 	call	0x275c	; 0x275c <__udivmodqi4>
     d00:	89 2f       	mov	r24, r25
     d02:	81 30       	cpi	r24, 0x01	; 1
     d04:	a1 f4       	brne	.+40     	; 0xd2e <WDT_VoidSleep+0x48>
			Set_Bit(WDTCR,i);
     d06:	a1 e4       	ldi	r26, 0x41	; 65
     d08:	b0 e0       	ldi	r27, 0x00	; 0
     d0a:	e1 e4       	ldi	r30, 0x41	; 65
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	80 81       	ld	r24, Z
     d10:	48 2f       	mov	r20, r24
     d12:	89 81       	ldd	r24, Y+1	; 0x01
     d14:	28 2f       	mov	r18, r24
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	02 2e       	mov	r0, r18
     d1e:	02 c0       	rjmp	.+4      	; 0xd24 <WDT_VoidSleep+0x3e>
     d20:	88 0f       	add	r24, r24
     d22:	99 1f       	adc	r25, r25
     d24:	0a 94       	dec	r0
     d26:	e2 f7       	brpl	.-8      	; 0xd20 <WDT_VoidSleep+0x3a>
     d28:	84 2b       	or	r24, r20
     d2a:	8c 93       	st	X, r24
     d2c:	14 c0       	rjmp	.+40     	; 0xd56 <WDT_VoidSleep+0x70>
		else
			CLR_Bit(WDTCR,i);
     d2e:	a1 e4       	ldi	r26, 0x41	; 65
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	e1 e4       	ldi	r30, 0x41	; 65
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	80 81       	ld	r24, Z
     d38:	48 2f       	mov	r20, r24
     d3a:	89 81       	ldd	r24, Y+1	; 0x01
     d3c:	28 2f       	mov	r18, r24
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	02 2e       	mov	r0, r18
     d46:	02 c0       	rjmp	.+4      	; 0xd4c <WDT_VoidSleep+0x66>
     d48:	88 0f       	add	r24, r24
     d4a:	99 1f       	adc	r25, r25
     d4c:	0a 94       	dec	r0
     d4e:	e2 f7       	brpl	.-8      	; 0xd48 <WDT_VoidSleep+0x62>
     d50:	80 95       	com	r24
     d52:	84 23       	and	r24, r20
     d54:	8c 93       	st	X, r24
		Copy_u8SleepTime = Copy_u8SleepTime /10;
     d56:	8a 81       	ldd	r24, Y+2	; 0x02
     d58:	9a e0       	ldi	r25, 0x0A	; 10
     d5a:	69 2f       	mov	r22, r25
     d5c:	0e 94 ae 13 	call	0x275c	; 0x275c <__udivmodqi4>
     d60:	8a 83       	std	Y+2, r24	; 0x02
	CLR_Bit(WDTCR,3);
}

void WDT_VoidSleep(u8 Copy_u8SleepTime){
	//Set Prescale Value
	for(u8 i=0;i<3;i++){
     d62:	89 81       	ldd	r24, Y+1	; 0x01
     d64:	8f 5f       	subi	r24, 0xFF	; 255
     d66:	89 83       	std	Y+1, r24	; 0x01
     d68:	89 81       	ldd	r24, Y+1	; 0x01
     d6a:	83 30       	cpi	r24, 0x03	; 3
     d6c:	20 f2       	brcs	.-120    	; 0xcf6 <WDT_VoidSleep+0x10>
			Set_Bit(WDTCR,i);
		else
			CLR_Bit(WDTCR,i);
		Copy_u8SleepTime = Copy_u8SleepTime /10;
	}
}
     d6e:	0f 90       	pop	r0
     d70:	0f 90       	pop	r0
     d72:	cf 91       	pop	r28
     d74:	df 91       	pop	r29
     d76:	08 95       	ret

00000d78 <TIMER_Timer0Init>:
		1 0 0 	clkT2S/64 (From prescaler)
		1 0 1 	clkT2S/128 (From prescaler)
		1 1 0 	clkT2S/256 (From prescaler)
		1 1 1 	clkT2S/1024 (From prescaler)
  */
void TIMER_Timer0Init(u8 Copy_Mode,u8 Copy_Prescaller){
     d78:	df 93       	push	r29
     d7a:	cf 93       	push	r28
     d7c:	00 d0       	rcall	.+0      	; 0xd7e <TIMER_Timer0Init+0x6>
     d7e:	00 d0       	rcall	.+0      	; 0xd80 <TIMER_Timer0Init+0x8>
     d80:	0f 92       	push	r0
     d82:	cd b7       	in	r28, 0x3d	; 61
     d84:	de b7       	in	r29, 0x3e	; 62
     d86:	8a 83       	std	Y+2, r24	; 0x02
     d88:	6b 83       	std	Y+3, r22	; 0x03

	//Clearing bit 6 in TCCR0 for both Modes
	CLR_Bit(TCCR0,6);
     d8a:	a3 e5       	ldi	r26, 0x53	; 83
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	e3 e5       	ldi	r30, 0x53	; 83
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	8f 7b       	andi	r24, 0xBF	; 191
     d96:	8c 93       	st	X, r24
	switch (Copy_Mode) {
     d98:	8a 81       	ldd	r24, Y+2	; 0x02
     d9a:	28 2f       	mov	r18, r24
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	3d 83       	std	Y+5, r19	; 0x05
     da0:	2c 83       	std	Y+4, r18	; 0x04
     da2:	8c 81       	ldd	r24, Y+4	; 0x04
     da4:	9d 81       	ldd	r25, Y+5	; 0x05
     da6:	00 97       	sbiw	r24, 0x00	; 0
     da8:	31 f0       	breq	.+12     	; 0xdb6 <TIMER_Timer0Init+0x3e>
     daa:	2c 81       	ldd	r18, Y+4	; 0x04
     dac:	3d 81       	ldd	r19, Y+5	; 0x05
     dae:	21 30       	cpi	r18, 0x01	; 1
     db0:	31 05       	cpc	r19, r1
     db2:	c9 f0       	breq	.+50     	; 0xde6 <TIMER_Timer0Init+0x6e>
     db4:	30 c0       	rjmp	.+96     	; 0xe16 <TIMER_Timer0Init+0x9e>
		case NORMAL:
			CLR_Bit(TCCR0,3);
     db6:	a3 e5       	ldi	r26, 0x53	; 83
     db8:	b0 e0       	ldi	r27, 0x00	; 0
     dba:	e3 e5       	ldi	r30, 0x53	; 83
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	80 81       	ld	r24, Z
     dc0:	87 7f       	andi	r24, 0xF7	; 247
     dc2:	8c 93       	st	X, r24
			//Enable OverFlow Interrupt
			Set_Bit(TIMSK,0);
     dc4:	a9 e5       	ldi	r26, 0x59	; 89
     dc6:	b0 e0       	ldi	r27, 0x00	; 0
     dc8:	e9 e5       	ldi	r30, 0x59	; 89
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	80 81       	ld	r24, Z
     dce:	81 60       	ori	r24, 0x01	; 1
     dd0:	8c 93       	st	X, r24
			//Disable CTC Interrupt
			CLR_Bit(TIMSK,1);
     dd2:	a9 e5       	ldi	r26, 0x59	; 89
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	e9 e5       	ldi	r30, 0x59	; 89
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
     ddc:	8d 7f       	andi	r24, 0xFD	; 253
     dde:	8c 93       	st	X, r24
			Mode_flag = 0;
     de0:	10 92 9e 01 	sts	0x019E, r1
     de4:	18 c0       	rjmp	.+48     	; 0xe16 <TIMER_Timer0Init+0x9e>
			break;
		case CTC:
			Set_Bit(TCCR0,3);
     de6:	a3 e5       	ldi	r26, 0x53	; 83
     de8:	b0 e0       	ldi	r27, 0x00	; 0
     dea:	e3 e5       	ldi	r30, 0x53	; 83
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	80 81       	ld	r24, Z
     df0:	88 60       	ori	r24, 0x08	; 8
     df2:	8c 93       	st	X, r24
			//Enable CTC Interrupt
			Set_Bit(TIMSK,1);
     df4:	a9 e5       	ldi	r26, 0x59	; 89
     df6:	b0 e0       	ldi	r27, 0x00	; 0
     df8:	e9 e5       	ldi	r30, 0x59	; 89
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	80 81       	ld	r24, Z
     dfe:	82 60       	ori	r24, 0x02	; 2
     e00:	8c 93       	st	X, r24
			//Disable OverFlow Interrupt
			CLR_Bit(TIMSK,0);
     e02:	a9 e5       	ldi	r26, 0x59	; 89
     e04:	b0 e0       	ldi	r27, 0x00	; 0
     e06:	e9 e5       	ldi	r30, 0x59	; 89
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	80 81       	ld	r24, Z
     e0c:	8e 7f       	andi	r24, 0xFE	; 254
     e0e:	8c 93       	st	X, r24
			Mode_flag = 1;
     e10:	81 e0       	ldi	r24, 0x01	; 1
     e12:	80 93 9e 01 	sts	0x019E, r24
			break;
	}
	//Set Prescaller Value
	for(u8 i=0;i<3;i++){
     e16:	19 82       	std	Y+1, r1	; 0x01
     e18:	39 c0       	rjmp	.+114    	; 0xe8c <TIMER_Timer0Init+0x114>
		if((Copy_Prescaller%10)==1)
     e1a:	8b 81       	ldd	r24, Y+3	; 0x03
     e1c:	9a e0       	ldi	r25, 0x0A	; 10
     e1e:	69 2f       	mov	r22, r25
     e20:	0e 94 ae 13 	call	0x275c	; 0x275c <__udivmodqi4>
     e24:	89 2f       	mov	r24, r25
     e26:	81 30       	cpi	r24, 0x01	; 1
     e28:	a1 f4       	brne	.+40     	; 0xe52 <TIMER_Timer0Init+0xda>
			Set_Bit(TCCR0,i);
     e2a:	a3 e5       	ldi	r26, 0x53	; 83
     e2c:	b0 e0       	ldi	r27, 0x00	; 0
     e2e:	e3 e5       	ldi	r30, 0x53	; 83
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	80 81       	ld	r24, Z
     e34:	48 2f       	mov	r20, r24
     e36:	89 81       	ldd	r24, Y+1	; 0x01
     e38:	28 2f       	mov	r18, r24
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	02 2e       	mov	r0, r18
     e42:	02 c0       	rjmp	.+4      	; 0xe48 <TIMER_Timer0Init+0xd0>
     e44:	88 0f       	add	r24, r24
     e46:	99 1f       	adc	r25, r25
     e48:	0a 94       	dec	r0
     e4a:	e2 f7       	brpl	.-8      	; 0xe44 <TIMER_Timer0Init+0xcc>
     e4c:	84 2b       	or	r24, r20
     e4e:	8c 93       	st	X, r24
     e50:	14 c0       	rjmp	.+40     	; 0xe7a <TIMER_Timer0Init+0x102>
		else
			CLR_Bit(TCCR0,i);
     e52:	a3 e5       	ldi	r26, 0x53	; 83
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e3 e5       	ldi	r30, 0x53	; 83
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	48 2f       	mov	r20, r24
     e5e:	89 81       	ldd	r24, Y+1	; 0x01
     e60:	28 2f       	mov	r18, r24
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	02 2e       	mov	r0, r18
     e6a:	02 c0       	rjmp	.+4      	; 0xe70 <TIMER_Timer0Init+0xf8>
     e6c:	88 0f       	add	r24, r24
     e6e:	99 1f       	adc	r25, r25
     e70:	0a 94       	dec	r0
     e72:	e2 f7       	brpl	.-8      	; 0xe6c <TIMER_Timer0Init+0xf4>
     e74:	80 95       	com	r24
     e76:	84 23       	and	r24, r20
     e78:	8c 93       	st	X, r24
		Copy_Prescaller = Copy_Prescaller /10;
     e7a:	8b 81       	ldd	r24, Y+3	; 0x03
     e7c:	9a e0       	ldi	r25, 0x0A	; 10
     e7e:	69 2f       	mov	r22, r25
     e80:	0e 94 ae 13 	call	0x275c	; 0x275c <__udivmodqi4>
     e84:	8b 83       	std	Y+3, r24	; 0x03
			CLR_Bit(TIMSK,0);
			Mode_flag = 1;
			break;
	}
	//Set Prescaller Value
	for(u8 i=0;i<3;i++){
     e86:	89 81       	ldd	r24, Y+1	; 0x01
     e88:	8f 5f       	subi	r24, 0xFF	; 255
     e8a:	89 83       	std	Y+1, r24	; 0x01
     e8c:	89 81       	ldd	r24, Y+1	; 0x01
     e8e:	83 30       	cpi	r24, 0x03	; 3
     e90:	20 f2       	brcs	.-120    	; 0xe1a <TIMER_Timer0Init+0xa2>
			Set_Bit(TCCR0,i);
		else
			CLR_Bit(TCCR0,i);
		Copy_Prescaller = Copy_Prescaller /10;
	}
}
     e92:	0f 90       	pop	r0
     e94:	0f 90       	pop	r0
     e96:	0f 90       	pop	r0
     e98:	0f 90       	pop	r0
     e9a:	0f 90       	pop	r0
     e9c:	cf 91       	pop	r28
     e9e:	df 91       	pop	r29
     ea0:	08 95       	ret

00000ea2 <TIMER_Timer0RegValue>:

void TIMER_Timer0RegValue(u8 Copy_Preload_Compare_Value){
     ea2:	df 93       	push	r29
     ea4:	cf 93       	push	r28
     ea6:	00 d0       	rcall	.+0      	; 0xea8 <TIMER_Timer0RegValue+0x6>
     ea8:	0f 92       	push	r0
     eaa:	cd b7       	in	r28, 0x3d	; 61
     eac:	de b7       	in	r29, 0x3e	; 62
     eae:	89 83       	std	Y+1, r24	; 0x01
	switch (Mode_flag){
     eb0:	80 91 9e 01 	lds	r24, 0x019E
     eb4:	28 2f       	mov	r18, r24
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	3b 83       	std	Y+3, r19	; 0x03
     eba:	2a 83       	std	Y+2, r18	; 0x02
     ebc:	8a 81       	ldd	r24, Y+2	; 0x02
     ebe:	9b 81       	ldd	r25, Y+3	; 0x03
     ec0:	00 97       	sbiw	r24, 0x00	; 0
     ec2:	31 f0       	breq	.+12     	; 0xed0 <TIMER_Timer0RegValue+0x2e>
     ec4:	2a 81       	ldd	r18, Y+2	; 0x02
     ec6:	3b 81       	ldd	r19, Y+3	; 0x03
     ec8:	21 30       	cpi	r18, 0x01	; 1
     eca:	31 05       	cpc	r19, r1
     ecc:	31 f0       	breq	.+12     	; 0xeda <TIMER_Timer0RegValue+0x38>
     ece:	09 c0       	rjmp	.+18     	; 0xee2 <TIMER_Timer0RegValue+0x40>
		case 0:
			//Set Preload Value
			TCNT0=Copy_Preload_Compare_Value;
     ed0:	e2 e5       	ldi	r30, 0x52	; 82
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	89 81       	ldd	r24, Y+1	; 0x01
     ed6:	80 83       	st	Z, r24
     ed8:	04 c0       	rjmp	.+8      	; 0xee2 <TIMER_Timer0RegValue+0x40>
			break;
		case 1:
			//set Compare Match Value
			OCR0 = Copy_Preload_Compare_Value;
     eda:	ec e5       	ldi	r30, 0x5C	; 92
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	89 81       	ldd	r24, Y+1	; 0x01
     ee0:	80 83       	st	Z, r24
	}
}
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	cf 91       	pop	r28
     eea:	df 91       	pop	r29
     eec:	08 95       	ret

00000eee <TIMER_VoidTimer0ISR_Normal>:



void TIMER_VoidTimer0ISR_Normal(void(*ISR11_PTR)(void)){
     eee:	df 93       	push	r29
     ef0:	cf 93       	push	r28
     ef2:	00 d0       	rcall	.+0      	; 0xef4 <TIMER_VoidTimer0ISR_Normal+0x6>
     ef4:	cd b7       	in	r28, 0x3d	; 61
     ef6:	de b7       	in	r29, 0x3e	; 62
     ef8:	9a 83       	std	Y+2, r25	; 0x02
     efa:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_Normal_ISR_PTR = ISR11_PTR;
     efc:	89 81       	ldd	r24, Y+1	; 0x01
     efe:	9a 81       	ldd	r25, Y+2	; 0x02
     f00:	90 93 99 01 	sts	0x0199, r25
     f04:	80 93 98 01 	sts	0x0198, r24
}
     f08:	0f 90       	pop	r0
     f0a:	0f 90       	pop	r0
     f0c:	cf 91       	pop	r28
     f0e:	df 91       	pop	r29
     f10:	08 95       	ret

00000f12 <TIMER_VoidTimer0ISR_CTC>:



void TIMER_VoidTimer0ISR_CTC(void(*ISR10_PTR)(void)){
     f12:	df 93       	push	r29
     f14:	cf 93       	push	r28
     f16:	00 d0       	rcall	.+0      	; 0xf18 <TIMER_VoidTimer0ISR_CTC+0x6>
     f18:	cd b7       	in	r28, 0x3d	; 61
     f1a:	de b7       	in	r29, 0x3e	; 62
     f1c:	9a 83       	std	Y+2, r25	; 0x02
     f1e:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_CTC_ISR_PTR = ISR10_PTR;
     f20:	89 81       	ldd	r24, Y+1	; 0x01
     f22:	9a 81       	ldd	r25, Y+2	; 0x02
     f24:	90 93 9b 01 	sts	0x019B, r25
     f28:	80 93 9a 01 	sts	0x019A, r24
}
     f2c:	0f 90       	pop	r0
     f2e:	0f 90       	pop	r0
     f30:	cf 91       	pop	r28
     f32:	df 91       	pop	r29
     f34:	08 95       	ret

00000f36 <TIMER_delay_ms>:



void TIMER_delay_ms(u32 Copy_delayTime){
     f36:	df 93       	push	r29
     f38:	cf 93       	push	r28
     f3a:	cd b7       	in	r28, 0x3d	; 61
     f3c:	de b7       	in	r29, 0x3e	; 62
     f3e:	2a 97       	sbiw	r28, 0x0a	; 10
     f40:	0f b6       	in	r0, 0x3f	; 63
     f42:	f8 94       	cli
     f44:	de bf       	out	0x3e, r29	; 62
     f46:	0f be       	out	0x3f, r0	; 63
     f48:	cd bf       	out	0x3d, r28	; 61
     f4a:	6f 83       	std	Y+7, r22	; 0x07
     f4c:	78 87       	std	Y+8, r23	; 0x08
     f4e:	89 87       	std	Y+9, r24	; 0x09
     f50:	9a 87       	std	Y+10, r25	; 0x0a
	for(u32 count2=0;count2<Copy_delayTime;count2++){
     f52:	1b 82       	std	Y+3, r1	; 0x03
     f54:	1c 82       	std	Y+4, r1	; 0x04
     f56:	1d 82       	std	Y+5, r1	; 0x05
     f58:	1e 82       	std	Y+6, r1	; 0x06
     f5a:	19 c0       	rjmp	.+50     	; 0xf8e <TIMER_delay_ms+0x58>
	for(u16 count1=0;count1<350;count1++){}
     f5c:	1a 82       	std	Y+2, r1	; 0x02
     f5e:	19 82       	std	Y+1, r1	; 0x01
     f60:	05 c0       	rjmp	.+10     	; 0xf6c <TIMER_delay_ms+0x36>
     f62:	89 81       	ldd	r24, Y+1	; 0x01
     f64:	9a 81       	ldd	r25, Y+2	; 0x02
     f66:	01 96       	adiw	r24, 0x01	; 1
     f68:	9a 83       	std	Y+2, r25	; 0x02
     f6a:	89 83       	std	Y+1, r24	; 0x01
     f6c:	89 81       	ldd	r24, Y+1	; 0x01
     f6e:	9a 81       	ldd	r25, Y+2	; 0x02
     f70:	21 e0       	ldi	r18, 0x01	; 1
     f72:	8e 35       	cpi	r24, 0x5E	; 94
     f74:	92 07       	cpc	r25, r18
     f76:	a8 f3       	brcs	.-22     	; 0xf62 <TIMER_delay_ms+0x2c>
}



void TIMER_delay_ms(u32 Copy_delayTime){
	for(u32 count2=0;count2<Copy_delayTime;count2++){
     f78:	8b 81       	ldd	r24, Y+3	; 0x03
     f7a:	9c 81       	ldd	r25, Y+4	; 0x04
     f7c:	ad 81       	ldd	r26, Y+5	; 0x05
     f7e:	be 81       	ldd	r27, Y+6	; 0x06
     f80:	01 96       	adiw	r24, 0x01	; 1
     f82:	a1 1d       	adc	r26, r1
     f84:	b1 1d       	adc	r27, r1
     f86:	8b 83       	std	Y+3, r24	; 0x03
     f88:	9c 83       	std	Y+4, r25	; 0x04
     f8a:	ad 83       	std	Y+5, r26	; 0x05
     f8c:	be 83       	std	Y+6, r27	; 0x06
     f8e:	2b 81       	ldd	r18, Y+3	; 0x03
     f90:	3c 81       	ldd	r19, Y+4	; 0x04
     f92:	4d 81       	ldd	r20, Y+5	; 0x05
     f94:	5e 81       	ldd	r21, Y+6	; 0x06
     f96:	8f 81       	ldd	r24, Y+7	; 0x07
     f98:	98 85       	ldd	r25, Y+8	; 0x08
     f9a:	a9 85       	ldd	r26, Y+9	; 0x09
     f9c:	ba 85       	ldd	r27, Y+10	; 0x0a
     f9e:	28 17       	cp	r18, r24
     fa0:	39 07       	cpc	r19, r25
     fa2:	4a 07       	cpc	r20, r26
     fa4:	5b 07       	cpc	r21, r27
     fa6:	d0 f2       	brcs	.-76     	; 0xf5c <TIMER_delay_ms+0x26>
	for(u16 count1=0;count1<350;count1++){}
	}
}
     fa8:	2a 96       	adiw	r28, 0x0a	; 10
     faa:	0f b6       	in	r0, 0x3f	; 63
     fac:	f8 94       	cli
     fae:	de bf       	out	0x3e, r29	; 62
     fb0:	0f be       	out	0x3f, r0	; 63
     fb2:	cd bf       	out	0x3d, r28	; 61
     fb4:	cf 91       	pop	r28
     fb6:	df 91       	pop	r29
     fb8:	08 95       	ret

00000fba <TIMER_VoidTimer2FastPWM>:

void TIMER_VoidTimer2FastPWM(void){
     fba:	df 93       	push	r29
     fbc:	cf 93       	push	r28
     fbe:	cd b7       	in	r28, 0x3d	; 61
     fc0:	de b7       	in	r29, 0x3e	; 62
	//Set Fast PWM Mode
	Set_Bit(TCCR2,6);
     fc2:	a5 e4       	ldi	r26, 0x45	; 69
     fc4:	b0 e0       	ldi	r27, 0x00	; 0
     fc6:	e5 e4       	ldi	r30, 0x45	; 69
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 81       	ld	r24, Z
     fcc:	80 64       	ori	r24, 0x40	; 64
     fce:	8c 93       	st	X, r24
	Set_Bit(TCCR2,3);
     fd0:	a5 e4       	ldi	r26, 0x45	; 69
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	e5 e4       	ldi	r30, 0x45	; 69
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	88 60       	ori	r24, 0x08	; 8
     fdc:	8c 93       	st	X, r24

	//Set Prescaller ==>8
	CLR_Bit(TCCR2,2);
     fde:	a5 e4       	ldi	r26, 0x45	; 69
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
     fe2:	e5 e4       	ldi	r30, 0x45	; 69
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	8b 7f       	andi	r24, 0xFB	; 251
     fea:	8c 93       	st	X, r24
	Set_Bit(TCCR2,1);
     fec:	a5 e4       	ldi	r26, 0x45	; 69
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	e5 e4       	ldi	r30, 0x45	; 69
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z
     ff6:	82 60       	ori	r24, 0x02	; 2
     ff8:	8c 93       	st	X, r24
	CLR_Bit(TCCR2,0);
     ffa:	a5 e4       	ldi	r26, 0x45	; 69
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	e5 e4       	ldi	r30, 0x45	; 69
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	8e 7f       	andi	r24, 0xFE	; 254
    1006:	8c 93       	st	X, r24

	//Normal(Non-Inverted) Mode  Clear on Compare and Set at top
	//Normal Increasing Compare Match, Increase Duty Cycle (Increase Ton)
	Set_Bit(TCCR2,5);
    1008:	a5 e4       	ldi	r26, 0x45	; 69
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	e5 e4       	ldi	r30, 0x45	; 69
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	80 62       	ori	r24, 0x20	; 32
    1014:	8c 93       	st	X, r24
	CLR_Bit(TCCR2,4);
    1016:	a5 e4       	ldi	r26, 0x45	; 69
    1018:	b0 e0       	ldi	r27, 0x00	; 0
    101a:	e5 e4       	ldi	r30, 0x45	; 69
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	8f 7e       	andi	r24, 0xEF	; 239
    1022:	8c 93       	st	X, r24

}
    1024:	cf 91       	pop	r28
    1026:	df 91       	pop	r29
    1028:	08 95       	ret

0000102a <TIMER_VoidTimer2FastPWMCompareValue>:


void TIMER_VoidTimer2FastPWMCompareValue(u8 Copy_u8CompareMatchValue){
    102a:	df 93       	push	r29
    102c:	cf 93       	push	r28
    102e:	0f 92       	push	r0
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
    1034:	89 83       	std	Y+1, r24	; 0x01
	OCR2=Copy_u8CompareMatchValue;
    1036:	e3 e4       	ldi	r30, 0x43	; 67
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	89 81       	ldd	r24, Y+1	; 0x01
    103c:	80 83       	st	Z, r24
}
    103e:	0f 90       	pop	r0
    1040:	cf 91       	pop	r28
    1042:	df 91       	pop	r29
    1044:	08 95       	ret

00001046 <TIMER_VoidTimer1Init>:


void TIMER_VoidTimer1Init(u8 Copy_Mode, u8 Copy_Prescaller){
    1046:	df 93       	push	r29
    1048:	cf 93       	push	r28
    104a:	00 d0       	rcall	.+0      	; 0x104c <TIMER_VoidTimer1Init+0x6>
    104c:	00 d0       	rcall	.+0      	; 0x104e <TIMER_VoidTimer1Init+0x8>
    104e:	0f 92       	push	r0
    1050:	cd b7       	in	r28, 0x3d	; 61
    1052:	de b7       	in	r29, 0x3e	; 62
    1054:	8a 83       	std	Y+2, r24	; 0x02
    1056:	6b 83       	std	Y+3, r22	; 0x03
	//Set Prescaller Value
	for(u8 i=0;i<3;i++){
    1058:	19 82       	std	Y+1, r1	; 0x01
    105a:	39 c0       	rjmp	.+114    	; 0x10ce <TIMER_VoidTimer1Init+0x88>
		if((Copy_Prescaller%10)==1)
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	9a e0       	ldi	r25, 0x0A	; 10
    1060:	69 2f       	mov	r22, r25
    1062:	0e 94 ae 13 	call	0x275c	; 0x275c <__udivmodqi4>
    1066:	89 2f       	mov	r24, r25
    1068:	81 30       	cpi	r24, 0x01	; 1
    106a:	a1 f4       	brne	.+40     	; 0x1094 <TIMER_VoidTimer1Init+0x4e>
			Set_Bit(TCCR1B,i);
    106c:	ae e4       	ldi	r26, 0x4E	; 78
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	ee e4       	ldi	r30, 0x4E	; 78
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	48 2f       	mov	r20, r24
    1078:	89 81       	ldd	r24, Y+1	; 0x01
    107a:	28 2f       	mov	r18, r24
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	02 2e       	mov	r0, r18
    1084:	02 c0       	rjmp	.+4      	; 0x108a <TIMER_VoidTimer1Init+0x44>
    1086:	88 0f       	add	r24, r24
    1088:	99 1f       	adc	r25, r25
    108a:	0a 94       	dec	r0
    108c:	e2 f7       	brpl	.-8      	; 0x1086 <TIMER_VoidTimer1Init+0x40>
    108e:	84 2b       	or	r24, r20
    1090:	8c 93       	st	X, r24
    1092:	14 c0       	rjmp	.+40     	; 0x10bc <TIMER_VoidTimer1Init+0x76>
		else
			CLR_Bit(TCCR1B,i);
    1094:	ae e4       	ldi	r26, 0x4E	; 78
    1096:	b0 e0       	ldi	r27, 0x00	; 0
    1098:	ee e4       	ldi	r30, 0x4E	; 78
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	80 81       	ld	r24, Z
    109e:	48 2f       	mov	r20, r24
    10a0:	89 81       	ldd	r24, Y+1	; 0x01
    10a2:	28 2f       	mov	r18, r24
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	02 2e       	mov	r0, r18
    10ac:	02 c0       	rjmp	.+4      	; 0x10b2 <TIMER_VoidTimer1Init+0x6c>
    10ae:	88 0f       	add	r24, r24
    10b0:	99 1f       	adc	r25, r25
    10b2:	0a 94       	dec	r0
    10b4:	e2 f7       	brpl	.-8      	; 0x10ae <TIMER_VoidTimer1Init+0x68>
    10b6:	80 95       	com	r24
    10b8:	84 23       	and	r24, r20
    10ba:	8c 93       	st	X, r24
		Copy_Prescaller = Copy_Prescaller /10;
    10bc:	8b 81       	ldd	r24, Y+3	; 0x03
    10be:	9a e0       	ldi	r25, 0x0A	; 10
    10c0:	69 2f       	mov	r22, r25
    10c2:	0e 94 ae 13 	call	0x275c	; 0x275c <__udivmodqi4>
    10c6:	8b 83       	std	Y+3, r24	; 0x03
}


void TIMER_VoidTimer1Init(u8 Copy_Mode, u8 Copy_Prescaller){
	//Set Prescaller Value
	for(u8 i=0;i<3;i++){
    10c8:	89 81       	ldd	r24, Y+1	; 0x01
    10ca:	8f 5f       	subi	r24, 0xFF	; 255
    10cc:	89 83       	std	Y+1, r24	; 0x01
    10ce:	89 81       	ldd	r24, Y+1	; 0x01
    10d0:	83 30       	cpi	r24, 0x03	; 3
    10d2:	20 f2       	brcs	.-120    	; 0x105c <TIMER_VoidTimer1Init+0x16>
			Set_Bit(TCCR1B,i);
		else
			CLR_Bit(TCCR1B,i);
		Copy_Prescaller = Copy_Prescaller /10;
	}
	switch(Copy_Mode){
    10d4:	8a 81       	ldd	r24, Y+2	; 0x02
    10d6:	28 2f       	mov	r18, r24
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	3d 83       	std	Y+5, r19	; 0x05
    10dc:	2c 83       	std	Y+4, r18	; 0x04
    10de:	8c 81       	ldd	r24, Y+4	; 0x04
    10e0:	9d 81       	ldd	r25, Y+5	; 0x05
    10e2:	00 97       	sbiw	r24, 0x00	; 0
    10e4:	31 f0       	breq	.+12     	; 0x10f2 <TIMER_VoidTimer1Init+0xac>
    10e6:	2c 81       	ldd	r18, Y+4	; 0x04
    10e8:	3d 81       	ldd	r19, Y+5	; 0x05
    10ea:	22 30       	cpi	r18, 0x02	; 2
    10ec:	31 05       	cpc	r19, r1
    10ee:	f1 f0       	breq	.+60     	; 0x112c <TIMER_VoidTimer1Init+0xe6>
    10f0:	47 c0       	rjmp	.+142    	; 0x1180 <TIMER_VoidTimer1Init+0x13a>
		case NORMAL:
			CLR_Bit(TCCR1A,0);
    10f2:	af e4       	ldi	r26, 0x4F	; 79
    10f4:	b0 e0       	ldi	r27, 0x00	; 0
    10f6:	ef e4       	ldi	r30, 0x4F	; 79
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	80 81       	ld	r24, Z
    10fc:	8e 7f       	andi	r24, 0xFE	; 254
    10fe:	8c 93       	st	X, r24
			CLR_Bit(TCCR1A,1);
    1100:	af e4       	ldi	r26, 0x4F	; 79
    1102:	b0 e0       	ldi	r27, 0x00	; 0
    1104:	ef e4       	ldi	r30, 0x4F	; 79
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	8d 7f       	andi	r24, 0xFD	; 253
    110c:	8c 93       	st	X, r24
			CLR_Bit(TCCR1B,3);
    110e:	ae e4       	ldi	r26, 0x4E	; 78
    1110:	b0 e0       	ldi	r27, 0x00	; 0
    1112:	ee e4       	ldi	r30, 0x4E	; 78
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	80 81       	ld	r24, Z
    1118:	87 7f       	andi	r24, 0xF7	; 247
    111a:	8c 93       	st	X, r24
			CLR_Bit(TCCR1B,4);
    111c:	ae e4       	ldi	r26, 0x4E	; 78
    111e:	b0 e0       	ldi	r27, 0x00	; 0
    1120:	ee e4       	ldi	r30, 0x4E	; 78
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	8f 7e       	andi	r24, 0xEF	; 239
    1128:	8c 93       	st	X, r24
    112a:	2a c0       	rjmp	.+84     	; 0x1180 <TIMER_VoidTimer1Init+0x13a>
			break;
		case PWM:
			//Set PWM Mode Clear on compare Set at top
			CLR_Bit(TCCR1A,6);
    112c:	af e4       	ldi	r26, 0x4F	; 79
    112e:	b0 e0       	ldi	r27, 0x00	; 0
    1130:	ef e4       	ldi	r30, 0x4F	; 79
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	8f 7b       	andi	r24, 0xBF	; 191
    1138:	8c 93       	st	X, r24
			Set_Bit(TCCR1A,7);
    113a:	af e4       	ldi	r26, 0x4F	; 79
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	ef e4       	ldi	r30, 0x4F	; 79
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	80 68       	ori	r24, 0x80	; 128
    1146:	8c 93       	st	X, r24

			//Set Mode 14
			CLR_Bit(TCCR1A,0);
    1148:	af e4       	ldi	r26, 0x4F	; 79
    114a:	b0 e0       	ldi	r27, 0x00	; 0
    114c:	ef e4       	ldi	r30, 0x4F	; 79
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	8e 7f       	andi	r24, 0xFE	; 254
    1154:	8c 93       	st	X, r24
			Set_Bit(TCCR1A,1);
    1156:	af e4       	ldi	r26, 0x4F	; 79
    1158:	b0 e0       	ldi	r27, 0x00	; 0
    115a:	ef e4       	ldi	r30, 0x4F	; 79
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
    1160:	82 60       	ori	r24, 0x02	; 2
    1162:	8c 93       	st	X, r24
			Set_Bit(TCCR1B,3);
    1164:	ae e4       	ldi	r26, 0x4E	; 78
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	ee e4       	ldi	r30, 0x4E	; 78
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	88 60       	ori	r24, 0x08	; 8
    1170:	8c 93       	st	X, r24
			Set_Bit(TCCR1B,4);
    1172:	ae e4       	ldi	r26, 0x4E	; 78
    1174:	b0 e0       	ldi	r27, 0x00	; 0
    1176:	ee e4       	ldi	r30, 0x4E	; 78
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 81       	ld	r24, Z
    117c:	80 61       	ori	r24, 0x10	; 16
    117e:	8c 93       	st	X, r24
			break;
	}

}
    1180:	0f 90       	pop	r0
    1182:	0f 90       	pop	r0
    1184:	0f 90       	pop	r0
    1186:	0f 90       	pop	r0
    1188:	0f 90       	pop	r0
    118a:	cf 91       	pop	r28
    118c:	df 91       	pop	r29
    118e:	08 95       	ret

00001190 <TIMER_VoidSetOverFlow>:

void TIMER_VoidSetOverFlow(u16 Copy_u16OverFlow){
    1190:	df 93       	push	r29
    1192:	cf 93       	push	r28
    1194:	00 d0       	rcall	.+0      	; 0x1196 <TIMER_VoidSetOverFlow+0x6>
    1196:	cd b7       	in	r28, 0x3d	; 61
    1198:	de b7       	in	r29, 0x3e	; 62
    119a:	9a 83       	std	Y+2, r25	; 0x02
    119c:	89 83       	std	Y+1, r24	; 0x01
	ICR1 = Copy_u16OverFlow;
    119e:	e6 e4       	ldi	r30, 0x46	; 70
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	89 81       	ldd	r24, Y+1	; 0x01
    11a4:	9a 81       	ldd	r25, Y+2	; 0x02
    11a6:	91 83       	std	Z+1, r25	; 0x01
    11a8:	80 83       	st	Z, r24
}
    11aa:	0f 90       	pop	r0
    11ac:	0f 90       	pop	r0
    11ae:	cf 91       	pop	r28
    11b0:	df 91       	pop	r29
    11b2:	08 95       	ret

000011b4 <TIMER_VoidTimer1ChannelASetCompareValue>:

void TIMER_VoidTimer1ChannelASetCompareValue(u16 Copy_u16CompareValue){
    11b4:	df 93       	push	r29
    11b6:	cf 93       	push	r28
    11b8:	00 d0       	rcall	.+0      	; 0x11ba <TIMER_VoidTimer1ChannelASetCompareValue+0x6>
    11ba:	cd b7       	in	r28, 0x3d	; 61
    11bc:	de b7       	in	r29, 0x3e	; 62
    11be:	9a 83       	std	Y+2, r25	; 0x02
    11c0:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u16CompareValue;
    11c2:	ea e4       	ldi	r30, 0x4A	; 74
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	89 81       	ldd	r24, Y+1	; 0x01
    11c8:	9a 81       	ldd	r25, Y+2	; 0x02
    11ca:	91 83       	std	Z+1, r25	; 0x01
    11cc:	80 83       	st	Z, r24
}
    11ce:	0f 90       	pop	r0
    11d0:	0f 90       	pop	r0
    11d2:	cf 91       	pop	r28
    11d4:	df 91       	pop	r29
    11d6:	08 95       	ret

000011d8 <TIMER_VoidTimer1SetPreloadValue>:

void TIMER_VoidTimer1SetPreloadValue(u16 Copy_u16Value){
    11d8:	df 93       	push	r29
    11da:	cf 93       	push	r28
    11dc:	00 d0       	rcall	.+0      	; 0x11de <TIMER_VoidTimer1SetPreloadValue+0x6>
    11de:	cd b7       	in	r28, 0x3d	; 61
    11e0:	de b7       	in	r29, 0x3e	; 62
    11e2:	9a 83       	std	Y+2, r25	; 0x02
    11e4:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Copy_u16Value;
    11e6:	ec e4       	ldi	r30, 0x4C	; 76
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	89 81       	ldd	r24, Y+1	; 0x01
    11ec:	9a 81       	ldd	r25, Y+2	; 0x02
    11ee:	91 83       	std	Z+1, r25	; 0x01
    11f0:	80 83       	st	Z, r24
}
    11f2:	0f 90       	pop	r0
    11f4:	0f 90       	pop	r0
    11f6:	cf 91       	pop	r28
    11f8:	df 91       	pop	r29
    11fa:	08 95       	ret

000011fc <Timer_u16Timer1GetTimerValue>:

u16 Timer_u16Timer1GetTimerValue(void){
    11fc:	df 93       	push	r29
    11fe:	cf 93       	push	r28
    1200:	cd b7       	in	r28, 0x3d	; 61
    1202:	de b7       	in	r29, 0x3e	; 62
	return TCNT1;
    1204:	ec e4       	ldi	r30, 0x4C	; 76
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	91 81       	ldd	r25, Z+1	; 0x01
}
    120c:	cf 91       	pop	r28
    120e:	df 91       	pop	r29
    1210:	08 95       	ret

00001212 <ICU_VoidSetSenseControl>:

void ICU_VoidSetSenseControl(u8 Copy_u8SenseControl){
    1212:	df 93       	push	r29
    1214:	cf 93       	push	r28
    1216:	00 d0       	rcall	.+0      	; 0x1218 <ICU_VoidSetSenseControl+0x6>
    1218:	0f 92       	push	r0
    121a:	cd b7       	in	r28, 0x3d	; 61
    121c:	de b7       	in	r29, 0x3e	; 62
    121e:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8SenseControl){
    1220:	89 81       	ldd	r24, Y+1	; 0x01
    1222:	28 2f       	mov	r18, r24
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	3b 83       	std	Y+3, r19	; 0x03
    1228:	2a 83       	std	Y+2, r18	; 0x02
    122a:	8a 81       	ldd	r24, Y+2	; 0x02
    122c:	9b 81       	ldd	r25, Y+3	; 0x03
    122e:	84 30       	cpi	r24, 0x04	; 4
    1230:	91 05       	cpc	r25, r1
    1232:	31 f0       	breq	.+12     	; 0x1240 <ICU_VoidSetSenseControl+0x2e>
    1234:	2a 81       	ldd	r18, Y+2	; 0x02
    1236:	3b 81       	ldd	r19, Y+3	; 0x03
    1238:	25 30       	cpi	r18, 0x05	; 5
    123a:	31 05       	cpc	r19, r1
    123c:	49 f0       	breq	.+18     	; 0x1250 <ICU_VoidSetSenseControl+0x3e>
    123e:	0f c0       	rjmp	.+30     	; 0x125e <ICU_VoidSetSenseControl+0x4c>
		case RISING_EDGE:
			Set_Bit(TCCR1B,6);
    1240:	ae e4       	ldi	r26, 0x4E	; 78
    1242:	b0 e0       	ldi	r27, 0x00	; 0
    1244:	ee e4       	ldi	r30, 0x4E	; 78
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	80 81       	ld	r24, Z
    124a:	80 64       	ori	r24, 0x40	; 64
    124c:	8c 93       	st	X, r24
    124e:	07 c0       	rjmp	.+14     	; 0x125e <ICU_VoidSetSenseControl+0x4c>
			break;
		case FALLING_EDGE:
			CLR_Bit(TCCR1B,6);
    1250:	ae e4       	ldi	r26, 0x4E	; 78
    1252:	b0 e0       	ldi	r27, 0x00	; 0
    1254:	ee e4       	ldi	r30, 0x4E	; 78
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	80 81       	ld	r24, Z
    125a:	8f 7b       	andi	r24, 0xBF	; 191
    125c:	8c 93       	st	X, r24
			break;
	}
}
    125e:	0f 90       	pop	r0
    1260:	0f 90       	pop	r0
    1262:	0f 90       	pop	r0
    1264:	cf 91       	pop	r28
    1266:	df 91       	pop	r29
    1268:	08 95       	ret

0000126a <ICU_VoidInterruptControl>:

void ICU_VoidInterruptControl(u8 Copy_u8InterruptState){
    126a:	df 93       	push	r29
    126c:	cf 93       	push	r28
    126e:	00 d0       	rcall	.+0      	; 0x1270 <ICU_VoidInterruptControl+0x6>
    1270:	0f 92       	push	r0
    1272:	cd b7       	in	r28, 0x3d	; 61
    1274:	de b7       	in	r29, 0x3e	; 62
    1276:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8InterruptState){
    1278:	89 81       	ldd	r24, Y+1	; 0x01
    127a:	28 2f       	mov	r18, r24
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	3b 83       	std	Y+3, r19	; 0x03
    1280:	2a 83       	std	Y+2, r18	; 0x02
    1282:	8a 81       	ldd	r24, Y+2	; 0x02
    1284:	9b 81       	ldd	r25, Y+3	; 0x03
    1286:	82 30       	cpi	r24, 0x02	; 2
    1288:	91 05       	cpc	r25, r1
    128a:	31 f0       	breq	.+12     	; 0x1298 <ICU_VoidInterruptControl+0x2e>
    128c:	2a 81       	ldd	r18, Y+2	; 0x02
    128e:	3b 81       	ldd	r19, Y+3	; 0x03
    1290:	23 30       	cpi	r18, 0x03	; 3
    1292:	31 05       	cpc	r19, r1
    1294:	49 f0       	breq	.+18     	; 0x12a8 <ICU_VoidInterruptControl+0x3e>
    1296:	0f c0       	rjmp	.+30     	; 0x12b6 <ICU_VoidInterruptControl+0x4c>
		case ENABLE:
			Set_Bit(TIMSK,5);
    1298:	a9 e5       	ldi	r26, 0x59	; 89
    129a:	b0 e0       	ldi	r27, 0x00	; 0
    129c:	e9 e5       	ldi	r30, 0x59	; 89
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	80 81       	ld	r24, Z
    12a2:	80 62       	ori	r24, 0x20	; 32
    12a4:	8c 93       	st	X, r24
    12a6:	07 c0       	rjmp	.+14     	; 0x12b6 <ICU_VoidInterruptControl+0x4c>
			break;
		case DISABLE:
			CLR_Bit(TIMSK,5);
    12a8:	a9 e5       	ldi	r26, 0x59	; 89
    12aa:	b0 e0       	ldi	r27, 0x00	; 0
    12ac:	e9 e5       	ldi	r30, 0x59	; 89
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	80 81       	ld	r24, Z
    12b2:	8f 7d       	andi	r24, 0xDF	; 223
    12b4:	8c 93       	st	X, r24
			break;
	}
}
    12b6:	0f 90       	pop	r0
    12b8:	0f 90       	pop	r0
    12ba:	0f 90       	pop	r0
    12bc:	cf 91       	pop	r28
    12be:	df 91       	pop	r29
    12c0:	08 95       	ret

000012c2 <ICU_VoidSetCallBackFunction>:

void ICU_VoidSetCallBackFunction(void(*Copy_PTR_ICUFunction)(void)){
    12c2:	df 93       	push	r29
    12c4:	cf 93       	push	r28
    12c6:	00 d0       	rcall	.+0      	; 0x12c8 <ICU_VoidSetCallBackFunction+0x6>
    12c8:	cd b7       	in	r28, 0x3d	; 61
    12ca:	de b7       	in	r29, 0x3e	; 62
    12cc:	9a 83       	std	Y+2, r25	; 0x02
    12ce:	89 83       	std	Y+1, r24	; 0x01
	GLOBAL_ICU_ISR = Copy_PTR_ICUFunction;
    12d0:	89 81       	ldd	r24, Y+1	; 0x01
    12d2:	9a 81       	ldd	r25, Y+2	; 0x02
    12d4:	90 93 9d 01 	sts	0x019D, r25
    12d8:	80 93 9c 01 	sts	0x019C, r24
}
    12dc:	0f 90       	pop	r0
    12de:	0f 90       	pop	r0
    12e0:	cf 91       	pop	r28
    12e2:	df 91       	pop	r29
    12e4:	08 95       	ret

000012e6 <ICU_u16ReadInputCapture>:

u16 ICU_u16ReadInputCapture(void){
    12e6:	df 93       	push	r29
    12e8:	cf 93       	push	r28
    12ea:	cd b7       	in	r28, 0x3d	; 61
    12ec:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    12ee:	e6 e4       	ldi	r30, 0x46	; 70
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	91 81       	ldd	r25, Z+1	; 0x01
}
    12f6:	cf 91       	pop	r28
    12f8:	df 91       	pop	r29
    12fa:	08 95       	ret

000012fc <__vector_11>:



//Normal ISR
void __vector_11(void) __attribute__((signal));  //minus 1 from Datasheet as it should started from 0 not 1
void __vector_11(void){
    12fc:	1f 92       	push	r1
    12fe:	0f 92       	push	r0
    1300:	0f b6       	in	r0, 0x3f	; 63
    1302:	0f 92       	push	r0
    1304:	11 24       	eor	r1, r1
    1306:	2f 93       	push	r18
    1308:	3f 93       	push	r19
    130a:	4f 93       	push	r20
    130c:	5f 93       	push	r21
    130e:	6f 93       	push	r22
    1310:	7f 93       	push	r23
    1312:	8f 93       	push	r24
    1314:	9f 93       	push	r25
    1316:	af 93       	push	r26
    1318:	bf 93       	push	r27
    131a:	ef 93       	push	r30
    131c:	ff 93       	push	r31
    131e:	df 93       	push	r29
    1320:	cf 93       	push	r28
    1322:	cd b7       	in	r28, 0x3d	; 61
    1324:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_Normal_ISR_PTR!=0x00)
    1326:	80 91 98 01 	lds	r24, 0x0198
    132a:	90 91 99 01 	lds	r25, 0x0199
    132e:	00 97       	sbiw	r24, 0x00	; 0
    1330:	29 f0       	breq	.+10     	; 0x133c <__vector_11+0x40>
		TIMER0_Normal_ISR_PTR();
    1332:	e0 91 98 01 	lds	r30, 0x0198
    1336:	f0 91 99 01 	lds	r31, 0x0199
    133a:	09 95       	icall
}
    133c:	cf 91       	pop	r28
    133e:	df 91       	pop	r29
    1340:	ff 91       	pop	r31
    1342:	ef 91       	pop	r30
    1344:	bf 91       	pop	r27
    1346:	af 91       	pop	r26
    1348:	9f 91       	pop	r25
    134a:	8f 91       	pop	r24
    134c:	7f 91       	pop	r23
    134e:	6f 91       	pop	r22
    1350:	5f 91       	pop	r21
    1352:	4f 91       	pop	r20
    1354:	3f 91       	pop	r19
    1356:	2f 91       	pop	r18
    1358:	0f 90       	pop	r0
    135a:	0f be       	out	0x3f, r0	; 63
    135c:	0f 90       	pop	r0
    135e:	1f 90       	pop	r1
    1360:	18 95       	reti

00001362 <__vector_10>:

//CTC ISR
void __vector_10(void) __attribute__((signal));  //minus 1 from Datasheet as it should started from 0 not 1
void __vector_10(void){
    1362:	1f 92       	push	r1
    1364:	0f 92       	push	r0
    1366:	0f b6       	in	r0, 0x3f	; 63
    1368:	0f 92       	push	r0
    136a:	11 24       	eor	r1, r1
    136c:	2f 93       	push	r18
    136e:	3f 93       	push	r19
    1370:	4f 93       	push	r20
    1372:	5f 93       	push	r21
    1374:	6f 93       	push	r22
    1376:	7f 93       	push	r23
    1378:	8f 93       	push	r24
    137a:	9f 93       	push	r25
    137c:	af 93       	push	r26
    137e:	bf 93       	push	r27
    1380:	ef 93       	push	r30
    1382:	ff 93       	push	r31
    1384:	df 93       	push	r29
    1386:	cf 93       	push	r28
    1388:	cd b7       	in	r28, 0x3d	; 61
    138a:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_CTC_ISR_PTR!=0x00)
    138c:	80 91 9a 01 	lds	r24, 0x019A
    1390:	90 91 9b 01 	lds	r25, 0x019B
    1394:	00 97       	sbiw	r24, 0x00	; 0
    1396:	29 f0       	breq	.+10     	; 0x13a2 <__vector_10+0x40>
		TIMER0_CTC_ISR_PTR();
    1398:	e0 91 9a 01 	lds	r30, 0x019A
    139c:	f0 91 9b 01 	lds	r31, 0x019B
    13a0:	09 95       	icall

}
    13a2:	cf 91       	pop	r28
    13a4:	df 91       	pop	r29
    13a6:	ff 91       	pop	r31
    13a8:	ef 91       	pop	r30
    13aa:	bf 91       	pop	r27
    13ac:	af 91       	pop	r26
    13ae:	9f 91       	pop	r25
    13b0:	8f 91       	pop	r24
    13b2:	7f 91       	pop	r23
    13b4:	6f 91       	pop	r22
    13b6:	5f 91       	pop	r21
    13b8:	4f 91       	pop	r20
    13ba:	3f 91       	pop	r19
    13bc:	2f 91       	pop	r18
    13be:	0f 90       	pop	r0
    13c0:	0f be       	out	0x3f, r0	; 63
    13c2:	0f 90       	pop	r0
    13c4:	1f 90       	pop	r1
    13c6:	18 95       	reti

000013c8 <__vector_6>:

//ICU
void __vector_6 (void) __attribute__((signal));
void __vector_6 (void){
    13c8:	1f 92       	push	r1
    13ca:	0f 92       	push	r0
    13cc:	0f b6       	in	r0, 0x3f	; 63
    13ce:	0f 92       	push	r0
    13d0:	11 24       	eor	r1, r1
    13d2:	2f 93       	push	r18
    13d4:	3f 93       	push	r19
    13d6:	4f 93       	push	r20
    13d8:	5f 93       	push	r21
    13da:	6f 93       	push	r22
    13dc:	7f 93       	push	r23
    13de:	8f 93       	push	r24
    13e0:	9f 93       	push	r25
    13e2:	af 93       	push	r26
    13e4:	bf 93       	push	r27
    13e6:	ef 93       	push	r30
    13e8:	ff 93       	push	r31
    13ea:	df 93       	push	r29
    13ec:	cf 93       	push	r28
    13ee:	cd b7       	in	r28, 0x3d	; 61
    13f0:	de b7       	in	r29, 0x3e	; 62
	if(GLOBAL_ICU_ISR!=0x00)
    13f2:	80 91 9c 01 	lds	r24, 0x019C
    13f6:	90 91 9d 01 	lds	r25, 0x019D
    13fa:	00 97       	sbiw	r24, 0x00	; 0
    13fc:	29 f0       	breq	.+10     	; 0x1408 <__vector_6+0x40>
		GLOBAL_ICU_ISR();
    13fe:	e0 91 9c 01 	lds	r30, 0x019C
    1402:	f0 91 9d 01 	lds	r31, 0x019D
    1406:	09 95       	icall
}
    1408:	cf 91       	pop	r28
    140a:	df 91       	pop	r29
    140c:	ff 91       	pop	r31
    140e:	ef 91       	pop	r30
    1410:	bf 91       	pop	r27
    1412:	af 91       	pop	r26
    1414:	9f 91       	pop	r25
    1416:	8f 91       	pop	r24
    1418:	7f 91       	pop	r23
    141a:	6f 91       	pop	r22
    141c:	5f 91       	pop	r21
    141e:	4f 91       	pop	r20
    1420:	3f 91       	pop	r19
    1422:	2f 91       	pop	r18
    1424:	0f 90       	pop	r0
    1426:	0f be       	out	0x3f, r0	; 63
    1428:	0f 90       	pop	r0
    142a:	1f 90       	pop	r1
    142c:	18 95       	reti

0000142e <GIE_voidEnableGlobalInterrupt>:
#include<avr/io.h>
#include"../../LIB/BIT_MATH.h"

#include"GIE_Interface.h"

void GIE_voidEnableGlobalInterrupt(void){
    142e:	df 93       	push	r29
    1430:	cf 93       	push	r28
    1432:	cd b7       	in	r28, 0x3d	; 61
    1434:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(SREG,7);
    1436:	af e5       	ldi	r26, 0x5F	; 95
    1438:	b0 e0       	ldi	r27, 0x00	; 0
    143a:	ef e5       	ldi	r30, 0x5F	; 95
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	80 81       	ld	r24, Z
    1440:	80 68       	ori	r24, 0x80	; 128
    1442:	8c 93       	st	X, r24
}
    1444:	cf 91       	pop	r28
    1446:	df 91       	pop	r29
    1448:	08 95       	ret

0000144a <GIE_voidDissableGlobalInterrupt>:
void GIE_voidDissableGlobalInterrupt(void){
    144a:	df 93       	push	r29
    144c:	cf 93       	push	r28
    144e:	cd b7       	in	r28, 0x3d	; 61
    1450:	de b7       	in	r29, 0x3e	; 62
	CLR_Bit(SREG,7);
    1452:	af e5       	ldi	r26, 0x5F	; 95
    1454:	b0 e0       	ldi	r27, 0x00	; 0
    1456:	ef e5       	ldi	r30, 0x5F	; 95
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	8f 77       	andi	r24, 0x7F	; 127
    145e:	8c 93       	st	X, r24
}
    1460:	cf 91       	pop	r28
    1462:	df 91       	pop	r29
    1464:	08 95       	ret

00001466 <EXTI_VoidInit>:
#include"EXTI_Interface.h"

void (*global_PTRINT0NotificationFunction)(void)=0x00;
void (*global_PTRINT1NotificationFunction)(void)=0x00;

void EXTI_VoidInit(u8 INT_Number, u8 Mode){
    1466:	df 93       	push	r29
    1468:	cf 93       	push	r28
    146a:	cd b7       	in	r28, 0x3d	; 61
    146c:	de b7       	in	r29, 0x3e	; 62
    146e:	28 97       	sbiw	r28, 0x08	; 8
    1470:	0f b6       	in	r0, 0x3f	; 63
    1472:	f8 94       	cli
    1474:	de bf       	out	0x3e, r29	; 62
    1476:	0f be       	out	0x3f, r0	; 63
    1478:	cd bf       	out	0x3d, r28	; 61
    147a:	89 83       	std	Y+1, r24	; 0x01
    147c:	6a 83       	std	Y+2, r22	; 0x02
	switch(INT_Number){
    147e:	89 81       	ldd	r24, Y+1	; 0x01
    1480:	28 2f       	mov	r18, r24
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	38 87       	std	Y+8, r19	; 0x08
    1486:	2f 83       	std	Y+7, r18	; 0x07
    1488:	8f 81       	ldd	r24, Y+7	; 0x07
    148a:	98 85       	ldd	r25, Y+8	; 0x08
    148c:	00 97       	sbiw	r24, 0x00	; 0
    148e:	39 f0       	breq	.+14     	; 0x149e <EXTI_VoidInit+0x38>
    1490:	2f 81       	ldd	r18, Y+7	; 0x07
    1492:	38 85       	ldd	r19, Y+8	; 0x08
    1494:	21 30       	cpi	r18, 0x01	; 1
    1496:	31 05       	cpc	r19, r1
    1498:	09 f4       	brne	.+2      	; 0x149c <EXTI_VoidInit+0x36>
    149a:	49 c0       	rjmp	.+146    	; 0x152e <EXTI_VoidInit+0xc8>
    149c:	8f c0       	rjmp	.+286    	; 0x15bc <EXTI_VoidInit+0x156>
		case EXT_INT0:
			switch(Mode){
    149e:	8a 81       	ldd	r24, Y+2	; 0x02
    14a0:	28 2f       	mov	r18, r24
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	3e 83       	std	Y+6, r19	; 0x06
    14a6:	2d 83       	std	Y+5, r18	; 0x05
    14a8:	8d 81       	ldd	r24, Y+5	; 0x05
    14aa:	9e 81       	ldd	r25, Y+6	; 0x06
    14ac:	83 30       	cpi	r24, 0x03	; 3
    14ae:	91 05       	cpc	r25, r1
    14b0:	c9 f0       	breq	.+50     	; 0x14e4 <EXTI_VoidInit+0x7e>
    14b2:	2d 81       	ldd	r18, Y+5	; 0x05
    14b4:	3e 81       	ldd	r19, Y+6	; 0x06
    14b6:	24 30       	cpi	r18, 0x04	; 4
    14b8:	31 05       	cpc	r19, r1
    14ba:	19 f1       	breq	.+70     	; 0x1502 <EXTI_VoidInit+0x9c>
    14bc:	8d 81       	ldd	r24, Y+5	; 0x05
    14be:	9e 81       	ldd	r25, Y+6	; 0x06
    14c0:	82 30       	cpi	r24, 0x02	; 2
    14c2:	91 05       	cpc	r25, r1
    14c4:	61 f5       	brne	.+88     	; 0x151e <EXTI_VoidInit+0xb8>
				case RISING:
					//set interrupt 1 to rising edge
					Set_Bit(MCUCR,0);
    14c6:	a5 e5       	ldi	r26, 0x55	; 85
    14c8:	b0 e0       	ldi	r27, 0x00	; 0
    14ca:	e5 e5       	ldi	r30, 0x55	; 85
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	80 81       	ld	r24, Z
    14d0:	81 60       	ori	r24, 0x01	; 1
    14d2:	8c 93       	st	X, r24
					Set_Bit(MCUCR,1);
    14d4:	a5 e5       	ldi	r26, 0x55	; 85
    14d6:	b0 e0       	ldi	r27, 0x00	; 0
    14d8:	e5 e5       	ldi	r30, 0x55	; 85
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	80 81       	ld	r24, Z
    14de:	82 60       	ori	r24, 0x02	; 2
    14e0:	8c 93       	st	X, r24
    14e2:	1d c0       	rjmp	.+58     	; 0x151e <EXTI_VoidInit+0xb8>
					break;
				case FALLING:
					//INT1--->falling edge
					CLR_Bit(MCUCR,0);
    14e4:	a5 e5       	ldi	r26, 0x55	; 85
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	e5 e5       	ldi	r30, 0x55	; 85
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	8e 7f       	andi	r24, 0xFE	; 254
    14f0:	8c 93       	st	X, r24
					Set_Bit(MCUCR,1);
    14f2:	a5 e5       	ldi	r26, 0x55	; 85
    14f4:	b0 e0       	ldi	r27, 0x00	; 0
    14f6:	e5 e5       	ldi	r30, 0x55	; 85
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	80 81       	ld	r24, Z
    14fc:	82 60       	ori	r24, 0x02	; 2
    14fe:	8c 93       	st	X, r24
    1500:	0e c0       	rjmp	.+28     	; 0x151e <EXTI_VoidInit+0xb8>
					break;
				case LOGICAL_CHANGE:
					//set interrupt 0 to any logical change
					Set_Bit(MCUCR,0);
    1502:	a5 e5       	ldi	r26, 0x55	; 85
    1504:	b0 e0       	ldi	r27, 0x00	; 0
    1506:	e5 e5       	ldi	r30, 0x55	; 85
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	81 60       	ori	r24, 0x01	; 1
    150e:	8c 93       	st	X, r24
					CLR_Bit(MCUCR,1);
    1510:	a5 e5       	ldi	r26, 0x55	; 85
    1512:	b0 e0       	ldi	r27, 0x00	; 0
    1514:	e5 e5       	ldi	r30, 0x55	; 85
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	80 81       	ld	r24, Z
    151a:	8d 7f       	andi	r24, 0xFD	; 253
    151c:	8c 93       	st	X, r24
					break;
			}
			//Enable INT0
			Set_Bit(GICR,6);
    151e:	ab e5       	ldi	r26, 0x5B	; 91
    1520:	b0 e0       	ldi	r27, 0x00	; 0
    1522:	eb e5       	ldi	r30, 0x5B	; 91
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	80 81       	ld	r24, Z
    1528:	80 64       	ori	r24, 0x40	; 64
    152a:	8c 93       	st	X, r24
    152c:	47 c0       	rjmp	.+142    	; 0x15bc <EXTI_VoidInit+0x156>
			break;
		case EXT_INT1:
			switch(Mode){
    152e:	8a 81       	ldd	r24, Y+2	; 0x02
    1530:	28 2f       	mov	r18, r24
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	3c 83       	std	Y+4, r19	; 0x04
    1536:	2b 83       	std	Y+3, r18	; 0x03
    1538:	8b 81       	ldd	r24, Y+3	; 0x03
    153a:	9c 81       	ldd	r25, Y+4	; 0x04
    153c:	83 30       	cpi	r24, 0x03	; 3
    153e:	91 05       	cpc	r25, r1
    1540:	c9 f0       	breq	.+50     	; 0x1574 <EXTI_VoidInit+0x10e>
    1542:	2b 81       	ldd	r18, Y+3	; 0x03
    1544:	3c 81       	ldd	r19, Y+4	; 0x04
    1546:	24 30       	cpi	r18, 0x04	; 4
    1548:	31 05       	cpc	r19, r1
    154a:	19 f1       	breq	.+70     	; 0x1592 <EXTI_VoidInit+0x12c>
    154c:	8b 81       	ldd	r24, Y+3	; 0x03
    154e:	9c 81       	ldd	r25, Y+4	; 0x04
    1550:	82 30       	cpi	r24, 0x02	; 2
    1552:	91 05       	cpc	r25, r1
    1554:	61 f5       	brne	.+88     	; 0x15ae <EXTI_VoidInit+0x148>
				case RISING:
					//set interrupt 1 to rising edge
					Set_Bit(MCUCR,2);
    1556:	a5 e5       	ldi	r26, 0x55	; 85
    1558:	b0 e0       	ldi	r27, 0x00	; 0
    155a:	e5 e5       	ldi	r30, 0x55	; 85
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	80 81       	ld	r24, Z
    1560:	84 60       	ori	r24, 0x04	; 4
    1562:	8c 93       	st	X, r24
					Set_Bit(MCUCR,3);
    1564:	a5 e5       	ldi	r26, 0x55	; 85
    1566:	b0 e0       	ldi	r27, 0x00	; 0
    1568:	e5 e5       	ldi	r30, 0x55	; 85
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	80 81       	ld	r24, Z
    156e:	88 60       	ori	r24, 0x08	; 8
    1570:	8c 93       	st	X, r24
    1572:	1d c0       	rjmp	.+58     	; 0x15ae <EXTI_VoidInit+0x148>
					break;
				case FALLING:
					//falling edge
					CLR_Bit(MCUCR,2);
    1574:	a5 e5       	ldi	r26, 0x55	; 85
    1576:	b0 e0       	ldi	r27, 0x00	; 0
    1578:	e5 e5       	ldi	r30, 0x55	; 85
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	80 81       	ld	r24, Z
    157e:	8b 7f       	andi	r24, 0xFB	; 251
    1580:	8c 93       	st	X, r24
					Set_Bit(MCUCR,3);
    1582:	a5 e5       	ldi	r26, 0x55	; 85
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	e5 e5       	ldi	r30, 0x55	; 85
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	88 60       	ori	r24, 0x08	; 8
    158e:	8c 93       	st	X, r24
    1590:	0e c0       	rjmp	.+28     	; 0x15ae <EXTI_VoidInit+0x148>
					break;
				case LOGICAL_CHANGE:
					//any logical change
					Set_Bit(MCUCR,2);
    1592:	a5 e5       	ldi	r26, 0x55	; 85
    1594:	b0 e0       	ldi	r27, 0x00	; 0
    1596:	e5 e5       	ldi	r30, 0x55	; 85
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	80 81       	ld	r24, Z
    159c:	84 60       	ori	r24, 0x04	; 4
    159e:	8c 93       	st	X, r24
					CLR_Bit(MCUCR,3);
    15a0:	a5 e5       	ldi	r26, 0x55	; 85
    15a2:	b0 e0       	ldi	r27, 0x00	; 0
    15a4:	e5 e5       	ldi	r30, 0x55	; 85
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	80 81       	ld	r24, Z
    15aa:	87 7f       	andi	r24, 0xF7	; 247
    15ac:	8c 93       	st	X, r24
					break;
			}
			//Enable INT1
			Set_Bit(GICR,7);
    15ae:	ab e5       	ldi	r26, 0x5B	; 91
    15b0:	b0 e0       	ldi	r27, 0x00	; 0
    15b2:	eb e5       	ldi	r30, 0x5B	; 91
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	80 81       	ld	r24, Z
    15b8:	80 68       	ori	r24, 0x80	; 128
    15ba:	8c 93       	st	X, r24
			break;
	}
}
    15bc:	28 96       	adiw	r28, 0x08	; 8
    15be:	0f b6       	in	r0, 0x3f	; 63
    15c0:	f8 94       	cli
    15c2:	de bf       	out	0x3e, r29	; 62
    15c4:	0f be       	out	0x3f, r0	; 63
    15c6:	cd bf       	out	0x3d, r28	; 61
    15c8:	cf 91       	pop	r28
    15ca:	df 91       	pop	r29
    15cc:	08 95       	ret

000015ce <EXTI_VoidDisable>:

void EXTI_VoidDisable(u8 INT_Number){
    15ce:	df 93       	push	r29
    15d0:	cf 93       	push	r28
    15d2:	00 d0       	rcall	.+0      	; 0x15d4 <EXTI_VoidDisable+0x6>
    15d4:	0f 92       	push	r0
    15d6:	cd b7       	in	r28, 0x3d	; 61
    15d8:	de b7       	in	r29, 0x3e	; 62
    15da:	89 83       	std	Y+1, r24	; 0x01
	switch(INT_Number){
    15dc:	89 81       	ldd	r24, Y+1	; 0x01
    15de:	28 2f       	mov	r18, r24
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	3b 83       	std	Y+3, r19	; 0x03
    15e4:	2a 83       	std	Y+2, r18	; 0x02
    15e6:	8a 81       	ldd	r24, Y+2	; 0x02
    15e8:	9b 81       	ldd	r25, Y+3	; 0x03
    15ea:	00 97       	sbiw	r24, 0x00	; 0
    15ec:	31 f0       	breq	.+12     	; 0x15fa <EXTI_VoidDisable+0x2c>
    15ee:	2a 81       	ldd	r18, Y+2	; 0x02
    15f0:	3b 81       	ldd	r19, Y+3	; 0x03
    15f2:	21 30       	cpi	r18, 0x01	; 1
    15f4:	31 05       	cpc	r19, r1
    15f6:	49 f0       	breq	.+18     	; 0x160a <EXTI_VoidDisable+0x3c>
    15f8:	0f c0       	rjmp	.+30     	; 0x1618 <EXTI_VoidDisable+0x4a>
		case EXT_INT0:
			//Disable INT0
			CLR_Bit(GICR,6);
    15fa:	ab e5       	ldi	r26, 0x5B	; 91
    15fc:	b0 e0       	ldi	r27, 0x00	; 0
    15fe:	eb e5       	ldi	r30, 0x5B	; 91
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 81       	ld	r24, Z
    1604:	8f 7b       	andi	r24, 0xBF	; 191
    1606:	8c 93       	st	X, r24
    1608:	07 c0       	rjmp	.+14     	; 0x1618 <EXTI_VoidDisable+0x4a>
			break;
		case EXT_INT1:
			//Disable INT1
			CLR_Bit(GICR,7);
    160a:	ab e5       	ldi	r26, 0x5B	; 91
    160c:	b0 e0       	ldi	r27, 0x00	; 0
    160e:	eb e5       	ldi	r30, 0x5B	; 91
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	80 81       	ld	r24, Z
    1614:	8f 77       	andi	r24, 0x7F	; 127
    1616:	8c 93       	st	X, r24
			break;
	}
}
    1618:	0f 90       	pop	r0
    161a:	0f 90       	pop	r0
    161c:	0f 90       	pop	r0
    161e:	cf 91       	pop	r28
    1620:	df 91       	pop	r29
    1622:	08 95       	ret

00001624 <EXTI_VoidINT0CallBack>:

void EXTI_VoidINT0CallBack(void(*NotificationFunction)(void)){
    1624:	df 93       	push	r29
    1626:	cf 93       	push	r28
    1628:	00 d0       	rcall	.+0      	; 0x162a <EXTI_VoidINT0CallBack+0x6>
    162a:	cd b7       	in	r28, 0x3d	; 61
    162c:	de b7       	in	r29, 0x3e	; 62
    162e:	9a 83       	std	Y+2, r25	; 0x02
    1630:	89 83       	std	Y+1, r24	; 0x01
	global_PTRINT0NotificationFunction= NotificationFunction;
    1632:	89 81       	ldd	r24, Y+1	; 0x01
    1634:	9a 81       	ldd	r25, Y+2	; 0x02
    1636:	90 93 a0 01 	sts	0x01A0, r25
    163a:	80 93 9f 01 	sts	0x019F, r24
}
    163e:	0f 90       	pop	r0
    1640:	0f 90       	pop	r0
    1642:	cf 91       	pop	r28
    1644:	df 91       	pop	r29
    1646:	08 95       	ret

00001648 <EXTI_VoidINT1CallBack>:

void EXTI_VoidINT1CallBack(void(*NotificationFunction)(void)){
    1648:	df 93       	push	r29
    164a:	cf 93       	push	r28
    164c:	00 d0       	rcall	.+0      	; 0x164e <EXTI_VoidINT1CallBack+0x6>
    164e:	cd b7       	in	r28, 0x3d	; 61
    1650:	de b7       	in	r29, 0x3e	; 62
    1652:	9a 83       	std	Y+2, r25	; 0x02
    1654:	89 83       	std	Y+1, r24	; 0x01
	global_PTRINT1NotificationFunction= NotificationFunction;
    1656:	89 81       	ldd	r24, Y+1	; 0x01
    1658:	9a 81       	ldd	r25, Y+2	; 0x02
    165a:	90 93 a2 01 	sts	0x01A2, r25
    165e:	80 93 a1 01 	sts	0x01A1, r24
}
    1662:	0f 90       	pop	r0
    1664:	0f 90       	pop	r0
    1666:	cf 91       	pop	r28
    1668:	df 91       	pop	r29
    166a:	08 95       	ret

0000166c <__vector_1>:

//INT0
void __vector_1 (void) __attribute__((signal));
void __vector_1 (void){
    166c:	1f 92       	push	r1
    166e:	0f 92       	push	r0
    1670:	0f b6       	in	r0, 0x3f	; 63
    1672:	0f 92       	push	r0
    1674:	11 24       	eor	r1, r1
    1676:	2f 93       	push	r18
    1678:	3f 93       	push	r19
    167a:	4f 93       	push	r20
    167c:	5f 93       	push	r21
    167e:	6f 93       	push	r22
    1680:	7f 93       	push	r23
    1682:	8f 93       	push	r24
    1684:	9f 93       	push	r25
    1686:	af 93       	push	r26
    1688:	bf 93       	push	r27
    168a:	ef 93       	push	r30
    168c:	ff 93       	push	r31
    168e:	df 93       	push	r29
    1690:	cf 93       	push	r28
    1692:	cd b7       	in	r28, 0x3d	; 61
    1694:	de b7       	in	r29, 0x3e	; 62
	if(global_PTRINT0NotificationFunction!=0x00)
    1696:	80 91 9f 01 	lds	r24, 0x019F
    169a:	90 91 a0 01 	lds	r25, 0x01A0
    169e:	00 97       	sbiw	r24, 0x00	; 0
    16a0:	29 f0       	breq	.+10     	; 0x16ac <__vector_1+0x40>
	global_PTRINT0NotificationFunction();
    16a2:	e0 91 9f 01 	lds	r30, 0x019F
    16a6:	f0 91 a0 01 	lds	r31, 0x01A0
    16aa:	09 95       	icall
}
    16ac:	cf 91       	pop	r28
    16ae:	df 91       	pop	r29
    16b0:	ff 91       	pop	r31
    16b2:	ef 91       	pop	r30
    16b4:	bf 91       	pop	r27
    16b6:	af 91       	pop	r26
    16b8:	9f 91       	pop	r25
    16ba:	8f 91       	pop	r24
    16bc:	7f 91       	pop	r23
    16be:	6f 91       	pop	r22
    16c0:	5f 91       	pop	r21
    16c2:	4f 91       	pop	r20
    16c4:	3f 91       	pop	r19
    16c6:	2f 91       	pop	r18
    16c8:	0f 90       	pop	r0
    16ca:	0f be       	out	0x3f, r0	; 63
    16cc:	0f 90       	pop	r0
    16ce:	1f 90       	pop	r1
    16d0:	18 95       	reti

000016d2 <__vector_2>:

//INT1
void __vector_2 (void) __attribute__((signal));
void __vector_2 (void){
    16d2:	1f 92       	push	r1
    16d4:	0f 92       	push	r0
    16d6:	0f b6       	in	r0, 0x3f	; 63
    16d8:	0f 92       	push	r0
    16da:	11 24       	eor	r1, r1
    16dc:	2f 93       	push	r18
    16de:	3f 93       	push	r19
    16e0:	4f 93       	push	r20
    16e2:	5f 93       	push	r21
    16e4:	6f 93       	push	r22
    16e6:	7f 93       	push	r23
    16e8:	8f 93       	push	r24
    16ea:	9f 93       	push	r25
    16ec:	af 93       	push	r26
    16ee:	bf 93       	push	r27
    16f0:	ef 93       	push	r30
    16f2:	ff 93       	push	r31
    16f4:	df 93       	push	r29
    16f6:	cf 93       	push	r28
    16f8:	cd b7       	in	r28, 0x3d	; 61
    16fa:	de b7       	in	r29, 0x3e	; 62
	if(global_PTRINT1NotificationFunction!=0x00)
    16fc:	80 91 a1 01 	lds	r24, 0x01A1
    1700:	90 91 a2 01 	lds	r25, 0x01A2
    1704:	00 97       	sbiw	r24, 0x00	; 0
    1706:	29 f0       	breq	.+10     	; 0x1712 <__vector_2+0x40>
		global_PTRINT1NotificationFunction();
    1708:	e0 91 a1 01 	lds	r30, 0x01A1
    170c:	f0 91 a2 01 	lds	r31, 0x01A2
    1710:	09 95       	icall
}
    1712:	cf 91       	pop	r28
    1714:	df 91       	pop	r29
    1716:	ff 91       	pop	r31
    1718:	ef 91       	pop	r30
    171a:	bf 91       	pop	r27
    171c:	af 91       	pop	r26
    171e:	9f 91       	pop	r25
    1720:	8f 91       	pop	r24
    1722:	7f 91       	pop	r23
    1724:	6f 91       	pop	r22
    1726:	5f 91       	pop	r21
    1728:	4f 91       	pop	r20
    172a:	3f 91       	pop	r19
    172c:	2f 91       	pop	r18
    172e:	0f 90       	pop	r0
    1730:	0f be       	out	0x3f, r0	; 63
    1732:	0f 90       	pop	r0
    1734:	1f 90       	pop	r1
    1736:	18 95       	reti

00001738 <DIO_VoidSetPinDirection>:
//(2) include self layers
//(3) include lower layers
//(4) include self files "its .h file"


void DIO_VoidSetPinDirection(u8 Copy_u8PortName,u8 Copy_u8PinNumber,u8 Copy_PinState){
    1738:	df 93       	push	r29
    173a:	cf 93       	push	r28
    173c:	cd b7       	in	r28, 0x3d	; 61
    173e:	de b7       	in	r29, 0x3e	; 62
    1740:	2d 97       	sbiw	r28, 0x0d	; 13
    1742:	0f b6       	in	r0, 0x3f	; 63
    1744:	f8 94       	cli
    1746:	de bf       	out	0x3e, r29	; 62
    1748:	0f be       	out	0x3f, r0	; 63
    174a:	cd bf       	out	0x3d, r28	; 61
    174c:	89 83       	std	Y+1, r24	; 0x01
    174e:	6a 83       	std	Y+2, r22	; 0x02
    1750:	4b 83       	std	Y+3, r20	; 0x03
	//Better Array to Be {&DDRA,&DDRB,&DDRC,&DDRD}
	//u8* arr={&DDRA,&DDRB,&DDRC,&DDRD};
	//arr[Copy_u8PortName]
	switch(Copy_u8PortName){
    1752:	89 81       	ldd	r24, Y+1	; 0x01
    1754:	28 2f       	mov	r18, r24
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	3d 87       	std	Y+13, r19	; 0x0d
    175a:	2c 87       	std	Y+12, r18	; 0x0c
    175c:	8c 85       	ldd	r24, Y+12	; 0x0c
    175e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1760:	81 30       	cpi	r24, 0x01	; 1
    1762:	91 05       	cpc	r25, r1
    1764:	09 f4       	brne	.+2      	; 0x1768 <DIO_VoidSetPinDirection+0x30>
    1766:	4f c0       	rjmp	.+158    	; 0x1806 <DIO_VoidSetPinDirection+0xce>
    1768:	2c 85       	ldd	r18, Y+12	; 0x0c
    176a:	3d 85       	ldd	r19, Y+13	; 0x0d
    176c:	22 30       	cpi	r18, 0x02	; 2
    176e:	31 05       	cpc	r19, r1
    1770:	2c f4       	brge	.+10     	; 0x177c <DIO_VoidSetPinDirection+0x44>
    1772:	8c 85       	ldd	r24, Y+12	; 0x0c
    1774:	9d 85       	ldd	r25, Y+13	; 0x0d
    1776:	00 97       	sbiw	r24, 0x00	; 0
    1778:	71 f0       	breq	.+28     	; 0x1796 <DIO_VoidSetPinDirection+0x5e>
    177a:	eb c0       	rjmp	.+470    	; 0x1952 <DIO_VoidSetPinDirection+0x21a>
    177c:	2c 85       	ldd	r18, Y+12	; 0x0c
    177e:	3d 85       	ldd	r19, Y+13	; 0x0d
    1780:	22 30       	cpi	r18, 0x02	; 2
    1782:	31 05       	cpc	r19, r1
    1784:	09 f4       	brne	.+2      	; 0x1788 <DIO_VoidSetPinDirection+0x50>
    1786:	77 c0       	rjmp	.+238    	; 0x1876 <DIO_VoidSetPinDirection+0x13e>
    1788:	8c 85       	ldd	r24, Y+12	; 0x0c
    178a:	9d 85       	ldd	r25, Y+13	; 0x0d
    178c:	83 30       	cpi	r24, 0x03	; 3
    178e:	91 05       	cpc	r25, r1
    1790:	09 f4       	brne	.+2      	; 0x1794 <DIO_VoidSetPinDirection+0x5c>
    1792:	a9 c0       	rjmp	.+338    	; 0x18e6 <DIO_VoidSetPinDirection+0x1ae>
    1794:	de c0       	rjmp	.+444    	; 0x1952 <DIO_VoidSetPinDirection+0x21a>
	case DIO_PORTA:
		switch(Copy_PinState){
    1796:	8b 81       	ldd	r24, Y+3	; 0x03
    1798:	28 2f       	mov	r18, r24
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	3b 87       	std	Y+11, r19	; 0x0b
    179e:	2a 87       	std	Y+10, r18	; 0x0a
    17a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    17a2:	9b 85       	ldd	r25, Y+11	; 0x0b
    17a4:	00 97       	sbiw	r24, 0x00	; 0
    17a6:	d1 f0       	breq	.+52     	; 0x17dc <DIO_VoidSetPinDirection+0xa4>
    17a8:	2a 85       	ldd	r18, Y+10	; 0x0a
    17aa:	3b 85       	ldd	r19, Y+11	; 0x0b
    17ac:	21 30       	cpi	r18, 0x01	; 1
    17ae:	31 05       	cpc	r19, r1
    17b0:	09 f0       	breq	.+2      	; 0x17b4 <DIO_VoidSetPinDirection+0x7c>
    17b2:	cf c0       	rjmp	.+414    	; 0x1952 <DIO_VoidSetPinDirection+0x21a>
		case OUTPUT:
			Set_Bit(DDRA,Copy_u8PinNumber);
    17b4:	aa e3       	ldi	r26, 0x3A	; 58
    17b6:	b0 e0       	ldi	r27, 0x00	; 0
    17b8:	ea e3       	ldi	r30, 0x3A	; 58
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	80 81       	ld	r24, Z
    17be:	48 2f       	mov	r20, r24
    17c0:	8a 81       	ldd	r24, Y+2	; 0x02
    17c2:	28 2f       	mov	r18, r24
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	81 e0       	ldi	r24, 0x01	; 1
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	02 2e       	mov	r0, r18
    17cc:	02 c0       	rjmp	.+4      	; 0x17d2 <DIO_VoidSetPinDirection+0x9a>
    17ce:	88 0f       	add	r24, r24
    17d0:	99 1f       	adc	r25, r25
    17d2:	0a 94       	dec	r0
    17d4:	e2 f7       	brpl	.-8      	; 0x17ce <DIO_VoidSetPinDirection+0x96>
    17d6:	84 2b       	or	r24, r20
    17d8:	8c 93       	st	X, r24
    17da:	bb c0       	rjmp	.+374    	; 0x1952 <DIO_VoidSetPinDirection+0x21a>
			break;
		case INPUT:
			CLR_Bit(DDRA,Copy_u8PinNumber);
    17dc:	aa e3       	ldi	r26, 0x3A	; 58
    17de:	b0 e0       	ldi	r27, 0x00	; 0
    17e0:	ea e3       	ldi	r30, 0x3A	; 58
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	48 2f       	mov	r20, r24
    17e8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ea:	28 2f       	mov	r18, r24
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	02 2e       	mov	r0, r18
    17f4:	02 c0       	rjmp	.+4      	; 0x17fa <DIO_VoidSetPinDirection+0xc2>
    17f6:	88 0f       	add	r24, r24
    17f8:	99 1f       	adc	r25, r25
    17fa:	0a 94       	dec	r0
    17fc:	e2 f7       	brpl	.-8      	; 0x17f6 <DIO_VoidSetPinDirection+0xbe>
    17fe:	80 95       	com	r24
    1800:	84 23       	and	r24, r20
    1802:	8c 93       	st	X, r24
    1804:	a6 c0       	rjmp	.+332    	; 0x1952 <DIO_VoidSetPinDirection+0x21a>
			break;
		}
		break;
	case DIO_PORTB:
		switch(Copy_PinState){
    1806:	8b 81       	ldd	r24, Y+3	; 0x03
    1808:	28 2f       	mov	r18, r24
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	39 87       	std	Y+9, r19	; 0x09
    180e:	28 87       	std	Y+8, r18	; 0x08
    1810:	88 85       	ldd	r24, Y+8	; 0x08
    1812:	99 85       	ldd	r25, Y+9	; 0x09
    1814:	00 97       	sbiw	r24, 0x00	; 0
    1816:	d1 f0       	breq	.+52     	; 0x184c <DIO_VoidSetPinDirection+0x114>
    1818:	28 85       	ldd	r18, Y+8	; 0x08
    181a:	39 85       	ldd	r19, Y+9	; 0x09
    181c:	21 30       	cpi	r18, 0x01	; 1
    181e:	31 05       	cpc	r19, r1
    1820:	09 f0       	breq	.+2      	; 0x1824 <DIO_VoidSetPinDirection+0xec>
    1822:	97 c0       	rjmp	.+302    	; 0x1952 <DIO_VoidSetPinDirection+0x21a>
			case OUTPUT:
				Set_Bit(DDRB,Copy_u8PinNumber);
    1824:	a7 e3       	ldi	r26, 0x37	; 55
    1826:	b0 e0       	ldi	r27, 0x00	; 0
    1828:	e7 e3       	ldi	r30, 0x37	; 55
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	80 81       	ld	r24, Z
    182e:	48 2f       	mov	r20, r24
    1830:	8a 81       	ldd	r24, Y+2	; 0x02
    1832:	28 2f       	mov	r18, r24
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	81 e0       	ldi	r24, 0x01	; 1
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	02 2e       	mov	r0, r18
    183c:	02 c0       	rjmp	.+4      	; 0x1842 <DIO_VoidSetPinDirection+0x10a>
    183e:	88 0f       	add	r24, r24
    1840:	99 1f       	adc	r25, r25
    1842:	0a 94       	dec	r0
    1844:	e2 f7       	brpl	.-8      	; 0x183e <DIO_VoidSetPinDirection+0x106>
    1846:	84 2b       	or	r24, r20
    1848:	8c 93       	st	X, r24
    184a:	83 c0       	rjmp	.+262    	; 0x1952 <DIO_VoidSetPinDirection+0x21a>
				break;
			case INPUT:
				CLR_Bit(DDRB,Copy_u8PinNumber);
    184c:	a7 e3       	ldi	r26, 0x37	; 55
    184e:	b0 e0       	ldi	r27, 0x00	; 0
    1850:	e7 e3       	ldi	r30, 0x37	; 55
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	80 81       	ld	r24, Z
    1856:	48 2f       	mov	r20, r24
    1858:	8a 81       	ldd	r24, Y+2	; 0x02
    185a:	28 2f       	mov	r18, r24
    185c:	30 e0       	ldi	r19, 0x00	; 0
    185e:	81 e0       	ldi	r24, 0x01	; 1
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	02 2e       	mov	r0, r18
    1864:	02 c0       	rjmp	.+4      	; 0x186a <DIO_VoidSetPinDirection+0x132>
    1866:	88 0f       	add	r24, r24
    1868:	99 1f       	adc	r25, r25
    186a:	0a 94       	dec	r0
    186c:	e2 f7       	brpl	.-8      	; 0x1866 <DIO_VoidSetPinDirection+0x12e>
    186e:	80 95       	com	r24
    1870:	84 23       	and	r24, r20
    1872:	8c 93       	st	X, r24
    1874:	6e c0       	rjmp	.+220    	; 0x1952 <DIO_VoidSetPinDirection+0x21a>
				break;}
		break;
	case DIO_PORTC:
		switch(Copy_PinState){
    1876:	8b 81       	ldd	r24, Y+3	; 0x03
    1878:	28 2f       	mov	r18, r24
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	3f 83       	std	Y+7, r19	; 0x07
    187e:	2e 83       	std	Y+6, r18	; 0x06
    1880:	8e 81       	ldd	r24, Y+6	; 0x06
    1882:	9f 81       	ldd	r25, Y+7	; 0x07
    1884:	00 97       	sbiw	r24, 0x00	; 0
    1886:	d1 f0       	breq	.+52     	; 0x18bc <DIO_VoidSetPinDirection+0x184>
    1888:	2e 81       	ldd	r18, Y+6	; 0x06
    188a:	3f 81       	ldd	r19, Y+7	; 0x07
    188c:	21 30       	cpi	r18, 0x01	; 1
    188e:	31 05       	cpc	r19, r1
    1890:	09 f0       	breq	.+2      	; 0x1894 <DIO_VoidSetPinDirection+0x15c>
    1892:	5f c0       	rjmp	.+190    	; 0x1952 <DIO_VoidSetPinDirection+0x21a>
			case OUTPUT:
				Set_Bit(DDRC,Copy_u8PinNumber);
    1894:	a4 e3       	ldi	r26, 0x34	; 52
    1896:	b0 e0       	ldi	r27, 0x00	; 0
    1898:	e4 e3       	ldi	r30, 0x34	; 52
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	80 81       	ld	r24, Z
    189e:	48 2f       	mov	r20, r24
    18a0:	8a 81       	ldd	r24, Y+2	; 0x02
    18a2:	28 2f       	mov	r18, r24
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	81 e0       	ldi	r24, 0x01	; 1
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	02 2e       	mov	r0, r18
    18ac:	02 c0       	rjmp	.+4      	; 0x18b2 <DIO_VoidSetPinDirection+0x17a>
    18ae:	88 0f       	add	r24, r24
    18b0:	99 1f       	adc	r25, r25
    18b2:	0a 94       	dec	r0
    18b4:	e2 f7       	brpl	.-8      	; 0x18ae <DIO_VoidSetPinDirection+0x176>
    18b6:	84 2b       	or	r24, r20
    18b8:	8c 93       	st	X, r24
    18ba:	4b c0       	rjmp	.+150    	; 0x1952 <DIO_VoidSetPinDirection+0x21a>
				break;
			case INPUT:
				CLR_Bit(DDRC,Copy_u8PinNumber);
    18bc:	a4 e3       	ldi	r26, 0x34	; 52
    18be:	b0 e0       	ldi	r27, 0x00	; 0
    18c0:	e4 e3       	ldi	r30, 0x34	; 52
    18c2:	f0 e0       	ldi	r31, 0x00	; 0
    18c4:	80 81       	ld	r24, Z
    18c6:	48 2f       	mov	r20, r24
    18c8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ca:	28 2f       	mov	r18, r24
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	81 e0       	ldi	r24, 0x01	; 1
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	02 2e       	mov	r0, r18
    18d4:	02 c0       	rjmp	.+4      	; 0x18da <DIO_VoidSetPinDirection+0x1a2>
    18d6:	88 0f       	add	r24, r24
    18d8:	99 1f       	adc	r25, r25
    18da:	0a 94       	dec	r0
    18dc:	e2 f7       	brpl	.-8      	; 0x18d6 <DIO_VoidSetPinDirection+0x19e>
    18de:	80 95       	com	r24
    18e0:	84 23       	and	r24, r20
    18e2:	8c 93       	st	X, r24
    18e4:	36 c0       	rjmp	.+108    	; 0x1952 <DIO_VoidSetPinDirection+0x21a>
				break;}
		break;
	case DIO_PORTD:
		switch(Copy_PinState){
    18e6:	8b 81       	ldd	r24, Y+3	; 0x03
    18e8:	28 2f       	mov	r18, r24
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	3d 83       	std	Y+5, r19	; 0x05
    18ee:	2c 83       	std	Y+4, r18	; 0x04
    18f0:	8c 81       	ldd	r24, Y+4	; 0x04
    18f2:	9d 81       	ldd	r25, Y+5	; 0x05
    18f4:	00 97       	sbiw	r24, 0x00	; 0
    18f6:	c9 f0       	breq	.+50     	; 0x192a <DIO_VoidSetPinDirection+0x1f2>
    18f8:	2c 81       	ldd	r18, Y+4	; 0x04
    18fa:	3d 81       	ldd	r19, Y+5	; 0x05
    18fc:	21 30       	cpi	r18, 0x01	; 1
    18fe:	31 05       	cpc	r19, r1
    1900:	41 f5       	brne	.+80     	; 0x1952 <DIO_VoidSetPinDirection+0x21a>
			case OUTPUT:
				Set_Bit(DDRD,Copy_u8PinNumber);
    1902:	a1 e3       	ldi	r26, 0x31	; 49
    1904:	b0 e0       	ldi	r27, 0x00	; 0
    1906:	e1 e3       	ldi	r30, 0x31	; 49
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	80 81       	ld	r24, Z
    190c:	48 2f       	mov	r20, r24
    190e:	8a 81       	ldd	r24, Y+2	; 0x02
    1910:	28 2f       	mov	r18, r24
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	02 2e       	mov	r0, r18
    191a:	02 c0       	rjmp	.+4      	; 0x1920 <DIO_VoidSetPinDirection+0x1e8>
    191c:	88 0f       	add	r24, r24
    191e:	99 1f       	adc	r25, r25
    1920:	0a 94       	dec	r0
    1922:	e2 f7       	brpl	.-8      	; 0x191c <DIO_VoidSetPinDirection+0x1e4>
    1924:	84 2b       	or	r24, r20
    1926:	8c 93       	st	X, r24
    1928:	14 c0       	rjmp	.+40     	; 0x1952 <DIO_VoidSetPinDirection+0x21a>
				break;
			case INPUT:
				CLR_Bit(DDRD,Copy_u8PinNumber);
    192a:	a1 e3       	ldi	r26, 0x31	; 49
    192c:	b0 e0       	ldi	r27, 0x00	; 0
    192e:	e1 e3       	ldi	r30, 0x31	; 49
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	80 81       	ld	r24, Z
    1934:	48 2f       	mov	r20, r24
    1936:	8a 81       	ldd	r24, Y+2	; 0x02
    1938:	28 2f       	mov	r18, r24
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	81 e0       	ldi	r24, 0x01	; 1
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	02 2e       	mov	r0, r18
    1942:	02 c0       	rjmp	.+4      	; 0x1948 <DIO_VoidSetPinDirection+0x210>
    1944:	88 0f       	add	r24, r24
    1946:	99 1f       	adc	r25, r25
    1948:	0a 94       	dec	r0
    194a:	e2 f7       	brpl	.-8      	; 0x1944 <DIO_VoidSetPinDirection+0x20c>
    194c:	80 95       	com	r24
    194e:	84 23       	and	r24, r20
    1950:	8c 93       	st	X, r24
				break;}
		break;

	}
}
    1952:	2d 96       	adiw	r28, 0x0d	; 13
    1954:	0f b6       	in	r0, 0x3f	; 63
    1956:	f8 94       	cli
    1958:	de bf       	out	0x3e, r29	; 62
    195a:	0f be       	out	0x3f, r0	; 63
    195c:	cd bf       	out	0x3d, r28	; 61
    195e:	cf 91       	pop	r28
    1960:	df 91       	pop	r29
    1962:	08 95       	ret

00001964 <DIO_VoidSetPinValue>:

void DIO_VoidSetPinValue(u8 Copy_u8PortName,u8 Copy_u8PinNumber,u8 Copy_PinValue){
    1964:	df 93       	push	r29
    1966:	cf 93       	push	r28
    1968:	cd b7       	in	r28, 0x3d	; 61
    196a:	de b7       	in	r29, 0x3e	; 62
    196c:	2d 97       	sbiw	r28, 0x0d	; 13
    196e:	0f b6       	in	r0, 0x3f	; 63
    1970:	f8 94       	cli
    1972:	de bf       	out	0x3e, r29	; 62
    1974:	0f be       	out	0x3f, r0	; 63
    1976:	cd bf       	out	0x3d, r28	; 61
    1978:	89 83       	std	Y+1, r24	; 0x01
    197a:	6a 83       	std	Y+2, r22	; 0x02
    197c:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_u8PortName){
    197e:	89 81       	ldd	r24, Y+1	; 0x01
    1980:	28 2f       	mov	r18, r24
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	3d 87       	std	Y+13, r19	; 0x0d
    1986:	2c 87       	std	Y+12, r18	; 0x0c
    1988:	8c 85       	ldd	r24, Y+12	; 0x0c
    198a:	9d 85       	ldd	r25, Y+13	; 0x0d
    198c:	81 30       	cpi	r24, 0x01	; 1
    198e:	91 05       	cpc	r25, r1
    1990:	09 f4       	brne	.+2      	; 0x1994 <DIO_VoidSetPinValue+0x30>
    1992:	4f c0       	rjmp	.+158    	; 0x1a32 <DIO_VoidSetPinValue+0xce>
    1994:	2c 85       	ldd	r18, Y+12	; 0x0c
    1996:	3d 85       	ldd	r19, Y+13	; 0x0d
    1998:	22 30       	cpi	r18, 0x02	; 2
    199a:	31 05       	cpc	r19, r1
    199c:	2c f4       	brge	.+10     	; 0x19a8 <DIO_VoidSetPinValue+0x44>
    199e:	8c 85       	ldd	r24, Y+12	; 0x0c
    19a0:	9d 85       	ldd	r25, Y+13	; 0x0d
    19a2:	00 97       	sbiw	r24, 0x00	; 0
    19a4:	71 f0       	breq	.+28     	; 0x19c2 <DIO_VoidSetPinValue+0x5e>
    19a6:	eb c0       	rjmp	.+470    	; 0x1b7e <DIO_VoidSetPinValue+0x21a>
    19a8:	2c 85       	ldd	r18, Y+12	; 0x0c
    19aa:	3d 85       	ldd	r19, Y+13	; 0x0d
    19ac:	22 30       	cpi	r18, 0x02	; 2
    19ae:	31 05       	cpc	r19, r1
    19b0:	09 f4       	brne	.+2      	; 0x19b4 <DIO_VoidSetPinValue+0x50>
    19b2:	77 c0       	rjmp	.+238    	; 0x1aa2 <DIO_VoidSetPinValue+0x13e>
    19b4:	8c 85       	ldd	r24, Y+12	; 0x0c
    19b6:	9d 85       	ldd	r25, Y+13	; 0x0d
    19b8:	83 30       	cpi	r24, 0x03	; 3
    19ba:	91 05       	cpc	r25, r1
    19bc:	09 f4       	brne	.+2      	; 0x19c0 <DIO_VoidSetPinValue+0x5c>
    19be:	a9 c0       	rjmp	.+338    	; 0x1b12 <DIO_VoidSetPinValue+0x1ae>
    19c0:	de c0       	rjmp	.+444    	; 0x1b7e <DIO_VoidSetPinValue+0x21a>
	case DIO_PORTA:
		switch(Copy_PinValue){
    19c2:	8b 81       	ldd	r24, Y+3	; 0x03
    19c4:	28 2f       	mov	r18, r24
    19c6:	30 e0       	ldi	r19, 0x00	; 0
    19c8:	3b 87       	std	Y+11, r19	; 0x0b
    19ca:	2a 87       	std	Y+10, r18	; 0x0a
    19cc:	8a 85       	ldd	r24, Y+10	; 0x0a
    19ce:	9b 85       	ldd	r25, Y+11	; 0x0b
    19d0:	00 97       	sbiw	r24, 0x00	; 0
    19d2:	d1 f0       	breq	.+52     	; 0x1a08 <DIO_VoidSetPinValue+0xa4>
    19d4:	2a 85       	ldd	r18, Y+10	; 0x0a
    19d6:	3b 85       	ldd	r19, Y+11	; 0x0b
    19d8:	21 30       	cpi	r18, 0x01	; 1
    19da:	31 05       	cpc	r19, r1
    19dc:	09 f0       	breq	.+2      	; 0x19e0 <DIO_VoidSetPinValue+0x7c>
    19de:	cf c0       	rjmp	.+414    	; 0x1b7e <DIO_VoidSetPinValue+0x21a>
		case HIGH:
			Set_Bit(PORTA,Copy_u8PinNumber);
    19e0:	ab e3       	ldi	r26, 0x3B	; 59
    19e2:	b0 e0       	ldi	r27, 0x00	; 0
    19e4:	eb e3       	ldi	r30, 0x3B	; 59
    19e6:	f0 e0       	ldi	r31, 0x00	; 0
    19e8:	80 81       	ld	r24, Z
    19ea:	48 2f       	mov	r20, r24
    19ec:	8a 81       	ldd	r24, Y+2	; 0x02
    19ee:	28 2f       	mov	r18, r24
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	81 e0       	ldi	r24, 0x01	; 1
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	02 2e       	mov	r0, r18
    19f8:	02 c0       	rjmp	.+4      	; 0x19fe <DIO_VoidSetPinValue+0x9a>
    19fa:	88 0f       	add	r24, r24
    19fc:	99 1f       	adc	r25, r25
    19fe:	0a 94       	dec	r0
    1a00:	e2 f7       	brpl	.-8      	; 0x19fa <DIO_VoidSetPinValue+0x96>
    1a02:	84 2b       	or	r24, r20
    1a04:	8c 93       	st	X, r24
    1a06:	bb c0       	rjmp	.+374    	; 0x1b7e <DIO_VoidSetPinValue+0x21a>
			break;
		case LOW:
			CLR_Bit(PORTA,Copy_u8PinNumber);
    1a08:	ab e3       	ldi	r26, 0x3B	; 59
    1a0a:	b0 e0       	ldi	r27, 0x00	; 0
    1a0c:	eb e3       	ldi	r30, 0x3B	; 59
    1a0e:	f0 e0       	ldi	r31, 0x00	; 0
    1a10:	80 81       	ld	r24, Z
    1a12:	48 2f       	mov	r20, r24
    1a14:	8a 81       	ldd	r24, Y+2	; 0x02
    1a16:	28 2f       	mov	r18, r24
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	81 e0       	ldi	r24, 0x01	; 1
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	02 2e       	mov	r0, r18
    1a20:	02 c0       	rjmp	.+4      	; 0x1a26 <DIO_VoidSetPinValue+0xc2>
    1a22:	88 0f       	add	r24, r24
    1a24:	99 1f       	adc	r25, r25
    1a26:	0a 94       	dec	r0
    1a28:	e2 f7       	brpl	.-8      	; 0x1a22 <DIO_VoidSetPinValue+0xbe>
    1a2a:	80 95       	com	r24
    1a2c:	84 23       	and	r24, r20
    1a2e:	8c 93       	st	X, r24
    1a30:	a6 c0       	rjmp	.+332    	; 0x1b7e <DIO_VoidSetPinValue+0x21a>
			break;
		}
		break;
	case DIO_PORTB:
		switch(Copy_PinValue){
    1a32:	8b 81       	ldd	r24, Y+3	; 0x03
    1a34:	28 2f       	mov	r18, r24
    1a36:	30 e0       	ldi	r19, 0x00	; 0
    1a38:	39 87       	std	Y+9, r19	; 0x09
    1a3a:	28 87       	std	Y+8, r18	; 0x08
    1a3c:	88 85       	ldd	r24, Y+8	; 0x08
    1a3e:	99 85       	ldd	r25, Y+9	; 0x09
    1a40:	00 97       	sbiw	r24, 0x00	; 0
    1a42:	d1 f0       	breq	.+52     	; 0x1a78 <DIO_VoidSetPinValue+0x114>
    1a44:	28 85       	ldd	r18, Y+8	; 0x08
    1a46:	39 85       	ldd	r19, Y+9	; 0x09
    1a48:	21 30       	cpi	r18, 0x01	; 1
    1a4a:	31 05       	cpc	r19, r1
    1a4c:	09 f0       	breq	.+2      	; 0x1a50 <DIO_VoidSetPinValue+0xec>
    1a4e:	97 c0       	rjmp	.+302    	; 0x1b7e <DIO_VoidSetPinValue+0x21a>
			case HIGH:
				Set_Bit(PORTB,Copy_u8PinNumber);
    1a50:	a8 e3       	ldi	r26, 0x38	; 56
    1a52:	b0 e0       	ldi	r27, 0x00	; 0
    1a54:	e8 e3       	ldi	r30, 0x38	; 56
    1a56:	f0 e0       	ldi	r31, 0x00	; 0
    1a58:	80 81       	ld	r24, Z
    1a5a:	48 2f       	mov	r20, r24
    1a5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5e:	28 2f       	mov	r18, r24
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	81 e0       	ldi	r24, 0x01	; 1
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	02 2e       	mov	r0, r18
    1a68:	02 c0       	rjmp	.+4      	; 0x1a6e <DIO_VoidSetPinValue+0x10a>
    1a6a:	88 0f       	add	r24, r24
    1a6c:	99 1f       	adc	r25, r25
    1a6e:	0a 94       	dec	r0
    1a70:	e2 f7       	brpl	.-8      	; 0x1a6a <DIO_VoidSetPinValue+0x106>
    1a72:	84 2b       	or	r24, r20
    1a74:	8c 93       	st	X, r24
    1a76:	83 c0       	rjmp	.+262    	; 0x1b7e <DIO_VoidSetPinValue+0x21a>
				break;
			case LOW:
				CLR_Bit(PORTB,Copy_u8PinNumber);
    1a78:	a8 e3       	ldi	r26, 0x38	; 56
    1a7a:	b0 e0       	ldi	r27, 0x00	; 0
    1a7c:	e8 e3       	ldi	r30, 0x38	; 56
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	80 81       	ld	r24, Z
    1a82:	48 2f       	mov	r20, r24
    1a84:	8a 81       	ldd	r24, Y+2	; 0x02
    1a86:	28 2f       	mov	r18, r24
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	81 e0       	ldi	r24, 0x01	; 1
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	02 2e       	mov	r0, r18
    1a90:	02 c0       	rjmp	.+4      	; 0x1a96 <DIO_VoidSetPinValue+0x132>
    1a92:	88 0f       	add	r24, r24
    1a94:	99 1f       	adc	r25, r25
    1a96:	0a 94       	dec	r0
    1a98:	e2 f7       	brpl	.-8      	; 0x1a92 <DIO_VoidSetPinValue+0x12e>
    1a9a:	80 95       	com	r24
    1a9c:	84 23       	and	r24, r20
    1a9e:	8c 93       	st	X, r24
    1aa0:	6e c0       	rjmp	.+220    	; 0x1b7e <DIO_VoidSetPinValue+0x21a>
				break;}
		break;
	case DIO_PORTC:
		switch(Copy_PinValue){
    1aa2:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa4:	28 2f       	mov	r18, r24
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	3f 83       	std	Y+7, r19	; 0x07
    1aaa:	2e 83       	std	Y+6, r18	; 0x06
    1aac:	8e 81       	ldd	r24, Y+6	; 0x06
    1aae:	9f 81       	ldd	r25, Y+7	; 0x07
    1ab0:	00 97       	sbiw	r24, 0x00	; 0
    1ab2:	d1 f0       	breq	.+52     	; 0x1ae8 <DIO_VoidSetPinValue+0x184>
    1ab4:	2e 81       	ldd	r18, Y+6	; 0x06
    1ab6:	3f 81       	ldd	r19, Y+7	; 0x07
    1ab8:	21 30       	cpi	r18, 0x01	; 1
    1aba:	31 05       	cpc	r19, r1
    1abc:	09 f0       	breq	.+2      	; 0x1ac0 <DIO_VoidSetPinValue+0x15c>
    1abe:	5f c0       	rjmp	.+190    	; 0x1b7e <DIO_VoidSetPinValue+0x21a>
			case HIGH:
				Set_Bit(PORTC,Copy_u8PinNumber);
    1ac0:	a5 e3       	ldi	r26, 0x35	; 53
    1ac2:	b0 e0       	ldi	r27, 0x00	; 0
    1ac4:	e5 e3       	ldi	r30, 0x35	; 53
    1ac6:	f0 e0       	ldi	r31, 0x00	; 0
    1ac8:	80 81       	ld	r24, Z
    1aca:	48 2f       	mov	r20, r24
    1acc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ace:	28 2f       	mov	r18, r24
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	81 e0       	ldi	r24, 0x01	; 1
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	02 2e       	mov	r0, r18
    1ad8:	02 c0       	rjmp	.+4      	; 0x1ade <DIO_VoidSetPinValue+0x17a>
    1ada:	88 0f       	add	r24, r24
    1adc:	99 1f       	adc	r25, r25
    1ade:	0a 94       	dec	r0
    1ae0:	e2 f7       	brpl	.-8      	; 0x1ada <DIO_VoidSetPinValue+0x176>
    1ae2:	84 2b       	or	r24, r20
    1ae4:	8c 93       	st	X, r24
    1ae6:	4b c0       	rjmp	.+150    	; 0x1b7e <DIO_VoidSetPinValue+0x21a>
				break;
			case LOW:
				CLR_Bit(PORTC,Copy_u8PinNumber);
    1ae8:	a5 e3       	ldi	r26, 0x35	; 53
    1aea:	b0 e0       	ldi	r27, 0x00	; 0
    1aec:	e5 e3       	ldi	r30, 0x35	; 53
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	80 81       	ld	r24, Z
    1af2:	48 2f       	mov	r20, r24
    1af4:	8a 81       	ldd	r24, Y+2	; 0x02
    1af6:	28 2f       	mov	r18, r24
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	81 e0       	ldi	r24, 0x01	; 1
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	02 2e       	mov	r0, r18
    1b00:	02 c0       	rjmp	.+4      	; 0x1b06 <DIO_VoidSetPinValue+0x1a2>
    1b02:	88 0f       	add	r24, r24
    1b04:	99 1f       	adc	r25, r25
    1b06:	0a 94       	dec	r0
    1b08:	e2 f7       	brpl	.-8      	; 0x1b02 <DIO_VoidSetPinValue+0x19e>
    1b0a:	80 95       	com	r24
    1b0c:	84 23       	and	r24, r20
    1b0e:	8c 93       	st	X, r24
    1b10:	36 c0       	rjmp	.+108    	; 0x1b7e <DIO_VoidSetPinValue+0x21a>
				break;}
		break;
	case DIO_PORTD:
		switch(Copy_PinValue){
    1b12:	8b 81       	ldd	r24, Y+3	; 0x03
    1b14:	28 2f       	mov	r18, r24
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	3d 83       	std	Y+5, r19	; 0x05
    1b1a:	2c 83       	std	Y+4, r18	; 0x04
    1b1c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b1e:	9d 81       	ldd	r25, Y+5	; 0x05
    1b20:	00 97       	sbiw	r24, 0x00	; 0
    1b22:	c9 f0       	breq	.+50     	; 0x1b56 <DIO_VoidSetPinValue+0x1f2>
    1b24:	2c 81       	ldd	r18, Y+4	; 0x04
    1b26:	3d 81       	ldd	r19, Y+5	; 0x05
    1b28:	21 30       	cpi	r18, 0x01	; 1
    1b2a:	31 05       	cpc	r19, r1
    1b2c:	41 f5       	brne	.+80     	; 0x1b7e <DIO_VoidSetPinValue+0x21a>
			case HIGH:
				Set_Bit(PORTD,Copy_u8PinNumber);
    1b2e:	a2 e3       	ldi	r26, 0x32	; 50
    1b30:	b0 e0       	ldi	r27, 0x00	; 0
    1b32:	e2 e3       	ldi	r30, 0x32	; 50
    1b34:	f0 e0       	ldi	r31, 0x00	; 0
    1b36:	80 81       	ld	r24, Z
    1b38:	48 2f       	mov	r20, r24
    1b3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3c:	28 2f       	mov	r18, r24
    1b3e:	30 e0       	ldi	r19, 0x00	; 0
    1b40:	81 e0       	ldi	r24, 0x01	; 1
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	02 2e       	mov	r0, r18
    1b46:	02 c0       	rjmp	.+4      	; 0x1b4c <DIO_VoidSetPinValue+0x1e8>
    1b48:	88 0f       	add	r24, r24
    1b4a:	99 1f       	adc	r25, r25
    1b4c:	0a 94       	dec	r0
    1b4e:	e2 f7       	brpl	.-8      	; 0x1b48 <DIO_VoidSetPinValue+0x1e4>
    1b50:	84 2b       	or	r24, r20
    1b52:	8c 93       	st	X, r24
    1b54:	14 c0       	rjmp	.+40     	; 0x1b7e <DIO_VoidSetPinValue+0x21a>
				break;
			case LOW:
				CLR_Bit(PORTD,Copy_u8PinNumber);
    1b56:	a2 e3       	ldi	r26, 0x32	; 50
    1b58:	b0 e0       	ldi	r27, 0x00	; 0
    1b5a:	e2 e3       	ldi	r30, 0x32	; 50
    1b5c:	f0 e0       	ldi	r31, 0x00	; 0
    1b5e:	80 81       	ld	r24, Z
    1b60:	48 2f       	mov	r20, r24
    1b62:	8a 81       	ldd	r24, Y+2	; 0x02
    1b64:	28 2f       	mov	r18, r24
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	81 e0       	ldi	r24, 0x01	; 1
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	02 2e       	mov	r0, r18
    1b6e:	02 c0       	rjmp	.+4      	; 0x1b74 <DIO_VoidSetPinValue+0x210>
    1b70:	88 0f       	add	r24, r24
    1b72:	99 1f       	adc	r25, r25
    1b74:	0a 94       	dec	r0
    1b76:	e2 f7       	brpl	.-8      	; 0x1b70 <DIO_VoidSetPinValue+0x20c>
    1b78:	80 95       	com	r24
    1b7a:	84 23       	and	r24, r20
    1b7c:	8c 93       	st	X, r24
				break;}
		break;

	}
}
    1b7e:	2d 96       	adiw	r28, 0x0d	; 13
    1b80:	0f b6       	in	r0, 0x3f	; 63
    1b82:	f8 94       	cli
    1b84:	de bf       	out	0x3e, r29	; 62
    1b86:	0f be       	out	0x3f, r0	; 63
    1b88:	cd bf       	out	0x3d, r28	; 61
    1b8a:	cf 91       	pop	r28
    1b8c:	df 91       	pop	r29
    1b8e:	08 95       	ret

00001b90 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortName,u8 Copy_u8PinNumber){
    1b90:	df 93       	push	r29
    1b92:	cf 93       	push	r28
    1b94:	00 d0       	rcall	.+0      	; 0x1b96 <DIO_u8GetPinValue+0x6>
    1b96:	00 d0       	rcall	.+0      	; 0x1b98 <DIO_u8GetPinValue+0x8>
    1b98:	0f 92       	push	r0
    1b9a:	cd b7       	in	r28, 0x3d	; 61
    1b9c:	de b7       	in	r29, 0x3e	; 62
    1b9e:	8a 83       	std	Y+2, r24	; 0x02
    1ba0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8PinValue;
	switch(Copy_u8PortName){
    1ba2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba4:	28 2f       	mov	r18, r24
    1ba6:	30 e0       	ldi	r19, 0x00	; 0
    1ba8:	3d 83       	std	Y+5, r19	; 0x05
    1baa:	2c 83       	std	Y+4, r18	; 0x04
    1bac:	4c 81       	ldd	r20, Y+4	; 0x04
    1bae:	5d 81       	ldd	r21, Y+5	; 0x05
    1bb0:	41 30       	cpi	r20, 0x01	; 1
    1bb2:	51 05       	cpc	r21, r1
    1bb4:	41 f1       	breq	.+80     	; 0x1c06 <DIO_u8GetPinValue+0x76>
    1bb6:	8c 81       	ldd	r24, Y+4	; 0x04
    1bb8:	9d 81       	ldd	r25, Y+5	; 0x05
    1bba:	82 30       	cpi	r24, 0x02	; 2
    1bbc:	91 05       	cpc	r25, r1
    1bbe:	34 f4       	brge	.+12     	; 0x1bcc <DIO_u8GetPinValue+0x3c>
    1bc0:	2c 81       	ldd	r18, Y+4	; 0x04
    1bc2:	3d 81       	ldd	r19, Y+5	; 0x05
    1bc4:	21 15       	cp	r18, r1
    1bc6:	31 05       	cpc	r19, r1
    1bc8:	61 f0       	breq	.+24     	; 0x1be2 <DIO_u8GetPinValue+0x52>
    1bca:	52 c0       	rjmp	.+164    	; 0x1c70 <DIO_u8GetPinValue+0xe0>
    1bcc:	4c 81       	ldd	r20, Y+4	; 0x04
    1bce:	5d 81       	ldd	r21, Y+5	; 0x05
    1bd0:	42 30       	cpi	r20, 0x02	; 2
    1bd2:	51 05       	cpc	r21, r1
    1bd4:	51 f1       	breq	.+84     	; 0x1c2a <DIO_u8GetPinValue+0x9a>
    1bd6:	8c 81       	ldd	r24, Y+4	; 0x04
    1bd8:	9d 81       	ldd	r25, Y+5	; 0x05
    1bda:	83 30       	cpi	r24, 0x03	; 3
    1bdc:	91 05       	cpc	r25, r1
    1bde:	b9 f1       	breq	.+110    	; 0x1c4e <DIO_u8GetPinValue+0xbe>
    1be0:	47 c0       	rjmp	.+142    	; 0x1c70 <DIO_u8GetPinValue+0xe0>
	case DIO_PORTA:
		Local_u8PinValue = Get_Bit(PINA,Copy_u8PinNumber);
    1be2:	e9 e3       	ldi	r30, 0x39	; 57
    1be4:	f0 e0       	ldi	r31, 0x00	; 0
    1be6:	80 81       	ld	r24, Z
    1be8:	28 2f       	mov	r18, r24
    1bea:	30 e0       	ldi	r19, 0x00	; 0
    1bec:	8b 81       	ldd	r24, Y+3	; 0x03
    1bee:	88 2f       	mov	r24, r24
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	a9 01       	movw	r20, r18
    1bf4:	02 c0       	rjmp	.+4      	; 0x1bfa <DIO_u8GetPinValue+0x6a>
    1bf6:	55 95       	asr	r21
    1bf8:	47 95       	ror	r20
    1bfa:	8a 95       	dec	r24
    1bfc:	e2 f7       	brpl	.-8      	; 0x1bf6 <DIO_u8GetPinValue+0x66>
    1bfe:	ca 01       	movw	r24, r20
    1c00:	81 70       	andi	r24, 0x01	; 1
    1c02:	89 83       	std	Y+1, r24	; 0x01
    1c04:	35 c0       	rjmp	.+106    	; 0x1c70 <DIO_u8GetPinValue+0xe0>
		break;
	case DIO_PORTB:
		Local_u8PinValue = Get_Bit(PINB,Copy_u8PinNumber);
    1c06:	e6 e3       	ldi	r30, 0x36	; 54
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	80 81       	ld	r24, Z
    1c0c:	28 2f       	mov	r18, r24
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	8b 81       	ldd	r24, Y+3	; 0x03
    1c12:	88 2f       	mov	r24, r24
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	a9 01       	movw	r20, r18
    1c18:	02 c0       	rjmp	.+4      	; 0x1c1e <DIO_u8GetPinValue+0x8e>
    1c1a:	55 95       	asr	r21
    1c1c:	47 95       	ror	r20
    1c1e:	8a 95       	dec	r24
    1c20:	e2 f7       	brpl	.-8      	; 0x1c1a <DIO_u8GetPinValue+0x8a>
    1c22:	ca 01       	movw	r24, r20
    1c24:	81 70       	andi	r24, 0x01	; 1
    1c26:	89 83       	std	Y+1, r24	; 0x01
    1c28:	23 c0       	rjmp	.+70     	; 0x1c70 <DIO_u8GetPinValue+0xe0>
		break;
	case DIO_PORTC:
		Local_u8PinValue = Get_Bit(PINC,Copy_u8PinNumber);
    1c2a:	e3 e3       	ldi	r30, 0x33	; 51
    1c2c:	f0 e0       	ldi	r31, 0x00	; 0
    1c2e:	80 81       	ld	r24, Z
    1c30:	28 2f       	mov	r18, r24
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	8b 81       	ldd	r24, Y+3	; 0x03
    1c36:	88 2f       	mov	r24, r24
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	a9 01       	movw	r20, r18
    1c3c:	02 c0       	rjmp	.+4      	; 0x1c42 <DIO_u8GetPinValue+0xb2>
    1c3e:	55 95       	asr	r21
    1c40:	47 95       	ror	r20
    1c42:	8a 95       	dec	r24
    1c44:	e2 f7       	brpl	.-8      	; 0x1c3e <DIO_u8GetPinValue+0xae>
    1c46:	ca 01       	movw	r24, r20
    1c48:	81 70       	andi	r24, 0x01	; 1
    1c4a:	89 83       	std	Y+1, r24	; 0x01
    1c4c:	11 c0       	rjmp	.+34     	; 0x1c70 <DIO_u8GetPinValue+0xe0>
		break;
	case DIO_PORTD:
		Local_u8PinValue = Get_Bit(PIND,Copy_u8PinNumber);
    1c4e:	e0 e3       	ldi	r30, 0x30	; 48
    1c50:	f0 e0       	ldi	r31, 0x00	; 0
    1c52:	80 81       	ld	r24, Z
    1c54:	28 2f       	mov	r18, r24
    1c56:	30 e0       	ldi	r19, 0x00	; 0
    1c58:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5a:	88 2f       	mov	r24, r24
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	a9 01       	movw	r20, r18
    1c60:	02 c0       	rjmp	.+4      	; 0x1c66 <DIO_u8GetPinValue+0xd6>
    1c62:	55 95       	asr	r21
    1c64:	47 95       	ror	r20
    1c66:	8a 95       	dec	r24
    1c68:	e2 f7       	brpl	.-8      	; 0x1c62 <DIO_u8GetPinValue+0xd2>
    1c6a:	ca 01       	movw	r24, r20
    1c6c:	81 70       	andi	r24, 0x01	; 1
    1c6e:	89 83       	std	Y+1, r24	; 0x01
			break;
	}


	return Local_u8PinValue;
    1c70:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c72:	0f 90       	pop	r0
    1c74:	0f 90       	pop	r0
    1c76:	0f 90       	pop	r0
    1c78:	0f 90       	pop	r0
    1c7a:	0f 90       	pop	r0
    1c7c:	cf 91       	pop	r28
    1c7e:	df 91       	pop	r29
    1c80:	08 95       	ret

00001c82 <DIO_VoidSetPortDirection>:


void DIO_VoidSetPortDirection(u8 Copy_u8PortName, u8 Copy_u8PortDirection){
    1c82:	df 93       	push	r29
    1c84:	cf 93       	push	r28
    1c86:	00 d0       	rcall	.+0      	; 0x1c88 <DIO_VoidSetPortDirection+0x6>
    1c88:	00 d0       	rcall	.+0      	; 0x1c8a <DIO_VoidSetPortDirection+0x8>
    1c8a:	00 d0       	rcall	.+0      	; 0x1c8c <DIO_VoidSetPortDirection+0xa>
    1c8c:	cd b7       	in	r28, 0x3d	; 61
    1c8e:	de b7       	in	r29, 0x3e	; 62
    1c90:	8b 83       	std	Y+3, r24	; 0x03
    1c92:	6c 83       	std	Y+4, r22	; 0x04
	u8* SelPort = 0x00;
    1c94:	1a 82       	std	Y+2, r1	; 0x02
    1c96:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8PortName){
    1c98:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9a:	28 2f       	mov	r18, r24
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
    1c9e:	3e 83       	std	Y+6, r19	; 0x06
    1ca0:	2d 83       	std	Y+5, r18	; 0x05
    1ca2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ca6:	81 30       	cpi	r24, 0x01	; 1
    1ca8:	91 05       	cpc	r25, r1
    1caa:	d1 f0       	breq	.+52     	; 0x1ce0 <DIO_VoidSetPortDirection+0x5e>
    1cac:	2d 81       	ldd	r18, Y+5	; 0x05
    1cae:	3e 81       	ldd	r19, Y+6	; 0x06
    1cb0:	22 30       	cpi	r18, 0x02	; 2
    1cb2:	31 05       	cpc	r19, r1
    1cb4:	2c f4       	brge	.+10     	; 0x1cc0 <DIO_VoidSetPortDirection+0x3e>
    1cb6:	8d 81       	ldd	r24, Y+5	; 0x05
    1cb8:	9e 81       	ldd	r25, Y+6	; 0x06
    1cba:	00 97       	sbiw	r24, 0x00	; 0
    1cbc:	61 f0       	breq	.+24     	; 0x1cd6 <DIO_VoidSetPortDirection+0x54>
    1cbe:	1e c0       	rjmp	.+60     	; 0x1cfc <DIO_VoidSetPortDirection+0x7a>
    1cc0:	2d 81       	ldd	r18, Y+5	; 0x05
    1cc2:	3e 81       	ldd	r19, Y+6	; 0x06
    1cc4:	22 30       	cpi	r18, 0x02	; 2
    1cc6:	31 05       	cpc	r19, r1
    1cc8:	81 f0       	breq	.+32     	; 0x1cea <DIO_VoidSetPortDirection+0x68>
    1cca:	8d 81       	ldd	r24, Y+5	; 0x05
    1ccc:	9e 81       	ldd	r25, Y+6	; 0x06
    1cce:	83 30       	cpi	r24, 0x03	; 3
    1cd0:	91 05       	cpc	r25, r1
    1cd2:	81 f0       	breq	.+32     	; 0x1cf4 <DIO_VoidSetPortDirection+0x72>
    1cd4:	13 c0       	rjmp	.+38     	; 0x1cfc <DIO_VoidSetPortDirection+0x7a>
		case DIO_PORTA:
			SelPort = &DDRA;
    1cd6:	8a e3       	ldi	r24, 0x3A	; 58
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	9a 83       	std	Y+2, r25	; 0x02
    1cdc:	89 83       	std	Y+1, r24	; 0x01
    1cde:	0e c0       	rjmp	.+28     	; 0x1cfc <DIO_VoidSetPortDirection+0x7a>
			break;
		case DIO_PORTB:
			SelPort = &DDRB;
    1ce0:	87 e3       	ldi	r24, 0x37	; 55
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	9a 83       	std	Y+2, r25	; 0x02
    1ce6:	89 83       	std	Y+1, r24	; 0x01
    1ce8:	09 c0       	rjmp	.+18     	; 0x1cfc <DIO_VoidSetPortDirection+0x7a>
			break;
		case DIO_PORTC:
			SelPort = &DDRC;
    1cea:	84 e3       	ldi	r24, 0x34	; 52
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	9a 83       	std	Y+2, r25	; 0x02
    1cf0:	89 83       	std	Y+1, r24	; 0x01
    1cf2:	04 c0       	rjmp	.+8      	; 0x1cfc <DIO_VoidSetPortDirection+0x7a>
			break;
		case DIO_PORTD:
			SelPort = &DDRD;
    1cf4:	81 e3       	ldi	r24, 0x31	; 49
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	9a 83       	std	Y+2, r25	; 0x02
    1cfa:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	* SelPort = Copy_u8PortDirection;
    1cfc:	e9 81       	ldd	r30, Y+1	; 0x01
    1cfe:	fa 81       	ldd	r31, Y+2	; 0x02
    1d00:	8c 81       	ldd	r24, Y+4	; 0x04
    1d02:	80 83       	st	Z, r24
}
    1d04:	26 96       	adiw	r28, 0x06	; 6
    1d06:	0f b6       	in	r0, 0x3f	; 63
    1d08:	f8 94       	cli
    1d0a:	de bf       	out	0x3e, r29	; 62
    1d0c:	0f be       	out	0x3f, r0	; 63
    1d0e:	cd bf       	out	0x3d, r28	; 61
    1d10:	cf 91       	pop	r28
    1d12:	df 91       	pop	r29
    1d14:	08 95       	ret

00001d16 <DIO_VoidSetPortValue>:

void DIO_VoidSetPortValue(u8 Copy_u8PortName, u8 Copy_u8PortValue){
    1d16:	df 93       	push	r29
    1d18:	cf 93       	push	r28
    1d1a:	00 d0       	rcall	.+0      	; 0x1d1c <DIO_VoidSetPortValue+0x6>
    1d1c:	00 d0       	rcall	.+0      	; 0x1d1e <DIO_VoidSetPortValue+0x8>
    1d1e:	00 d0       	rcall	.+0      	; 0x1d20 <DIO_VoidSetPortValue+0xa>
    1d20:	cd b7       	in	r28, 0x3d	; 61
    1d22:	de b7       	in	r29, 0x3e	; 62
    1d24:	8b 83       	std	Y+3, r24	; 0x03
    1d26:	6c 83       	std	Y+4, r22	; 0x04
	u8* SelPort = 0x00;
    1d28:	1a 82       	std	Y+2, r1	; 0x02
    1d2a:	19 82       	std	Y+1, r1	; 0x01
		switch(Copy_u8PortName){
    1d2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2e:	28 2f       	mov	r18, r24
    1d30:	30 e0       	ldi	r19, 0x00	; 0
    1d32:	3e 83       	std	Y+6, r19	; 0x06
    1d34:	2d 83       	std	Y+5, r18	; 0x05
    1d36:	8d 81       	ldd	r24, Y+5	; 0x05
    1d38:	9e 81       	ldd	r25, Y+6	; 0x06
    1d3a:	81 30       	cpi	r24, 0x01	; 1
    1d3c:	91 05       	cpc	r25, r1
    1d3e:	d1 f0       	breq	.+52     	; 0x1d74 <DIO_VoidSetPortValue+0x5e>
    1d40:	2d 81       	ldd	r18, Y+5	; 0x05
    1d42:	3e 81       	ldd	r19, Y+6	; 0x06
    1d44:	22 30       	cpi	r18, 0x02	; 2
    1d46:	31 05       	cpc	r19, r1
    1d48:	2c f4       	brge	.+10     	; 0x1d54 <DIO_VoidSetPortValue+0x3e>
    1d4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d4e:	00 97       	sbiw	r24, 0x00	; 0
    1d50:	61 f0       	breq	.+24     	; 0x1d6a <DIO_VoidSetPortValue+0x54>
    1d52:	1e c0       	rjmp	.+60     	; 0x1d90 <DIO_VoidSetPortValue+0x7a>
    1d54:	2d 81       	ldd	r18, Y+5	; 0x05
    1d56:	3e 81       	ldd	r19, Y+6	; 0x06
    1d58:	22 30       	cpi	r18, 0x02	; 2
    1d5a:	31 05       	cpc	r19, r1
    1d5c:	81 f0       	breq	.+32     	; 0x1d7e <DIO_VoidSetPortValue+0x68>
    1d5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d60:	9e 81       	ldd	r25, Y+6	; 0x06
    1d62:	83 30       	cpi	r24, 0x03	; 3
    1d64:	91 05       	cpc	r25, r1
    1d66:	81 f0       	breq	.+32     	; 0x1d88 <DIO_VoidSetPortValue+0x72>
    1d68:	13 c0       	rjmp	.+38     	; 0x1d90 <DIO_VoidSetPortValue+0x7a>
			case DIO_PORTA:
				SelPort = &PORTA;
    1d6a:	8b e3       	ldi	r24, 0x3B	; 59
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	9a 83       	std	Y+2, r25	; 0x02
    1d70:	89 83       	std	Y+1, r24	; 0x01
    1d72:	0e c0       	rjmp	.+28     	; 0x1d90 <DIO_VoidSetPortValue+0x7a>
				break;
			case DIO_PORTB:
				SelPort = &PORTB;
    1d74:	88 e3       	ldi	r24, 0x38	; 56
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	9a 83       	std	Y+2, r25	; 0x02
    1d7a:	89 83       	std	Y+1, r24	; 0x01
    1d7c:	09 c0       	rjmp	.+18     	; 0x1d90 <DIO_VoidSetPortValue+0x7a>
				break;
			case DIO_PORTC:
				SelPort = &PORTC;
    1d7e:	85 e3       	ldi	r24, 0x35	; 53
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	9a 83       	std	Y+2, r25	; 0x02
    1d84:	89 83       	std	Y+1, r24	; 0x01
    1d86:	04 c0       	rjmp	.+8      	; 0x1d90 <DIO_VoidSetPortValue+0x7a>
				break;
			case DIO_PORTD:
				SelPort = &PORTD;
    1d88:	82 e3       	ldi	r24, 0x32	; 50
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	9a 83       	std	Y+2, r25	; 0x02
    1d8e:	89 83       	std	Y+1, r24	; 0x01
				break;
		}
		* SelPort = Copy_u8PortValue;
    1d90:	e9 81       	ldd	r30, Y+1	; 0x01
    1d92:	fa 81       	ldd	r31, Y+2	; 0x02
    1d94:	8c 81       	ldd	r24, Y+4	; 0x04
    1d96:	80 83       	st	Z, r24
}
    1d98:	26 96       	adiw	r28, 0x06	; 6
    1d9a:	0f b6       	in	r0, 0x3f	; 63
    1d9c:	f8 94       	cli
    1d9e:	de bf       	out	0x3e, r29	; 62
    1da0:	0f be       	out	0x3f, r0	; 63
    1da2:	cd bf       	out	0x3d, r28	; 61
    1da4:	cf 91       	pop	r28
    1da6:	df 91       	pop	r29
    1da8:	08 95       	ret

00001daa <ADC_VoidInit>:
#include"../../LIB/BIT_MATH.h"
#include"../../LIB/STD_Type.h"

#include"ADC_Interface.h"

void ADC_VoidInit(void){
    1daa:	df 93       	push	r29
    1dac:	cf 93       	push	r28
    1dae:	cd b7       	in	r28, 0x3d	; 61
    1db0:	de b7       	in	r29, 0x3e	; 62
	//set reference voltage ===> AVCC
	Set_Bit(ADMUX,6);
    1db2:	a7 e2       	ldi	r26, 0x27	; 39
    1db4:	b0 e0       	ldi	r27, 0x00	; 0
    1db6:	e7 e2       	ldi	r30, 0x27	; 39
    1db8:	f0 e0       	ldi	r31, 0x00	; 0
    1dba:	80 81       	ld	r24, Z
    1dbc:	80 64       	ori	r24, 0x40	; 64
    1dbe:	8c 93       	st	X, r24
	CLR_Bit(ADMUX,7);
    1dc0:	a7 e2       	ldi	r26, 0x27	; 39
    1dc2:	b0 e0       	ldi	r27, 0x00	; 0
    1dc4:	e7 e2       	ldi	r30, 0x27	; 39
    1dc6:	f0 e0       	ldi	r31, 0x00	; 0
    1dc8:	80 81       	ld	r24, Z
    1dca:	8f 77       	andi	r24, 0x7F	; 127
    1dcc:	8c 93       	st	X, r24

	//set left adjustment
	Set_Bit(ADMUX,5);
    1dce:	a7 e2       	ldi	r26, 0x27	; 39
    1dd0:	b0 e0       	ldi	r27, 0x00	; 0
    1dd2:	e7 e2       	ldi	r30, 0x27	; 39
    1dd4:	f0 e0       	ldi	r31, 0x00	; 0
    1dd6:	80 81       	ld	r24, Z
    1dd8:	80 62       	ori	r24, 0x20	; 32
    1dda:	8c 93       	st	X, r24

	//set ADC Prescaller  ===> 64
	CLR_Bit(ADCSRA,0);
    1ddc:	a6 e2       	ldi	r26, 0x26	; 38
    1dde:	b0 e0       	ldi	r27, 0x00	; 0
    1de0:	e6 e2       	ldi	r30, 0x26	; 38
    1de2:	f0 e0       	ldi	r31, 0x00	; 0
    1de4:	80 81       	ld	r24, Z
    1de6:	8e 7f       	andi	r24, 0xFE	; 254
    1de8:	8c 93       	st	X, r24
	Set_Bit(ADCSRA,1);
    1dea:	a6 e2       	ldi	r26, 0x26	; 38
    1dec:	b0 e0       	ldi	r27, 0x00	; 0
    1dee:	e6 e2       	ldi	r30, 0x26	; 38
    1df0:	f0 e0       	ldi	r31, 0x00	; 0
    1df2:	80 81       	ld	r24, Z
    1df4:	82 60       	ori	r24, 0x02	; 2
    1df6:	8c 93       	st	X, r24
	Set_Bit(ADCSRA,2);
    1df8:	a6 e2       	ldi	r26, 0x26	; 38
    1dfa:	b0 e0       	ldi	r27, 0x00	; 0
    1dfc:	e6 e2       	ldi	r30, 0x26	; 38
    1dfe:	f0 e0       	ldi	r31, 0x00	; 0
    1e00:	80 81       	ld	r24, Z
    1e02:	84 60       	ori	r24, 0x04	; 4
    1e04:	8c 93       	st	X, r24

	//Enable ADC
	Set_Bit(ADCSRA,7);
    1e06:	a6 e2       	ldi	r26, 0x26	; 38
    1e08:	b0 e0       	ldi	r27, 0x00	; 0
    1e0a:	e6 e2       	ldi	r30, 0x26	; 38
    1e0c:	f0 e0       	ldi	r31, 0x00	; 0
    1e0e:	80 81       	ld	r24, Z
    1e10:	80 68       	ori	r24, 0x80	; 128
    1e12:	8c 93       	st	X, r24


}
    1e14:	cf 91       	pop	r28
    1e16:	df 91       	pop	r29
    1e18:	08 95       	ret

00001e1a <ADC_u8StartConversion>:

u8 ADC_u8StartConversion(u8 Copy_u8ChannelNumber){
    1e1a:	df 93       	push	r29
    1e1c:	cf 93       	push	r28
    1e1e:	0f 92       	push	r0
    1e20:	cd b7       	in	r28, 0x3d	; 61
    1e22:	de b7       	in	r29, 0x3e	; 62
    1e24:	89 83       	std	Y+1, r24	; 0x01
	//ADC Channel Select
	ADMUX&=0b11100000;
    1e26:	a7 e2       	ldi	r26, 0x27	; 39
    1e28:	b0 e0       	ldi	r27, 0x00	; 0
    1e2a:	e7 e2       	ldi	r30, 0x27	; 39
    1e2c:	f0 e0       	ldi	r31, 0x00	; 0
    1e2e:	80 81       	ld	r24, Z
    1e30:	80 7e       	andi	r24, 0xE0	; 224
    1e32:	8c 93       	st	X, r24
	ADMUX|=Copy_u8ChannelNumber;
    1e34:	a7 e2       	ldi	r26, 0x27	; 39
    1e36:	b0 e0       	ldi	r27, 0x00	; 0
    1e38:	e7 e2       	ldi	r30, 0x27	; 39
    1e3a:	f0 e0       	ldi	r31, 0x00	; 0
    1e3c:	90 81       	ld	r25, Z
    1e3e:	89 81       	ldd	r24, Y+1	; 0x01
    1e40:	89 2b       	or	r24, r25
    1e42:	8c 93       	st	X, r24

	//ADC Start Conversion
	Set_Bit(ADCSRA,6);
    1e44:	a6 e2       	ldi	r26, 0x26	; 38
    1e46:	b0 e0       	ldi	r27, 0x00	; 0
    1e48:	e6 e2       	ldi	r30, 0x26	; 38
    1e4a:	f0 e0       	ldi	r31, 0x00	; 0
    1e4c:	80 81       	ld	r24, Z
    1e4e:	80 64       	ori	r24, 0x40	; 64
    1e50:	8c 93       	st	X, r24

	//wait until conversion is completed
	while(!Get_Bit(ADCSRA,4));
    1e52:	e6 e2       	ldi	r30, 0x26	; 38
    1e54:	f0 e0       	ldi	r31, 0x00	; 0
    1e56:	80 81       	ld	r24, Z
    1e58:	82 95       	swap	r24
    1e5a:	8f 70       	andi	r24, 0x0F	; 15
    1e5c:	88 2f       	mov	r24, r24
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	81 70       	andi	r24, 0x01	; 1
    1e62:	90 70       	andi	r25, 0x00	; 0
    1e64:	00 97       	sbiw	r24, 0x00	; 0
    1e66:	a9 f3       	breq	.-22     	; 0x1e52 <ADC_u8StartConversion+0x38>

	//Clear Flag
	Set_Bit(ADCSRA,4);
    1e68:	a6 e2       	ldi	r26, 0x26	; 38
    1e6a:	b0 e0       	ldi	r27, 0x00	; 0
    1e6c:	e6 e2       	ldi	r30, 0x26	; 38
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	80 81       	ld	r24, Z
    1e72:	80 61       	ori	r24, 0x10	; 16
    1e74:	8c 93       	st	X, r24

	//return value from ADCH
	return ADCH;
    1e76:	e5 e2       	ldi	r30, 0x25	; 37
    1e78:	f0 e0       	ldi	r31, 0x00	; 0
    1e7a:	80 81       	ld	r24, Z
}
    1e7c:	0f 90       	pop	r0
    1e7e:	cf 91       	pop	r28
    1e80:	df 91       	pop	r29
    1e82:	08 95       	ret

00001e84 <Servo_VoidInit>:
#include"../../LIB/STD_Type.h"

#include"../../MCAL/TIMER/TIMER_Interface.h"
 u16 Ticks=0;

 void Servo_VoidInit(void){
    1e84:	df 93       	push	r29
    1e86:	cf 93       	push	r28
    1e88:	cd b7       	in	r28, 0x3d	; 61
    1e8a:	de b7       	in	r29, 0x3e	; 62
		TIMER_VoidTimer1Init(PWM,10);
    1e8c:	82 e0       	ldi	r24, 0x02	; 2
    1e8e:	6a e0       	ldi	r22, 0x0A	; 10
    1e90:	0e 94 23 08 	call	0x1046	; 0x1046 <TIMER_VoidTimer1Init>
		TIMER_VoidSetOverFlow(20000);
    1e94:	80 e2       	ldi	r24, 0x20	; 32
    1e96:	9e e4       	ldi	r25, 0x4E	; 78
    1e98:	0e 94 c8 08 	call	0x1190	; 0x1190 <TIMER_VoidSetOverFlow>
 }
    1e9c:	cf 91       	pop	r28
    1e9e:	df 91       	pop	r29
    1ea0:	08 95       	ret

00001ea2 <Servo_VoidDegree>:

void Servo_VoidDegree(u8 Copy_u8Degree){
    1ea2:	df 93       	push	r29
    1ea4:	cf 93       	push	r28
    1ea6:	00 d0       	rcall	.+0      	; 0x1ea8 <Servo_VoidDegree+0x6>
    1ea8:	00 d0       	rcall	.+0      	; 0x1eaa <Servo_VoidDegree+0x8>
    1eaa:	0f 92       	push	r0
    1eac:	cd b7       	in	r28, 0x3d	; 61
    1eae:	de b7       	in	r29, 0x3e	; 62
    1eb0:	8d 83       	std	Y+5, r24	; 0x05
	if(Copy_u8Degree>180)
    1eb2:	8d 81       	ldd	r24, Y+5	; 0x05
    1eb4:	85 3b       	cpi	r24, 0xB5	; 181
    1eb6:	10 f0       	brcs	.+4      	; 0x1ebc <Servo_VoidDegree+0x1a>
		Copy_u8Degree = 180;
    1eb8:	84 eb       	ldi	r24, 0xB4	; 180
    1eba:	8d 83       	std	Y+5, r24	; 0x05
	f32 Ton = (1/180.0) * Copy_u8Degree + 1;
    1ebc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ebe:	88 2f       	mov	r24, r24
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	aa 27       	eor	r26, r26
    1ec4:	97 fd       	sbrc	r25, 7
    1ec6:	a0 95       	com	r26
    1ec8:	ba 2f       	mov	r27, r26
    1eca:	bc 01       	movw	r22, r24
    1ecc:	cd 01       	movw	r24, r26
    1ece:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    1ed2:	dc 01       	movw	r26, r24
    1ed4:	cb 01       	movw	r24, r22
    1ed6:	bc 01       	movw	r22, r24
    1ed8:	cd 01       	movw	r24, r26
    1eda:	21 e6       	ldi	r18, 0x61	; 97
    1edc:	3b e0       	ldi	r19, 0x0B	; 11
    1ede:	46 eb       	ldi	r20, 0xB6	; 182
    1ee0:	5b e3       	ldi	r21, 0x3B	; 59
    1ee2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ee6:	dc 01       	movw	r26, r24
    1ee8:	cb 01       	movw	r24, r22
    1eea:	bc 01       	movw	r22, r24
    1eec:	cd 01       	movw	r24, r26
    1eee:	20 e0       	ldi	r18, 0x00	; 0
    1ef0:	30 e0       	ldi	r19, 0x00	; 0
    1ef2:	40 e8       	ldi	r20, 0x80	; 128
    1ef4:	5f e3       	ldi	r21, 0x3F	; 63
    1ef6:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1efa:	dc 01       	movw	r26, r24
    1efc:	cb 01       	movw	r24, r22
    1efe:	89 83       	std	Y+1, r24	; 0x01
    1f00:	9a 83       	std	Y+2, r25	; 0x02
    1f02:	ab 83       	std	Y+3, r26	; 0x03
    1f04:	bc 83       	std	Y+4, r27	; 0x04
	Ticks = Ton * 1000;
    1f06:	69 81       	ldd	r22, Y+1	; 0x01
    1f08:	7a 81       	ldd	r23, Y+2	; 0x02
    1f0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f0e:	20 e0       	ldi	r18, 0x00	; 0
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	4a e7       	ldi	r20, 0x7A	; 122
    1f14:	54 e4       	ldi	r21, 0x44	; 68
    1f16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f1a:	dc 01       	movw	r26, r24
    1f1c:	cb 01       	movw	r24, r22
    1f1e:	bc 01       	movw	r22, r24
    1f20:	cd 01       	movw	r24, r26
    1f22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f26:	dc 01       	movw	r26, r24
    1f28:	cb 01       	movw	r24, r22
    1f2a:	90 93 a4 01 	sts	0x01A4, r25
    1f2e:	80 93 a3 01 	sts	0x01A3, r24
	TIMER_VoidTimer1ChannelASetCompareValue(Ticks);
    1f32:	80 91 a3 01 	lds	r24, 0x01A3
    1f36:	90 91 a4 01 	lds	r25, 0x01A4
    1f3a:	0e 94 da 08 	call	0x11b4	; 0x11b4 <TIMER_VoidTimer1ChannelASetCompareValue>
}
    1f3e:	0f 90       	pop	r0
    1f40:	0f 90       	pop	r0
    1f42:	0f 90       	pop	r0
    1f44:	0f 90       	pop	r0
    1f46:	0f 90       	pop	r0
    1f48:	cf 91       	pop	r28
    1f4a:	df 91       	pop	r29
    1f4c:	08 95       	ret

00001f4e <Servo_VoidReset>:

void Servo_VoidReset(void){
    1f4e:	df 93       	push	r29
    1f50:	cf 93       	push	r28
    1f52:	cd b7       	in	r28, 0x3d	; 61
    1f54:	de b7       	in	r29, 0x3e	; 62
	TIMER_VoidTimer1ChannelASetCompareValue(0);
    1f56:	80 e0       	ldi	r24, 0x00	; 0
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	0e 94 da 08 	call	0x11b4	; 0x11b4 <TIMER_VoidTimer1ChannelASetCompareValue>
}
    1f5e:	cf 91       	pop	r28
    1f60:	df 91       	pop	r29
    1f62:	08 95       	ret

00001f64 <Servo_u16GetTicks>:

u16 Servo_u16GetTicks(void){
    1f64:	df 93       	push	r29
    1f66:	cf 93       	push	r28
    1f68:	cd b7       	in	r28, 0x3d	; 61
    1f6a:	de b7       	in	r29, 0x3e	; 62
	return Ticks;
    1f6c:	80 91 a3 01 	lds	r24, 0x01A3
    1f70:	90 91 a4 01 	lds	r25, 0x01A4
}
    1f74:	cf 91       	pop	r28
    1f76:	df 91       	pop	r29
    1f78:	08 95       	ret

00001f7a <LCD_VoidSendData>:
#include"../../LIB/BIT_MATH.h"
#include"../../MCAL/Driver_DIO_V1/DIO_Interface.h"
#include"LCD_Interface.h"


void LCD_VoidSendData(u8 Copy_u8Data){
    1f7a:	df 93       	push	r29
    1f7c:	cf 93       	push	r28
    1f7e:	cd b7       	in	r28, 0x3d	; 61
    1f80:	de b7       	in	r29, 0x3e	; 62
    1f82:	2f 97       	sbiw	r28, 0x0f	; 15
    1f84:	0f b6       	in	r0, 0x3f	; 63
    1f86:	f8 94       	cli
    1f88:	de bf       	out	0x3e, r29	; 62
    1f8a:	0f be       	out	0x3f, r0	; 63
    1f8c:	cd bf       	out	0x3d, r28	; 61
    1f8e:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_VoidSetPinValue(LCD_RS_PORT,LCD_RS_PIN,HIGH);//Send Command
    1f90:	83 e0       	ldi	r24, 0x03	; 3
    1f92:	60 e0       	ldi	r22, 0x00	; 0
    1f94:	41 e0       	ldi	r20, 0x01	; 1
    1f96:	0e 94 b2 0c 	call	0x1964	; 0x1964 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(LCD_RW_PORT,LCD_RW_PIN,LOW); //Write
    1f9a:	83 e0       	ldi	r24, 0x03	; 3
    1f9c:	61 e0       	ldi	r22, 0x01	; 1
    1f9e:	40 e0       	ldi	r20, 0x00	; 0
    1fa0:	0e 94 b2 0c 	call	0x1964	; 0x1964 <DIO_VoidSetPinValue>
	DIO_VoidSetPortValue(LCD_DATA_PORT,Copy_u8Data);
    1fa4:	82 e0       	ldi	r24, 0x02	; 2
    1fa6:	6f 85       	ldd	r22, Y+15	; 0x0f
    1fa8:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <DIO_VoidSetPortValue>

	DIO_VoidSetPinValue(LCD_EN_PORT,LCD_EN_PIN,HIGH);
    1fac:	83 e0       	ldi	r24, 0x03	; 3
    1fae:	62 e0       	ldi	r22, 0x02	; 2
    1fb0:	41 e0       	ldi	r20, 0x01	; 1
    1fb2:	0e 94 b2 0c 	call	0x1964	; 0x1964 <DIO_VoidSetPinValue>
    1fb6:	80 e0       	ldi	r24, 0x00	; 0
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	a0 e0       	ldi	r26, 0x00	; 0
    1fbc:	b0 e4       	ldi	r27, 0x40	; 64
    1fbe:	8b 87       	std	Y+11, r24	; 0x0b
    1fc0:	9c 87       	std	Y+12, r25	; 0x0c
    1fc2:	ad 87       	std	Y+13, r26	; 0x0d
    1fc4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fc6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fc8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fca:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fcc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fce:	20 e0       	ldi	r18, 0x00	; 0
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	4a ef       	ldi	r20, 0xFA	; 250
    1fd4:	54 e4       	ldi	r21, 0x44	; 68
    1fd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fda:	dc 01       	movw	r26, r24
    1fdc:	cb 01       	movw	r24, r22
    1fde:	8f 83       	std	Y+7, r24	; 0x07
    1fe0:	98 87       	std	Y+8, r25	; 0x08
    1fe2:	a9 87       	std	Y+9, r26	; 0x09
    1fe4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fe6:	6f 81       	ldd	r22, Y+7	; 0x07
    1fe8:	78 85       	ldd	r23, Y+8	; 0x08
    1fea:	89 85       	ldd	r24, Y+9	; 0x09
    1fec:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fee:	20 e0       	ldi	r18, 0x00	; 0
    1ff0:	30 e0       	ldi	r19, 0x00	; 0
    1ff2:	40 e8       	ldi	r20, 0x80	; 128
    1ff4:	5f e3       	ldi	r21, 0x3F	; 63
    1ff6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ffa:	88 23       	and	r24, r24
    1ffc:	2c f4       	brge	.+10     	; 0x2008 <LCD_VoidSendData+0x8e>
		__ticks = 1;
    1ffe:	81 e0       	ldi	r24, 0x01	; 1
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	9e 83       	std	Y+6, r25	; 0x06
    2004:	8d 83       	std	Y+5, r24	; 0x05
    2006:	3f c0       	rjmp	.+126    	; 0x2086 <LCD_VoidSendData+0x10c>
	else if (__tmp > 65535)
    2008:	6f 81       	ldd	r22, Y+7	; 0x07
    200a:	78 85       	ldd	r23, Y+8	; 0x08
    200c:	89 85       	ldd	r24, Y+9	; 0x09
    200e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2010:	20 e0       	ldi	r18, 0x00	; 0
    2012:	3f ef       	ldi	r19, 0xFF	; 255
    2014:	4f e7       	ldi	r20, 0x7F	; 127
    2016:	57 e4       	ldi	r21, 0x47	; 71
    2018:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    201c:	18 16       	cp	r1, r24
    201e:	4c f5       	brge	.+82     	; 0x2072 <LCD_VoidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2020:	6b 85       	ldd	r22, Y+11	; 0x0b
    2022:	7c 85       	ldd	r23, Y+12	; 0x0c
    2024:	8d 85       	ldd	r24, Y+13	; 0x0d
    2026:	9e 85       	ldd	r25, Y+14	; 0x0e
    2028:	20 e0       	ldi	r18, 0x00	; 0
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	40 e2       	ldi	r20, 0x20	; 32
    202e:	51 e4       	ldi	r21, 0x41	; 65
    2030:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2034:	dc 01       	movw	r26, r24
    2036:	cb 01       	movw	r24, r22
    2038:	bc 01       	movw	r22, r24
    203a:	cd 01       	movw	r24, r26
    203c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2040:	dc 01       	movw	r26, r24
    2042:	cb 01       	movw	r24, r22
    2044:	9e 83       	std	Y+6, r25	; 0x06
    2046:	8d 83       	std	Y+5, r24	; 0x05
    2048:	0f c0       	rjmp	.+30     	; 0x2068 <LCD_VoidSendData+0xee>
    204a:	88 ec       	ldi	r24, 0xC8	; 200
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	9c 83       	std	Y+4, r25	; 0x04
    2050:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2052:	8b 81       	ldd	r24, Y+3	; 0x03
    2054:	9c 81       	ldd	r25, Y+4	; 0x04
    2056:	01 97       	sbiw	r24, 0x01	; 1
    2058:	f1 f7       	brne	.-4      	; 0x2056 <LCD_VoidSendData+0xdc>
    205a:	9c 83       	std	Y+4, r25	; 0x04
    205c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    205e:	8d 81       	ldd	r24, Y+5	; 0x05
    2060:	9e 81       	ldd	r25, Y+6	; 0x06
    2062:	01 97       	sbiw	r24, 0x01	; 1
    2064:	9e 83       	std	Y+6, r25	; 0x06
    2066:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2068:	8d 81       	ldd	r24, Y+5	; 0x05
    206a:	9e 81       	ldd	r25, Y+6	; 0x06
    206c:	00 97       	sbiw	r24, 0x00	; 0
    206e:	69 f7       	brne	.-38     	; 0x204a <LCD_VoidSendData+0xd0>
    2070:	14 c0       	rjmp	.+40     	; 0x209a <LCD_VoidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2072:	6f 81       	ldd	r22, Y+7	; 0x07
    2074:	78 85       	ldd	r23, Y+8	; 0x08
    2076:	89 85       	ldd	r24, Y+9	; 0x09
    2078:	9a 85       	ldd	r25, Y+10	; 0x0a
    207a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    207e:	dc 01       	movw	r26, r24
    2080:	cb 01       	movw	r24, r22
    2082:	9e 83       	std	Y+6, r25	; 0x06
    2084:	8d 83       	std	Y+5, r24	; 0x05
    2086:	8d 81       	ldd	r24, Y+5	; 0x05
    2088:	9e 81       	ldd	r25, Y+6	; 0x06
    208a:	9a 83       	std	Y+2, r25	; 0x02
    208c:	89 83       	std	Y+1, r24	; 0x01
    208e:	89 81       	ldd	r24, Y+1	; 0x01
    2090:	9a 81       	ldd	r25, Y+2	; 0x02
    2092:	01 97       	sbiw	r24, 0x01	; 1
    2094:	f1 f7       	brne	.-4      	; 0x2092 <LCD_VoidSendData+0x118>
    2096:	9a 83       	std	Y+2, r25	; 0x02
    2098:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_VoidSetPinValue(LCD_EN_PORT,LCD_EN_PIN,LOW);
    209a:	83 e0       	ldi	r24, 0x03	; 3
    209c:	62 e0       	ldi	r22, 0x02	; 2
    209e:	40 e0       	ldi	r20, 0x00	; 0
    20a0:	0e 94 b2 0c 	call	0x1964	; 0x1964 <DIO_VoidSetPinValue>
}
    20a4:	2f 96       	adiw	r28, 0x0f	; 15
    20a6:	0f b6       	in	r0, 0x3f	; 63
    20a8:	f8 94       	cli
    20aa:	de bf       	out	0x3e, r29	; 62
    20ac:	0f be       	out	0x3f, r0	; 63
    20ae:	cd bf       	out	0x3d, r28	; 61
    20b0:	cf 91       	pop	r28
    20b2:	df 91       	pop	r29
    20b4:	08 95       	ret

000020b6 <LCD_VoidSendCommand>:

void LCD_VoidSendCommand(u8 Copy_u8Command){
    20b6:	df 93       	push	r29
    20b8:	cf 93       	push	r28
    20ba:	cd b7       	in	r28, 0x3d	; 61
    20bc:	de b7       	in	r29, 0x3e	; 62
    20be:	60 97       	sbiw	r28, 0x10	; 16
    20c0:	0f b6       	in	r0, 0x3f	; 63
    20c2:	f8 94       	cli
    20c4:	de bf       	out	0x3e, r29	; 62
    20c6:	0f be       	out	0x3f, r0	; 63
    20c8:	cd bf       	out	0x3d, r28	; 61
    20ca:	88 8b       	std	Y+16, r24	; 0x10
	DIO_VoidSetPinValue(LCD_RS_PORT,LCD_RS_PIN,LOW);//Send Command
    20cc:	83 e0       	ldi	r24, 0x03	; 3
    20ce:	60 e0       	ldi	r22, 0x00	; 0
    20d0:	40 e0       	ldi	r20, 0x00	; 0
    20d2:	0e 94 b2 0c 	call	0x1964	; 0x1964 <DIO_VoidSetPinValue>
		DIO_VoidSetPinValue(LCD_RW_PORT,LCD_RW_PIN,LOW); //Write
    20d6:	83 e0       	ldi	r24, 0x03	; 3
    20d8:	61 e0       	ldi	r22, 0x01	; 1
    20da:	40 e0       	ldi	r20, 0x00	; 0
    20dc:	0e 94 b2 0c 	call	0x1964	; 0x1964 <DIO_VoidSetPinValue>
		for(u8 i=0;i<8;i++){
    20e0:	1f 86       	std	Y+15, r1	; 0x0f
    20e2:	17 c0       	rjmp	.+46     	; 0x2112 <LCD_VoidSendCommand+0x5c>
			DIO_VoidSetPinValue(LCD_DATA_PORT,i,Get_Bit(Copy_u8Command,i));
    20e4:	88 89       	ldd	r24, Y+16	; 0x10
    20e6:	28 2f       	mov	r18, r24
    20e8:	30 e0       	ldi	r19, 0x00	; 0
    20ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    20ec:	88 2f       	mov	r24, r24
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	a9 01       	movw	r20, r18
    20f2:	02 c0       	rjmp	.+4      	; 0x20f8 <LCD_VoidSendCommand+0x42>
    20f4:	55 95       	asr	r21
    20f6:	47 95       	ror	r20
    20f8:	8a 95       	dec	r24
    20fa:	e2 f7       	brpl	.-8      	; 0x20f4 <LCD_VoidSendCommand+0x3e>
    20fc:	ca 01       	movw	r24, r20
    20fe:	98 2f       	mov	r25, r24
    2100:	91 70       	andi	r25, 0x01	; 1
    2102:	82 e0       	ldi	r24, 0x02	; 2
    2104:	6f 85       	ldd	r22, Y+15	; 0x0f
    2106:	49 2f       	mov	r20, r25
    2108:	0e 94 b2 0c 	call	0x1964	; 0x1964 <DIO_VoidSetPinValue>
}

void LCD_VoidSendCommand(u8 Copy_u8Command){
	DIO_VoidSetPinValue(LCD_RS_PORT,LCD_RS_PIN,LOW);//Send Command
		DIO_VoidSetPinValue(LCD_RW_PORT,LCD_RW_PIN,LOW); //Write
		for(u8 i=0;i<8;i++){
    210c:	8f 85       	ldd	r24, Y+15	; 0x0f
    210e:	8f 5f       	subi	r24, 0xFF	; 255
    2110:	8f 87       	std	Y+15, r24	; 0x0f
    2112:	8f 85       	ldd	r24, Y+15	; 0x0f
    2114:	88 30       	cpi	r24, 0x08	; 8
    2116:	30 f3       	brcs	.-52     	; 0x20e4 <LCD_VoidSendCommand+0x2e>
			DIO_VoidSetPinValue(LCD_DATA_PORT,i,Get_Bit(Copy_u8Command,i));
		}
		DIO_VoidSetPinValue(LCD_EN_PORT,LCD_EN_PIN,HIGH);
    2118:	83 e0       	ldi	r24, 0x03	; 3
    211a:	62 e0       	ldi	r22, 0x02	; 2
    211c:	41 e0       	ldi	r20, 0x01	; 1
    211e:	0e 94 b2 0c 	call	0x1964	; 0x1964 <DIO_VoidSetPinValue>
    2122:	80 e0       	ldi	r24, 0x00	; 0
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	a0 e0       	ldi	r26, 0x00	; 0
    2128:	b0 e4       	ldi	r27, 0x40	; 64
    212a:	8b 87       	std	Y+11, r24	; 0x0b
    212c:	9c 87       	std	Y+12, r25	; 0x0c
    212e:	ad 87       	std	Y+13, r26	; 0x0d
    2130:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2132:	6b 85       	ldd	r22, Y+11	; 0x0b
    2134:	7c 85       	ldd	r23, Y+12	; 0x0c
    2136:	8d 85       	ldd	r24, Y+13	; 0x0d
    2138:	9e 85       	ldd	r25, Y+14	; 0x0e
    213a:	20 e0       	ldi	r18, 0x00	; 0
    213c:	30 e0       	ldi	r19, 0x00	; 0
    213e:	4a ef       	ldi	r20, 0xFA	; 250
    2140:	54 e4       	ldi	r21, 0x44	; 68
    2142:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2146:	dc 01       	movw	r26, r24
    2148:	cb 01       	movw	r24, r22
    214a:	8f 83       	std	Y+7, r24	; 0x07
    214c:	98 87       	std	Y+8, r25	; 0x08
    214e:	a9 87       	std	Y+9, r26	; 0x09
    2150:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2152:	6f 81       	ldd	r22, Y+7	; 0x07
    2154:	78 85       	ldd	r23, Y+8	; 0x08
    2156:	89 85       	ldd	r24, Y+9	; 0x09
    2158:	9a 85       	ldd	r25, Y+10	; 0x0a
    215a:	20 e0       	ldi	r18, 0x00	; 0
    215c:	30 e0       	ldi	r19, 0x00	; 0
    215e:	40 e8       	ldi	r20, 0x80	; 128
    2160:	5f e3       	ldi	r21, 0x3F	; 63
    2162:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2166:	88 23       	and	r24, r24
    2168:	2c f4       	brge	.+10     	; 0x2174 <LCD_VoidSendCommand+0xbe>
		__ticks = 1;
    216a:	81 e0       	ldi	r24, 0x01	; 1
    216c:	90 e0       	ldi	r25, 0x00	; 0
    216e:	9e 83       	std	Y+6, r25	; 0x06
    2170:	8d 83       	std	Y+5, r24	; 0x05
    2172:	3f c0       	rjmp	.+126    	; 0x21f2 <LCD_VoidSendCommand+0x13c>
	else if (__tmp > 65535)
    2174:	6f 81       	ldd	r22, Y+7	; 0x07
    2176:	78 85       	ldd	r23, Y+8	; 0x08
    2178:	89 85       	ldd	r24, Y+9	; 0x09
    217a:	9a 85       	ldd	r25, Y+10	; 0x0a
    217c:	20 e0       	ldi	r18, 0x00	; 0
    217e:	3f ef       	ldi	r19, 0xFF	; 255
    2180:	4f e7       	ldi	r20, 0x7F	; 127
    2182:	57 e4       	ldi	r21, 0x47	; 71
    2184:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2188:	18 16       	cp	r1, r24
    218a:	4c f5       	brge	.+82     	; 0x21de <LCD_VoidSendCommand+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    218c:	6b 85       	ldd	r22, Y+11	; 0x0b
    218e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2190:	8d 85       	ldd	r24, Y+13	; 0x0d
    2192:	9e 85       	ldd	r25, Y+14	; 0x0e
    2194:	20 e0       	ldi	r18, 0x00	; 0
    2196:	30 e0       	ldi	r19, 0x00	; 0
    2198:	40 e2       	ldi	r20, 0x20	; 32
    219a:	51 e4       	ldi	r21, 0x41	; 65
    219c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a0:	dc 01       	movw	r26, r24
    21a2:	cb 01       	movw	r24, r22
    21a4:	bc 01       	movw	r22, r24
    21a6:	cd 01       	movw	r24, r26
    21a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ac:	dc 01       	movw	r26, r24
    21ae:	cb 01       	movw	r24, r22
    21b0:	9e 83       	std	Y+6, r25	; 0x06
    21b2:	8d 83       	std	Y+5, r24	; 0x05
    21b4:	0f c0       	rjmp	.+30     	; 0x21d4 <LCD_VoidSendCommand+0x11e>
    21b6:	88 ec       	ldi	r24, 0xC8	; 200
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	9c 83       	std	Y+4, r25	; 0x04
    21bc:	8b 83       	std	Y+3, r24	; 0x03
    21be:	8b 81       	ldd	r24, Y+3	; 0x03
    21c0:	9c 81       	ldd	r25, Y+4	; 0x04
    21c2:	01 97       	sbiw	r24, 0x01	; 1
    21c4:	f1 f7       	brne	.-4      	; 0x21c2 <LCD_VoidSendCommand+0x10c>
    21c6:	9c 83       	std	Y+4, r25	; 0x04
    21c8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ca:	8d 81       	ldd	r24, Y+5	; 0x05
    21cc:	9e 81       	ldd	r25, Y+6	; 0x06
    21ce:	01 97       	sbiw	r24, 0x01	; 1
    21d0:	9e 83       	std	Y+6, r25	; 0x06
    21d2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21d4:	8d 81       	ldd	r24, Y+5	; 0x05
    21d6:	9e 81       	ldd	r25, Y+6	; 0x06
    21d8:	00 97       	sbiw	r24, 0x00	; 0
    21da:	69 f7       	brne	.-38     	; 0x21b6 <LCD_VoidSendCommand+0x100>
    21dc:	14 c0       	rjmp	.+40     	; 0x2206 <LCD_VoidSendCommand+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21de:	6f 81       	ldd	r22, Y+7	; 0x07
    21e0:	78 85       	ldd	r23, Y+8	; 0x08
    21e2:	89 85       	ldd	r24, Y+9	; 0x09
    21e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    21e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ea:	dc 01       	movw	r26, r24
    21ec:	cb 01       	movw	r24, r22
    21ee:	9e 83       	std	Y+6, r25	; 0x06
    21f0:	8d 83       	std	Y+5, r24	; 0x05
    21f2:	8d 81       	ldd	r24, Y+5	; 0x05
    21f4:	9e 81       	ldd	r25, Y+6	; 0x06
    21f6:	9a 83       	std	Y+2, r25	; 0x02
    21f8:	89 83       	std	Y+1, r24	; 0x01
    21fa:	89 81       	ldd	r24, Y+1	; 0x01
    21fc:	9a 81       	ldd	r25, Y+2	; 0x02
    21fe:	01 97       	sbiw	r24, 0x01	; 1
    2200:	f1 f7       	brne	.-4      	; 0x21fe <LCD_VoidSendCommand+0x148>
    2202:	9a 83       	std	Y+2, r25	; 0x02
    2204:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		DIO_VoidSetPinValue(LCD_EN_PORT,LCD_EN_PIN,LOW);
    2206:	83 e0       	ldi	r24, 0x03	; 3
    2208:	62 e0       	ldi	r22, 0x02	; 2
    220a:	40 e0       	ldi	r20, 0x00	; 0
    220c:	0e 94 b2 0c 	call	0x1964	; 0x1964 <DIO_VoidSetPinValue>
}
    2210:	60 96       	adiw	r28, 0x10	; 16
    2212:	0f b6       	in	r0, 0x3f	; 63
    2214:	f8 94       	cli
    2216:	de bf       	out	0x3e, r29	; 62
    2218:	0f be       	out	0x3f, r0	; 63
    221a:	cd bf       	out	0x3d, r28	; 61
    221c:	cf 91       	pop	r28
    221e:	df 91       	pop	r29
    2220:	08 95       	ret

00002222 <LCD_VoidInit>:

void LCD_VoidInit(void){
    2222:	df 93       	push	r29
    2224:	cf 93       	push	r28
    2226:	cd b7       	in	r28, 0x3d	; 61
    2228:	de b7       	in	r29, 0x3e	; 62
    222a:	2e 97       	sbiw	r28, 0x0e	; 14
    222c:	0f b6       	in	r0, 0x3f	; 63
    222e:	f8 94       	cli
    2230:	de bf       	out	0x3e, r29	; 62
    2232:	0f be       	out	0x3f, r0	; 63
    2234:	cd bf       	out	0x3d, r28	; 61
		DIO_VoidSetPortDirection(LCD_DATA_PORT,0x11);
    2236:	82 e0       	ldi	r24, 0x02	; 2
    2238:	61 e1       	ldi	r22, 0x11	; 17
    223a:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <DIO_VoidSetPortDirection>
		DIO_VoidSetPinDirection(LCD_RS_PORT,LCD_RS_PIN,OUTPUT);
    223e:	83 e0       	ldi	r24, 0x03	; 3
    2240:	60 e0       	ldi	r22, 0x00	; 0
    2242:	41 e0       	ldi	r20, 0x01	; 1
    2244:	0e 94 9c 0b 	call	0x1738	; 0x1738 <DIO_VoidSetPinDirection>
		DIO_VoidSetPinDirection(LCD_RW_PORT,LCD_RW_PIN,OUTPUT);
    2248:	83 e0       	ldi	r24, 0x03	; 3
    224a:	61 e0       	ldi	r22, 0x01	; 1
    224c:	41 e0       	ldi	r20, 0x01	; 1
    224e:	0e 94 9c 0b 	call	0x1738	; 0x1738 <DIO_VoidSetPinDirection>
		DIO_VoidSetPinDirection(LCD_EN_PORT,LCD_EN_PIN,OUTPUT);
    2252:	83 e0       	ldi	r24, 0x03	; 3
    2254:	62 e0       	ldi	r22, 0x02	; 2
    2256:	41 e0       	ldi	r20, 0x01	; 1
    2258:	0e 94 9c 0b 	call	0x1738	; 0x1738 <DIO_VoidSetPinDirection>
    225c:	80 e0       	ldi	r24, 0x00	; 0
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	a0 e2       	ldi	r26, 0x20	; 32
    2262:	b2 e4       	ldi	r27, 0x42	; 66
    2264:	8b 87       	std	Y+11, r24	; 0x0b
    2266:	9c 87       	std	Y+12, r25	; 0x0c
    2268:	ad 87       	std	Y+13, r26	; 0x0d
    226a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    226c:	6b 85       	ldd	r22, Y+11	; 0x0b
    226e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2270:	8d 85       	ldd	r24, Y+13	; 0x0d
    2272:	9e 85       	ldd	r25, Y+14	; 0x0e
    2274:	20 e0       	ldi	r18, 0x00	; 0
    2276:	30 e0       	ldi	r19, 0x00	; 0
    2278:	4a ef       	ldi	r20, 0xFA	; 250
    227a:	54 e4       	ldi	r21, 0x44	; 68
    227c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2280:	dc 01       	movw	r26, r24
    2282:	cb 01       	movw	r24, r22
    2284:	8f 83       	std	Y+7, r24	; 0x07
    2286:	98 87       	std	Y+8, r25	; 0x08
    2288:	a9 87       	std	Y+9, r26	; 0x09
    228a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    228c:	6f 81       	ldd	r22, Y+7	; 0x07
    228e:	78 85       	ldd	r23, Y+8	; 0x08
    2290:	89 85       	ldd	r24, Y+9	; 0x09
    2292:	9a 85       	ldd	r25, Y+10	; 0x0a
    2294:	20 e0       	ldi	r18, 0x00	; 0
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	40 e8       	ldi	r20, 0x80	; 128
    229a:	5f e3       	ldi	r21, 0x3F	; 63
    229c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22a0:	88 23       	and	r24, r24
    22a2:	2c f4       	brge	.+10     	; 0x22ae <LCD_VoidInit+0x8c>
		__ticks = 1;
    22a4:	81 e0       	ldi	r24, 0x01	; 1
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	9e 83       	std	Y+6, r25	; 0x06
    22aa:	8d 83       	std	Y+5, r24	; 0x05
    22ac:	3f c0       	rjmp	.+126    	; 0x232c <LCD_VoidInit+0x10a>
	else if (__tmp > 65535)
    22ae:	6f 81       	ldd	r22, Y+7	; 0x07
    22b0:	78 85       	ldd	r23, Y+8	; 0x08
    22b2:	89 85       	ldd	r24, Y+9	; 0x09
    22b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    22b6:	20 e0       	ldi	r18, 0x00	; 0
    22b8:	3f ef       	ldi	r19, 0xFF	; 255
    22ba:	4f e7       	ldi	r20, 0x7F	; 127
    22bc:	57 e4       	ldi	r21, 0x47	; 71
    22be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22c2:	18 16       	cp	r1, r24
    22c4:	4c f5       	brge	.+82     	; 0x2318 <LCD_VoidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    22c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    22ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    22cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    22ce:	20 e0       	ldi	r18, 0x00	; 0
    22d0:	30 e0       	ldi	r19, 0x00	; 0
    22d2:	40 e2       	ldi	r20, 0x20	; 32
    22d4:	51 e4       	ldi	r21, 0x41	; 65
    22d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22da:	dc 01       	movw	r26, r24
    22dc:	cb 01       	movw	r24, r22
    22de:	bc 01       	movw	r22, r24
    22e0:	cd 01       	movw	r24, r26
    22e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e6:	dc 01       	movw	r26, r24
    22e8:	cb 01       	movw	r24, r22
    22ea:	9e 83       	std	Y+6, r25	; 0x06
    22ec:	8d 83       	std	Y+5, r24	; 0x05
    22ee:	0f c0       	rjmp	.+30     	; 0x230e <LCD_VoidInit+0xec>
    22f0:	88 ec       	ldi	r24, 0xC8	; 200
    22f2:	90 e0       	ldi	r25, 0x00	; 0
    22f4:	9c 83       	std	Y+4, r25	; 0x04
    22f6:	8b 83       	std	Y+3, r24	; 0x03
    22f8:	8b 81       	ldd	r24, Y+3	; 0x03
    22fa:	9c 81       	ldd	r25, Y+4	; 0x04
    22fc:	01 97       	sbiw	r24, 0x01	; 1
    22fe:	f1 f7       	brne	.-4      	; 0x22fc <LCD_VoidInit+0xda>
    2300:	9c 83       	std	Y+4, r25	; 0x04
    2302:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2304:	8d 81       	ldd	r24, Y+5	; 0x05
    2306:	9e 81       	ldd	r25, Y+6	; 0x06
    2308:	01 97       	sbiw	r24, 0x01	; 1
    230a:	9e 83       	std	Y+6, r25	; 0x06
    230c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    230e:	8d 81       	ldd	r24, Y+5	; 0x05
    2310:	9e 81       	ldd	r25, Y+6	; 0x06
    2312:	00 97       	sbiw	r24, 0x00	; 0
    2314:	69 f7       	brne	.-38     	; 0x22f0 <LCD_VoidInit+0xce>
    2316:	14 c0       	rjmp	.+40     	; 0x2340 <LCD_VoidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2318:	6f 81       	ldd	r22, Y+7	; 0x07
    231a:	78 85       	ldd	r23, Y+8	; 0x08
    231c:	89 85       	ldd	r24, Y+9	; 0x09
    231e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2320:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2324:	dc 01       	movw	r26, r24
    2326:	cb 01       	movw	r24, r22
    2328:	9e 83       	std	Y+6, r25	; 0x06
    232a:	8d 83       	std	Y+5, r24	; 0x05
    232c:	8d 81       	ldd	r24, Y+5	; 0x05
    232e:	9e 81       	ldd	r25, Y+6	; 0x06
    2330:	9a 83       	std	Y+2, r25	; 0x02
    2332:	89 83       	std	Y+1, r24	; 0x01
    2334:	89 81       	ldd	r24, Y+1	; 0x01
    2336:	9a 81       	ldd	r25, Y+2	; 0x02
    2338:	01 97       	sbiw	r24, 0x01	; 1
    233a:	f1 f7       	brne	.-4      	; 0x2338 <LCD_VoidInit+0x116>
    233c:	9a 83       	std	Y+2, r25	; 0x02
    233e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(40);
		LCD_VoidSendCommand(0b00111000);
    2340:	88 e3       	ldi	r24, 0x38	; 56
    2342:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <LCD_VoidSendCommand>
		LCD_VoidSendCommand(0b00001100);
    2346:	8c e0       	ldi	r24, 0x0C	; 12
    2348:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <LCD_VoidSendCommand>
		LCD_VoidSendCommand(0b00000001);
    234c:	81 e0       	ldi	r24, 0x01	; 1
    234e:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <LCD_VoidSendCommand>
}
    2352:	2e 96       	adiw	r28, 0x0e	; 14
    2354:	0f b6       	in	r0, 0x3f	; 63
    2356:	f8 94       	cli
    2358:	de bf       	out	0x3e, r29	; 62
    235a:	0f be       	out	0x3f, r0	; 63
    235c:	cd bf       	out	0x3d, r28	; 61
    235e:	cf 91       	pop	r28
    2360:	df 91       	pop	r29
    2362:	08 95       	ret

00002364 <LCD_VoidClearDisplay>:

void LCD_VoidClearDisplay(void){
    2364:	df 93       	push	r29
    2366:	cf 93       	push	r28
    2368:	cd b7       	in	r28, 0x3d	; 61
    236a:	de b7       	in	r29, 0x3e	; 62
	LCD_VoidSendCommand(0b00000001);
    236c:	81 e0       	ldi	r24, 0x01	; 1
    236e:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <LCD_VoidSendCommand>
}
    2372:	cf 91       	pop	r28
    2374:	df 91       	pop	r29
    2376:	08 95       	ret

00002378 <LCD_GoTOXY>:

void LCD_GoTOXY(u8 Copy_u8X,u8 Copy_u8Y){
    2378:	df 93       	push	r29
    237a:	cf 93       	push	r28
    237c:	00 d0       	rcall	.+0      	; 0x237e <LCD_GoTOXY+0x6>
    237e:	0f 92       	push	r0
    2380:	cd b7       	in	r28, 0x3d	; 61
    2382:	de b7       	in	r29, 0x3e	; 62
    2384:	8a 83       	std	Y+2, r24	; 0x02
    2386:	6b 83       	std	Y+3, r22	; 0x03
	 *  at x=1, y=3   address=0x43
	 *
	 *  at x=0  address = y position
	 *  at x=1 address = y+0x40
	 * */
	u8 Local_add=0;
    2388:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8X==0){
    238a:	8a 81       	ldd	r24, Y+2	; 0x02
    238c:	88 23       	and	r24, r24
    238e:	19 f4       	brne	.+6      	; 0x2396 <LCD_GoTOXY+0x1e>
		Local_add = Copy_u8Y;
    2390:	8b 81       	ldd	r24, Y+3	; 0x03
    2392:	89 83       	std	Y+1, r24	; 0x01
    2394:	03 c0       	rjmp	.+6      	; 0x239c <LCD_GoTOXY+0x24>
	}
	else{
		Local_add = Copy_u8Y+0x40;
    2396:	8b 81       	ldd	r24, Y+3	; 0x03
    2398:	80 5c       	subi	r24, 0xC0	; 192
    239a:	89 83       	std	Y+1, r24	; 0x01
	}

	Set_Bit(Local_add,7); //lcd understand that is an address of postion
    239c:	89 81       	ldd	r24, Y+1	; 0x01
    239e:	80 68       	ori	r24, 0x80	; 128
    23a0:	89 83       	std	Y+1, r24	; 0x01
	LCD_VoidSendCommand(Local_add);
    23a2:	89 81       	ldd	r24, Y+1	; 0x01
    23a4:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <LCD_VoidSendCommand>


}
    23a8:	0f 90       	pop	r0
    23aa:	0f 90       	pop	r0
    23ac:	0f 90       	pop	r0
    23ae:	cf 91       	pop	r28
    23b0:	df 91       	pop	r29
    23b2:	08 95       	ret

000023b4 <LCD_voidSendString>:

void LCD_voidSendString(u8* Copy_pcString)
{
    23b4:	df 93       	push	r29
    23b6:	cf 93       	push	r28
    23b8:	00 d0       	rcall	.+0      	; 0x23ba <LCD_voidSendString+0x6>
    23ba:	0f 92       	push	r0
    23bc:	cd b7       	in	r28, 0x3d	; 61
    23be:	de b7       	in	r29, 0x3e	; 62
    23c0:	9b 83       	std	Y+3, r25	; 0x03
    23c2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Index=0;
    23c4:	19 82       	std	Y+1, r1	; 0x01
    23c6:	0e c0       	rjmp	.+28     	; 0x23e4 <LCD_voidSendString+0x30>

	while(Copy_pcString[Local_u8Index]!='\0')
	{
		LCD_VoidSendData(Copy_pcString[Local_u8Index]);
    23c8:	89 81       	ldd	r24, Y+1	; 0x01
    23ca:	28 2f       	mov	r18, r24
    23cc:	30 e0       	ldi	r19, 0x00	; 0
    23ce:	8a 81       	ldd	r24, Y+2	; 0x02
    23d0:	9b 81       	ldd	r25, Y+3	; 0x03
    23d2:	fc 01       	movw	r30, r24
    23d4:	e2 0f       	add	r30, r18
    23d6:	f3 1f       	adc	r31, r19
    23d8:	80 81       	ld	r24, Z
    23da:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <LCD_VoidSendData>
		Local_u8Index++;
    23de:	89 81       	ldd	r24, Y+1	; 0x01
    23e0:	8f 5f       	subi	r24, 0xFF	; 255
    23e2:	89 83       	std	Y+1, r24	; 0x01

void LCD_voidSendString(u8* Copy_pcString)
{
	u8 Local_u8Index=0;

	while(Copy_pcString[Local_u8Index]!='\0')
    23e4:	89 81       	ldd	r24, Y+1	; 0x01
    23e6:	28 2f       	mov	r18, r24
    23e8:	30 e0       	ldi	r19, 0x00	; 0
    23ea:	8a 81       	ldd	r24, Y+2	; 0x02
    23ec:	9b 81       	ldd	r25, Y+3	; 0x03
    23ee:	fc 01       	movw	r30, r24
    23f0:	e2 0f       	add	r30, r18
    23f2:	f3 1f       	adc	r31, r19
    23f4:	80 81       	ld	r24, Z
    23f6:	88 23       	and	r24, r24
    23f8:	39 f7       	brne	.-50     	; 0x23c8 <LCD_voidSendString+0x14>
	{
		LCD_VoidSendData(Copy_pcString[Local_u8Index]);
		Local_u8Index++;
	}
}
    23fa:	0f 90       	pop	r0
    23fc:	0f 90       	pop	r0
    23fe:	0f 90       	pop	r0
    2400:	cf 91       	pop	r28
    2402:	df 91       	pop	r29
    2404:	08 95       	ret

00002406 <LCD_voidSendNumber>:

void LCD_voidSendNumber(u32 Copy_u32Number)
{
    2406:	df 93       	push	r29
    2408:	cf 93       	push	r28
    240a:	cd b7       	in	r28, 0x3d	; 61
    240c:	de b7       	in	r29, 0x3e	; 62
    240e:	2e 97       	sbiw	r28, 0x0e	; 14
    2410:	0f b6       	in	r0, 0x3f	; 63
    2412:	f8 94       	cli
    2414:	de bf       	out	0x3e, r29	; 62
    2416:	0f be       	out	0x3f, r0	; 63
    2418:	cd bf       	out	0x3d, r28	; 61
    241a:	6b 87       	std	Y+11, r22	; 0x0b
    241c:	7c 87       	std	Y+12, r23	; 0x0c
    241e:	8d 87       	std	Y+13, r24	; 0x0d
    2420:	9e 87       	std	Y+14, r25	; 0x0e
   //sec par: represent buffer to store string convention
   //third par: represent number base 10==>Decimal   2==>Binary

   //OR:
   //  sprintf(str, "%d", number); // Convert integer to string
   itoa(Copy_u32Number, Local_u8Str,10);
    2422:	8b 85       	ldd	r24, Y+11	; 0x0b
    2424:	9c 85       	ldd	r25, Y+12	; 0x0c
    2426:	9e 01       	movw	r18, r28
    2428:	2f 5f       	subi	r18, 0xFF	; 255
    242a:	3f 4f       	sbci	r19, 0xFF	; 255
    242c:	b9 01       	movw	r22, r18
    242e:	4a e0       	ldi	r20, 0x0A	; 10
    2430:	50 e0       	ldi	r21, 0x00	; 0
    2432:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <itoa>
   LCD_voidSendString(Local_u8Str);
    2436:	ce 01       	movw	r24, r28
    2438:	01 96       	adiw	r24, 0x01	; 1
    243a:	0e 94 da 11 	call	0x23b4	; 0x23b4 <LCD_voidSendString>

}
    243e:	2e 96       	adiw	r28, 0x0e	; 14
    2440:	0f b6       	in	r0, 0x3f	; 63
    2442:	f8 94       	cli
    2444:	de bf       	out	0x3e, r29	; 62
    2446:	0f be       	out	0x3f, r0	; 63
    2448:	cd bf       	out	0x3d, r28	; 61
    244a:	cf 91       	pop	r28
    244c:	df 91       	pop	r29
    244e:	08 95       	ret

00002450 <KPD_VoidInit>:
#include"KPD_Interface.h"


u8 ROW_PORT; u8 COL_PORT;

void KPD_VoidInit(u8 Copy_ROW_PORT,u8  Copy_Col_PORT){
    2450:	df 93       	push	r29
    2452:	cf 93       	push	r28
    2454:	00 d0       	rcall	.+0      	; 0x2456 <KPD_VoidInit+0x6>
    2456:	cd b7       	in	r28, 0x3d	; 61
    2458:	de b7       	in	r29, 0x3e	; 62
    245a:	89 83       	std	Y+1, r24	; 0x01
    245c:	6a 83       	std	Y+2, r22	; 0x02
	ROW_PORT = Copy_ROW_PORT;
    245e:	89 81       	ldd	r24, Y+1	; 0x01
    2460:	80 93 a5 01 	sts	0x01A5, r24
	COL_PORT = Copy_Col_PORT;
    2464:	8a 81       	ldd	r24, Y+2	; 0x02
    2466:	80 93 a6 01 	sts	0x01A6, r24

	DIO_VoidSetPinDirection(Copy_Col_PORT,KPD_COL0_PIN,OUTPUT);
    246a:	8a 81       	ldd	r24, Y+2	; 0x02
    246c:	60 e0       	ldi	r22, 0x00	; 0
    246e:	41 e0       	ldi	r20, 0x01	; 1
    2470:	0e 94 9c 0b 	call	0x1738	; 0x1738 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(Copy_Col_PORT,KPD_COL1_PIN,OUTPUT);
    2474:	8a 81       	ldd	r24, Y+2	; 0x02
    2476:	61 e0       	ldi	r22, 0x01	; 1
    2478:	41 e0       	ldi	r20, 0x01	; 1
    247a:	0e 94 9c 0b 	call	0x1738	; 0x1738 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(Copy_Col_PORT,KPD_COL2_PIN,OUTPUT);
    247e:	8a 81       	ldd	r24, Y+2	; 0x02
    2480:	62 e0       	ldi	r22, 0x02	; 2
    2482:	41 e0       	ldi	r20, 0x01	; 1
    2484:	0e 94 9c 0b 	call	0x1738	; 0x1738 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(Copy_Col_PORT,KPD_COL3_PIN,OUTPUT);
    2488:	8a 81       	ldd	r24, Y+2	; 0x02
    248a:	63 e0       	ldi	r22, 0x03	; 3
    248c:	41 e0       	ldi	r20, 0x01	; 1
    248e:	0e 94 9c 0b 	call	0x1738	; 0x1738 <DIO_VoidSetPinDirection>

	DIO_VoidSetPinValue(Copy_Col_PORT,KPD_COL0_PIN,HIGH);
    2492:	8a 81       	ldd	r24, Y+2	; 0x02
    2494:	60 e0       	ldi	r22, 0x00	; 0
    2496:	41 e0       	ldi	r20, 0x01	; 1
    2498:	0e 94 b2 0c 	call	0x1964	; 0x1964 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(Copy_Col_PORT,KPD_COL1_PIN,HIGH);
    249c:	8a 81       	ldd	r24, Y+2	; 0x02
    249e:	61 e0       	ldi	r22, 0x01	; 1
    24a0:	41 e0       	ldi	r20, 0x01	; 1
    24a2:	0e 94 b2 0c 	call	0x1964	; 0x1964 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(Copy_Col_PORT,KPD_COL2_PIN,HIGH);
    24a6:	8a 81       	ldd	r24, Y+2	; 0x02
    24a8:	62 e0       	ldi	r22, 0x02	; 2
    24aa:	41 e0       	ldi	r20, 0x01	; 1
    24ac:	0e 94 b2 0c 	call	0x1964	; 0x1964 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(Copy_Col_PORT,KPD_COL3_PIN,HIGH);
    24b0:	8a 81       	ldd	r24, Y+2	; 0x02
    24b2:	63 e0       	ldi	r22, 0x03	; 3
    24b4:	41 e0       	ldi	r20, 0x01	; 1
    24b6:	0e 94 b2 0c 	call	0x1964	; 0x1964 <DIO_VoidSetPinValue>

	DIO_VoidSetPinDirection(Copy_ROW_PORT,KPD_ROW0_PIN,INPUT);
    24ba:	89 81       	ldd	r24, Y+1	; 0x01
    24bc:	64 e0       	ldi	r22, 0x04	; 4
    24be:	40 e0       	ldi	r20, 0x00	; 0
    24c0:	0e 94 9c 0b 	call	0x1738	; 0x1738 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(Copy_ROW_PORT,KPD_ROW1_PIN,INPUT);
    24c4:	89 81       	ldd	r24, Y+1	; 0x01
    24c6:	65 e0       	ldi	r22, 0x05	; 5
    24c8:	40 e0       	ldi	r20, 0x00	; 0
    24ca:	0e 94 9c 0b 	call	0x1738	; 0x1738 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(Copy_ROW_PORT,KPD_ROW2_PIN,INPUT);
    24ce:	89 81       	ldd	r24, Y+1	; 0x01
    24d0:	66 e0       	ldi	r22, 0x06	; 6
    24d2:	40 e0       	ldi	r20, 0x00	; 0
    24d4:	0e 94 9c 0b 	call	0x1738	; 0x1738 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(Copy_ROW_PORT,KPD_ROW3_PIN,INPUT);
    24d8:	89 81       	ldd	r24, Y+1	; 0x01
    24da:	67 e0       	ldi	r22, 0x07	; 7
    24dc:	40 e0       	ldi	r20, 0x00	; 0
    24de:	0e 94 9c 0b 	call	0x1738	; 0x1738 <DIO_VoidSetPinDirection>

	DIO_VoidSetPinValue(Copy_ROW_PORT,KPD_ROW0_PIN,HIGH);
    24e2:	89 81       	ldd	r24, Y+1	; 0x01
    24e4:	64 e0       	ldi	r22, 0x04	; 4
    24e6:	41 e0       	ldi	r20, 0x01	; 1
    24e8:	0e 94 b2 0c 	call	0x1964	; 0x1964 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(Copy_ROW_PORT,KPD_ROW1_PIN,HIGH);
    24ec:	89 81       	ldd	r24, Y+1	; 0x01
    24ee:	65 e0       	ldi	r22, 0x05	; 5
    24f0:	41 e0       	ldi	r20, 0x01	; 1
    24f2:	0e 94 b2 0c 	call	0x1964	; 0x1964 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(Copy_ROW_PORT,KPD_ROW2_PIN,HIGH);
    24f6:	89 81       	ldd	r24, Y+1	; 0x01
    24f8:	66 e0       	ldi	r22, 0x06	; 6
    24fa:	41 e0       	ldi	r20, 0x01	; 1
    24fc:	0e 94 b2 0c 	call	0x1964	; 0x1964 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(Copy_ROW_PORT,KPD_ROW3_PIN,HIGH);
    2500:	89 81       	ldd	r24, Y+1	; 0x01
    2502:	67 e0       	ldi	r22, 0x07	; 7
    2504:	41 e0       	ldi	r20, 0x01	; 1
    2506:	0e 94 b2 0c 	call	0x1964	; 0x1964 <DIO_VoidSetPinValue>

}
    250a:	0f 90       	pop	r0
    250c:	0f 90       	pop	r0
    250e:	cf 91       	pop	r28
    2510:	df 91       	pop	r29
    2512:	08 95       	ret

00002514 <KPD_u8GetPressedKey>:

u8 KPD_u8GetPressedKey(void){
    2514:	df 93       	push	r29
    2516:	cf 93       	push	r28
    2518:	cd b7       	in	r28, 0x3d	; 61
    251a:	de b7       	in	r29, 0x3e	; 62
    251c:	a2 97       	sbiw	r28, 0x22	; 34
    251e:	0f b6       	in	r0, 0x3f	; 63
    2520:	f8 94       	cli
    2522:	de bf       	out	0x3e, r29	; 62
    2524:	0f be       	out	0x3f, r0	; 63
    2526:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8PressedKey=0xFF;
    2528:	8f ef       	ldi	r24, 0xFF	; 255
    252a:	8c 83       	std	Y+4, r24	; 0x04

	u8 Local_u8ColumsArray[4]={KPD_COL0_PIN,KPD_COL1_PIN,KPD_COL2_PIN,KPD_COL3_PIN};
    252c:	1d 82       	std	Y+5, r1	; 0x05
    252e:	81 e0       	ldi	r24, 0x01	; 1
    2530:	8e 83       	std	Y+6, r24	; 0x06
    2532:	82 e0       	ldi	r24, 0x02	; 2
    2534:	8f 83       	std	Y+7, r24	; 0x07
    2536:	83 e0       	ldi	r24, 0x03	; 3
    2538:	88 87       	std	Y+8, r24	; 0x08
	u8 Local_u8RowsArray[4]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};
    253a:	84 e0       	ldi	r24, 0x04	; 4
    253c:	89 87       	std	Y+9, r24	; 0x09
    253e:	85 e0       	ldi	r24, 0x05	; 5
    2540:	8a 87       	std	Y+10, r24	; 0x0a
    2542:	86 e0       	ldi	r24, 0x06	; 6
    2544:	8b 87       	std	Y+11, r24	; 0x0b
    2546:	87 e0       	ldi	r24, 0x07	; 7
    2548:	8c 87       	std	Y+12, r24	; 0x0c

	u8 Local_u8KeyArray[4][4]={{7,8,9,'/'},{4,5,6,'*'},{1,2,3,'-'},{'&',0,'=','+'}};
    254a:	ce 01       	movw	r24, r28
    254c:	0d 96       	adiw	r24, 0x0d	; 13
    254e:	9f 8f       	std	Y+31, r25	; 0x1f
    2550:	8e 8f       	std	Y+30, r24	; 0x1e
    2552:	e7 e8       	ldi	r30, 0x87	; 135
    2554:	f1 e0       	ldi	r31, 0x01	; 1
    2556:	f9 a3       	std	Y+33, r31	; 0x21
    2558:	e8 a3       	std	Y+32, r30	; 0x20
    255a:	f0 e1       	ldi	r31, 0x10	; 16
    255c:	fa a3       	std	Y+34, r31	; 0x22
    255e:	e8 a1       	ldd	r30, Y+32	; 0x20
    2560:	f9 a1       	ldd	r31, Y+33	; 0x21
    2562:	00 80       	ld	r0, Z
    2564:	88 a1       	ldd	r24, Y+32	; 0x20
    2566:	99 a1       	ldd	r25, Y+33	; 0x21
    2568:	01 96       	adiw	r24, 0x01	; 1
    256a:	99 a3       	std	Y+33, r25	; 0x21
    256c:	88 a3       	std	Y+32, r24	; 0x20
    256e:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2570:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2572:	00 82       	st	Z, r0
    2574:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2576:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2578:	01 96       	adiw	r24, 0x01	; 1
    257a:	9f 8f       	std	Y+31, r25	; 0x1f
    257c:	8e 8f       	std	Y+30, r24	; 0x1e
    257e:	9a a1       	ldd	r25, Y+34	; 0x22
    2580:	91 50       	subi	r25, 0x01	; 1
    2582:	9a a3       	std	Y+34, r25	; 0x22
    2584:	ea a1       	ldd	r30, Y+34	; 0x22
    2586:	ee 23       	and	r30, r30
    2588:	51 f7       	brne	.-44     	; 0x255e <KPD_u8GetPressedKey+0x4a>

	for(u8 Local_u8ColumsIndex=0;Local_u8ColumsIndex<4;Local_u8ColumsIndex++){
    258a:	1b 82       	std	Y+3, r1	; 0x03
    258c:	6a c0       	rjmp	.+212    	; 0x2662 <KPD_u8GetPressedKey+0x14e>

		DIO_VoidSetPinValue(COL_PORT,Local_u8ColumsArray[Local_u8ColumsIndex],LOW);
    258e:	40 91 a6 01 	lds	r20, 0x01A6
    2592:	8b 81       	ldd	r24, Y+3	; 0x03
    2594:	28 2f       	mov	r18, r24
    2596:	30 e0       	ldi	r19, 0x00	; 0
    2598:	ce 01       	movw	r24, r28
    259a:	05 96       	adiw	r24, 0x05	; 5
    259c:	fc 01       	movw	r30, r24
    259e:	e2 0f       	add	r30, r18
    25a0:	f3 1f       	adc	r31, r19
    25a2:	90 81       	ld	r25, Z
    25a4:	84 2f       	mov	r24, r20
    25a6:	69 2f       	mov	r22, r25
    25a8:	40 e0       	ldi	r20, 0x00	; 0
    25aa:	0e 94 b2 0c 	call	0x1964	; 0x1964 <DIO_VoidSetPinValue>

		for(u8 Local_u8RowsIndex=0;Local_u8RowsIndex < 4;Local_u8RowsIndex++){
    25ae:	1a 82       	std	Y+2, r1	; 0x02
    25b0:	41 c0       	rjmp	.+130    	; 0x2634 <KPD_u8GetPressedKey+0x120>

			u8 Local_u8PinState=DIO_u8GetPinValue(ROW_PORT,Local_u8RowsArray[Local_u8RowsIndex]);
    25b2:	40 91 a5 01 	lds	r20, 0x01A5
    25b6:	8a 81       	ldd	r24, Y+2	; 0x02
    25b8:	28 2f       	mov	r18, r24
    25ba:	30 e0       	ldi	r19, 0x00	; 0
    25bc:	ce 01       	movw	r24, r28
    25be:	09 96       	adiw	r24, 0x09	; 9
    25c0:	fc 01       	movw	r30, r24
    25c2:	e2 0f       	add	r30, r18
    25c4:	f3 1f       	adc	r31, r19
    25c6:	90 81       	ld	r25, Z
    25c8:	84 2f       	mov	r24, r20
    25ca:	69 2f       	mov	r22, r25
    25cc:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <DIO_u8GetPinValue>
    25d0:	89 83       	std	Y+1, r24	; 0x01

			if(Local_u8PinState==0){
    25d2:	89 81       	ldd	r24, Y+1	; 0x01
    25d4:	88 23       	and	r24, r24
    25d6:	59 f5       	brne	.+86     	; 0x262e <KPD_u8GetPressedKey+0x11a>
				Local_u8PressedKey=Local_u8KeyArray[Local_u8RowsIndex][Local_u8ColumsIndex];
    25d8:	8a 81       	ldd	r24, Y+2	; 0x02
    25da:	28 2f       	mov	r18, r24
    25dc:	30 e0       	ldi	r19, 0x00	; 0
    25de:	8b 81       	ldd	r24, Y+3	; 0x03
    25e0:	48 2f       	mov	r20, r24
    25e2:	50 e0       	ldi	r21, 0x00	; 0
    25e4:	22 0f       	add	r18, r18
    25e6:	33 1f       	adc	r19, r19
    25e8:	22 0f       	add	r18, r18
    25ea:	33 1f       	adc	r19, r19
    25ec:	ce 01       	movw	r24, r28
    25ee:	01 96       	adiw	r24, 0x01	; 1
    25f0:	82 0f       	add	r24, r18
    25f2:	93 1f       	adc	r25, r19
    25f4:	84 0f       	add	r24, r20
    25f6:	95 1f       	adc	r25, r21
    25f8:	fc 01       	movw	r30, r24
    25fa:	3c 96       	adiw	r30, 0x0c	; 12
    25fc:	80 81       	ld	r24, Z
    25fe:	8c 83       	std	Y+4, r24	; 0x04
    2600:	10 c0       	rjmp	.+32     	; 0x2622 <KPD_u8GetPressedKey+0x10e>
				while(Local_u8PinState==0){
					Local_u8PinState=DIO_u8GetPinValue(ROW_PORT,Local_u8RowsArray[Local_u8RowsIndex]);
    2602:	40 91 a5 01 	lds	r20, 0x01A5
    2606:	8a 81       	ldd	r24, Y+2	; 0x02
    2608:	28 2f       	mov	r18, r24
    260a:	30 e0       	ldi	r19, 0x00	; 0
    260c:	ce 01       	movw	r24, r28
    260e:	09 96       	adiw	r24, 0x09	; 9
    2610:	fc 01       	movw	r30, r24
    2612:	e2 0f       	add	r30, r18
    2614:	f3 1f       	adc	r31, r19
    2616:	90 81       	ld	r25, Z
    2618:	84 2f       	mov	r24, r20
    261a:	69 2f       	mov	r22, r25
    261c:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <DIO_u8GetPinValue>
    2620:	89 83       	std	Y+1, r24	; 0x01

			u8 Local_u8PinState=DIO_u8GetPinValue(ROW_PORT,Local_u8RowsArray[Local_u8RowsIndex]);

			if(Local_u8PinState==0){
				Local_u8PressedKey=Local_u8KeyArray[Local_u8RowsIndex][Local_u8ColumsIndex];
				while(Local_u8PinState==0){
    2622:	89 81       	ldd	r24, Y+1	; 0x01
    2624:	88 23       	and	r24, r24
    2626:	69 f3       	breq	.-38     	; 0x2602 <KPD_u8GetPressedKey+0xee>
					Local_u8PinState=DIO_u8GetPinValue(ROW_PORT,Local_u8RowsArray[Local_u8RowsIndex]);
				}
				return Local_u8PressedKey;
    2628:	fc 81       	ldd	r31, Y+4	; 0x04
    262a:	fd 8f       	std	Y+29, r31	; 0x1d
    262c:	20 c0       	rjmp	.+64     	; 0x266e <KPD_u8GetPressedKey+0x15a>

	for(u8 Local_u8ColumsIndex=0;Local_u8ColumsIndex<4;Local_u8ColumsIndex++){

		DIO_VoidSetPinValue(COL_PORT,Local_u8ColumsArray[Local_u8ColumsIndex],LOW);

		for(u8 Local_u8RowsIndex=0;Local_u8RowsIndex < 4;Local_u8RowsIndex++){
    262e:	8a 81       	ldd	r24, Y+2	; 0x02
    2630:	8f 5f       	subi	r24, 0xFF	; 255
    2632:	8a 83       	std	Y+2, r24	; 0x02
    2634:	8a 81       	ldd	r24, Y+2	; 0x02
    2636:	84 30       	cpi	r24, 0x04	; 4
    2638:	08 f4       	brcc	.+2      	; 0x263c <KPD_u8GetPressedKey+0x128>
    263a:	bb cf       	rjmp	.-138    	; 0x25b2 <KPD_u8GetPressedKey+0x9e>
					Local_u8PinState=DIO_u8GetPinValue(ROW_PORT,Local_u8RowsArray[Local_u8RowsIndex]);
				}
				return Local_u8PressedKey;
			}
		}
		DIO_VoidSetPinValue(COL_PORT,Local_u8ColumsArray[Local_u8ColumsIndex],HIGH);
    263c:	40 91 a6 01 	lds	r20, 0x01A6
    2640:	8b 81       	ldd	r24, Y+3	; 0x03
    2642:	28 2f       	mov	r18, r24
    2644:	30 e0       	ldi	r19, 0x00	; 0
    2646:	ce 01       	movw	r24, r28
    2648:	05 96       	adiw	r24, 0x05	; 5
    264a:	fc 01       	movw	r30, r24
    264c:	e2 0f       	add	r30, r18
    264e:	f3 1f       	adc	r31, r19
    2650:	90 81       	ld	r25, Z
    2652:	84 2f       	mov	r24, r20
    2654:	69 2f       	mov	r22, r25
    2656:	41 e0       	ldi	r20, 0x01	; 1
    2658:	0e 94 b2 0c 	call	0x1964	; 0x1964 <DIO_VoidSetPinValue>
	u8 Local_u8ColumsArray[4]={KPD_COL0_PIN,KPD_COL1_PIN,KPD_COL2_PIN,KPD_COL3_PIN};
	u8 Local_u8RowsArray[4]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};

	u8 Local_u8KeyArray[4][4]={{7,8,9,'/'},{4,5,6,'*'},{1,2,3,'-'},{'&',0,'=','+'}};

	for(u8 Local_u8ColumsIndex=0;Local_u8ColumsIndex<4;Local_u8ColumsIndex++){
    265c:	8b 81       	ldd	r24, Y+3	; 0x03
    265e:	8f 5f       	subi	r24, 0xFF	; 255
    2660:	8b 83       	std	Y+3, r24	; 0x03
    2662:	8b 81       	ldd	r24, Y+3	; 0x03
    2664:	84 30       	cpi	r24, 0x04	; 4
    2666:	08 f4       	brcc	.+2      	; 0x266a <KPD_u8GetPressedKey+0x156>
    2668:	92 cf       	rjmp	.-220    	; 0x258e <KPD_u8GetPressedKey+0x7a>
				return Local_u8PressedKey;
			}
		}
		DIO_VoidSetPinValue(COL_PORT,Local_u8ColumsArray[Local_u8ColumsIndex],HIGH);
	}
	return Local_u8PressedKey;
    266a:	8c 81       	ldd	r24, Y+4	; 0x04
    266c:	8d 8f       	std	Y+29, r24	; 0x1d
    266e:	8d 8d       	ldd	r24, Y+29	; 0x1d

}
    2670:	a2 96       	adiw	r28, 0x22	; 34
    2672:	0f b6       	in	r0, 0x3f	; 63
    2674:	f8 94       	cli
    2676:	de bf       	out	0x3e, r29	; 62
    2678:	0f be       	out	0x3f, r0	; 63
    267a:	cd bf       	out	0x3d, r28	; 61
    267c:	cf 91       	pop	r28
    267e:	df 91       	pop	r29
    2680:	08 95       	ret

00002682 <main>:
#include"../MCAL/Driver_DIO_V1/DIO_Interface.h"
#include"../HAL/LCD/LCD_Interface.h"
#include"../HAL/KPD/KPD_Interface.h"
#include"../HAL/Servo/Servo_Interface.h"

void main(void){
    2682:	df 93       	push	r29
    2684:	cf 93       	push	r28
    2686:	00 d0       	rcall	.+0      	; 0x2688 <main+0x6>
    2688:	cd b7       	in	r28, 0x3d	; 61
    268a:	de b7       	in	r29, 0x3e	; 62
	LCD_VoidInit();
    268c:	0e 94 11 11 	call	0x2222	; 0x2222 <LCD_VoidInit>
	KPD_VoidInit(KPD_COL_PORTA,KPD_ROW_PORTA);
    2690:	80 e0       	ldi	r24, 0x00	; 0
    2692:	60 e0       	ldi	r22, 0x00	; 0
    2694:	0e 94 28 12 	call	0x2450	; 0x2450 <KPD_VoidInit>
	Servo_VoidInit();
    2698:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <Servo_VoidInit>
	DIO_VoidSetPinDirection(DIO_PORTD,DIO_PIN5,OUTPUT);
    269c:	83 e0       	ldi	r24, 0x03	; 3
    269e:	65 e0       	ldi	r22, 0x05	; 5
    26a0:	41 e0       	ldi	r20, 0x01	; 1
    26a2:	0e 94 9c 0b 	call	0x1738	; 0x1738 <DIO_VoidSetPinDirection>
	u8 pressed = 255;
    26a6:	8f ef       	ldi	r24, 0xFF	; 255
    26a8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Deg=0;
    26aa:	19 82       	std	Y+1, r1	; 0x01
	LCD_voidSendString("Deg:  ");
    26ac:	80 e6       	ldi	r24, 0x60	; 96
    26ae:	90 e0       	ldi	r25, 0x00	; 0
    26b0:	0e 94 da 11 	call	0x23b4	; 0x23b4 <LCD_voidSendString>
	while(1){
		pressed = KPD_u8GetPressedKey();
    26b4:	0e 94 8a 12 	call	0x2514	; 0x2514 <KPD_u8GetPressedKey>
    26b8:	8a 83       	std	Y+2, r24	; 0x02
		if(pressed!=255){
    26ba:	8a 81       	ldd	r24, Y+2	; 0x02
    26bc:	8f 3f       	cpi	r24, 0xFF	; 255
    26be:	d1 f3       	breq	.-12     	; 0x26b4 <main+0x32>
			if(pressed=='&'){
    26c0:	8a 81       	ldd	r24, Y+2	; 0x02
    26c2:	86 32       	cpi	r24, 0x26	; 38
    26c4:	51 f4       	brne	.+20     	; 0x26da <main+0x58>
				LCD_VoidClearDisplay();
    26c6:	0e 94 b2 11 	call	0x2364	; 0x2364 <LCD_VoidClearDisplay>
				LCD_voidSendString("Deg:  ");
    26ca:	80 e6       	ldi	r24, 0x60	; 96
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	0e 94 da 11 	call	0x23b4	; 0x23b4 <LCD_voidSendString>
				Servo_VoidReset();
    26d2:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <Servo_VoidReset>
				Deg=0;
    26d6:	19 82       	std	Y+1, r1	; 0x01
    26d8:	ed cf       	rjmp	.-38     	; 0x26b4 <main+0x32>
					}
			else if(pressed=='='){
    26da:	8a 81       	ldd	r24, Y+2	; 0x02
    26dc:	8d 33       	cpi	r24, 0x3D	; 61
    26de:	a9 f4       	brne	.+42     	; 0x270a <main+0x88>
				LCD_GoTOXY(1,0);
    26e0:	81 e0       	ldi	r24, 0x01	; 1
    26e2:	60 e0       	ldi	r22, 0x00	; 0
    26e4:	0e 94 bc 11 	call	0x2378	; 0x2378 <LCD_GoTOXY>
				LCD_voidSendString("Ticks: ");
    26e8:	87 e6       	ldi	r24, 0x67	; 103
    26ea:	90 e0       	ldi	r25, 0x00	; 0
    26ec:	0e 94 da 11 	call	0x23b4	; 0x23b4 <LCD_voidSendString>
				Servo_VoidDegree(Deg);
    26f0:	89 81       	ldd	r24, Y+1	; 0x01
    26f2:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <Servo_VoidDegree>
				LCD_voidSendNumber(Servo_u16GetTicks());
    26f6:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <Servo_u16GetTicks>
    26fa:	cc 01       	movw	r24, r24
    26fc:	a0 e0       	ldi	r26, 0x00	; 0
    26fe:	b0 e0       	ldi	r27, 0x00	; 0
    2700:	bc 01       	movw	r22, r24
    2702:	cd 01       	movw	r24, r26
    2704:	0e 94 03 12 	call	0x2406	; 0x2406 <LCD_voidSendNumber>
    2708:	d5 cf       	rjmp	.-86     	; 0x26b4 <main+0x32>
			}
			else if(pressed=='/' || pressed=='*' || pressed=='-'|| pressed=='+'){
    270a:	8a 81       	ldd	r24, Y+2	; 0x02
    270c:	8f 32       	cpi	r24, 0x2F	; 47
    270e:	49 f0       	breq	.+18     	; 0x2722 <main+0xa0>
    2710:	8a 81       	ldd	r24, Y+2	; 0x02
    2712:	8a 32       	cpi	r24, 0x2A	; 42
    2714:	31 f0       	breq	.+12     	; 0x2722 <main+0xa0>
    2716:	8a 81       	ldd	r24, Y+2	; 0x02
    2718:	8d 32       	cpi	r24, 0x2D	; 45
    271a:	19 f0       	breq	.+6      	; 0x2722 <main+0xa0>
    271c:	8a 81       	ldd	r24, Y+2	; 0x02
    271e:	8b 32       	cpi	r24, 0x2B	; 43
    2720:	39 f4       	brne	.+14     	; 0x2730 <main+0xae>
				LCD_VoidClearDisplay();
    2722:	0e 94 b2 11 	call	0x2364	; 0x2364 <LCD_VoidClearDisplay>
				LCD_voidSendString("Incorrect Input");
    2726:	8f e6       	ldi	r24, 0x6F	; 111
    2728:	90 e0       	ldi	r25, 0x00	; 0
    272a:	0e 94 da 11 	call	0x23b4	; 0x23b4 <LCD_voidSendString>
    272e:	c2 cf       	rjmp	.-124    	; 0x26b4 <main+0x32>
				}
			else{
				Deg = pressed + Deg*10;
    2730:	89 81       	ldd	r24, Y+1	; 0x01
    2732:	88 2f       	mov	r24, r24
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	9c 01       	movw	r18, r24
    2738:	22 0f       	add	r18, r18
    273a:	33 1f       	adc	r19, r19
    273c:	c9 01       	movw	r24, r18
    273e:	88 0f       	add	r24, r24
    2740:	99 1f       	adc	r25, r25
    2742:	88 0f       	add	r24, r24
    2744:	99 1f       	adc	r25, r25
    2746:	82 0f       	add	r24, r18
    2748:	93 1f       	adc	r25, r19
    274a:	98 2f       	mov	r25, r24
    274c:	8a 81       	ldd	r24, Y+2	; 0x02
    274e:	89 0f       	add	r24, r25
    2750:	89 83       	std	Y+1, r24	; 0x01
				LCD_VoidSendData(pressed+'0');
    2752:	8a 81       	ldd	r24, Y+2	; 0x02
    2754:	80 5d       	subi	r24, 0xD0	; 208
    2756:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <LCD_VoidSendData>
    275a:	ac cf       	rjmp	.-168    	; 0x26b4 <main+0x32>

0000275c <__udivmodqi4>:
    275c:	99 1b       	sub	r25, r25
    275e:	79 e0       	ldi	r23, 0x09	; 9
    2760:	04 c0       	rjmp	.+8      	; 0x276a <__udivmodqi4_ep>

00002762 <__udivmodqi4_loop>:
    2762:	99 1f       	adc	r25, r25
    2764:	96 17       	cp	r25, r22
    2766:	08 f0       	brcs	.+2      	; 0x276a <__udivmodqi4_ep>
    2768:	96 1b       	sub	r25, r22

0000276a <__udivmodqi4_ep>:
    276a:	88 1f       	adc	r24, r24
    276c:	7a 95       	dec	r23
    276e:	c9 f7       	brne	.-14     	; 0x2762 <__udivmodqi4_loop>
    2770:	80 95       	com	r24
    2772:	08 95       	ret

00002774 <__prologue_saves__>:
    2774:	2f 92       	push	r2
    2776:	3f 92       	push	r3
    2778:	4f 92       	push	r4
    277a:	5f 92       	push	r5
    277c:	6f 92       	push	r6
    277e:	7f 92       	push	r7
    2780:	8f 92       	push	r8
    2782:	9f 92       	push	r9
    2784:	af 92       	push	r10
    2786:	bf 92       	push	r11
    2788:	cf 92       	push	r12
    278a:	df 92       	push	r13
    278c:	ef 92       	push	r14
    278e:	ff 92       	push	r15
    2790:	0f 93       	push	r16
    2792:	1f 93       	push	r17
    2794:	cf 93       	push	r28
    2796:	df 93       	push	r29
    2798:	cd b7       	in	r28, 0x3d	; 61
    279a:	de b7       	in	r29, 0x3e	; 62
    279c:	ca 1b       	sub	r28, r26
    279e:	db 0b       	sbc	r29, r27
    27a0:	0f b6       	in	r0, 0x3f	; 63
    27a2:	f8 94       	cli
    27a4:	de bf       	out	0x3e, r29	; 62
    27a6:	0f be       	out	0x3f, r0	; 63
    27a8:	cd bf       	out	0x3d, r28	; 61
    27aa:	09 94       	ijmp

000027ac <__epilogue_restores__>:
    27ac:	2a 88       	ldd	r2, Y+18	; 0x12
    27ae:	39 88       	ldd	r3, Y+17	; 0x11
    27b0:	48 88       	ldd	r4, Y+16	; 0x10
    27b2:	5f 84       	ldd	r5, Y+15	; 0x0f
    27b4:	6e 84       	ldd	r6, Y+14	; 0x0e
    27b6:	7d 84       	ldd	r7, Y+13	; 0x0d
    27b8:	8c 84       	ldd	r8, Y+12	; 0x0c
    27ba:	9b 84       	ldd	r9, Y+11	; 0x0b
    27bc:	aa 84       	ldd	r10, Y+10	; 0x0a
    27be:	b9 84       	ldd	r11, Y+9	; 0x09
    27c0:	c8 84       	ldd	r12, Y+8	; 0x08
    27c2:	df 80       	ldd	r13, Y+7	; 0x07
    27c4:	ee 80       	ldd	r14, Y+6	; 0x06
    27c6:	fd 80       	ldd	r15, Y+5	; 0x05
    27c8:	0c 81       	ldd	r16, Y+4	; 0x04
    27ca:	1b 81       	ldd	r17, Y+3	; 0x03
    27cc:	aa 81       	ldd	r26, Y+2	; 0x02
    27ce:	b9 81       	ldd	r27, Y+1	; 0x01
    27d0:	ce 0f       	add	r28, r30
    27d2:	d1 1d       	adc	r29, r1
    27d4:	0f b6       	in	r0, 0x3f	; 63
    27d6:	f8 94       	cli
    27d8:	de bf       	out	0x3e, r29	; 62
    27da:	0f be       	out	0x3f, r0	; 63
    27dc:	cd bf       	out	0x3d, r28	; 61
    27de:	ed 01       	movw	r28, r26
    27e0:	08 95       	ret

000027e2 <itoa>:
    27e2:	fb 01       	movw	r30, r22
    27e4:	9f 01       	movw	r18, r30
    27e6:	e8 94       	clt
    27e8:	42 30       	cpi	r20, 0x02	; 2
    27ea:	c4 f0       	brlt	.+48     	; 0x281c <itoa+0x3a>
    27ec:	45 32       	cpi	r20, 0x25	; 37
    27ee:	b4 f4       	brge	.+44     	; 0x281c <itoa+0x3a>
    27f0:	4a 30       	cpi	r20, 0x0A	; 10
    27f2:	29 f4       	brne	.+10     	; 0x27fe <itoa+0x1c>
    27f4:	97 fb       	bst	r25, 7
    27f6:	1e f4       	brtc	.+6      	; 0x27fe <itoa+0x1c>
    27f8:	90 95       	com	r25
    27fa:	81 95       	neg	r24
    27fc:	9f 4f       	sbci	r25, 0xFF	; 255
    27fe:	64 2f       	mov	r22, r20
    2800:	77 27       	eor	r23, r23
    2802:	0e 94 22 14 	call	0x2844	; 0x2844 <__udivmodhi4>
    2806:	80 5d       	subi	r24, 0xD0	; 208
    2808:	8a 33       	cpi	r24, 0x3A	; 58
    280a:	0c f0       	brlt	.+2      	; 0x280e <itoa+0x2c>
    280c:	89 5d       	subi	r24, 0xD9	; 217
    280e:	81 93       	st	Z+, r24
    2810:	cb 01       	movw	r24, r22
    2812:	00 97       	sbiw	r24, 0x00	; 0
    2814:	a1 f7       	brne	.-24     	; 0x27fe <itoa+0x1c>
    2816:	16 f4       	brtc	.+4      	; 0x281c <itoa+0x3a>
    2818:	5d e2       	ldi	r21, 0x2D	; 45
    281a:	51 93       	st	Z+, r21
    281c:	10 82       	st	Z, r1
    281e:	c9 01       	movw	r24, r18
    2820:	0c 94 12 14 	jmp	0x2824	; 0x2824 <strrev>

00002824 <strrev>:
    2824:	dc 01       	movw	r26, r24
    2826:	fc 01       	movw	r30, r24
    2828:	67 2f       	mov	r22, r23
    282a:	71 91       	ld	r23, Z+
    282c:	77 23       	and	r23, r23
    282e:	e1 f7       	brne	.-8      	; 0x2828 <strrev+0x4>
    2830:	32 97       	sbiw	r30, 0x02	; 2
    2832:	04 c0       	rjmp	.+8      	; 0x283c <strrev+0x18>
    2834:	7c 91       	ld	r23, X
    2836:	6d 93       	st	X+, r22
    2838:	70 83       	st	Z, r23
    283a:	62 91       	ld	r22, -Z
    283c:	ae 17       	cp	r26, r30
    283e:	bf 07       	cpc	r27, r31
    2840:	c8 f3       	brcs	.-14     	; 0x2834 <strrev+0x10>
    2842:	08 95       	ret

00002844 <__udivmodhi4>:
    2844:	aa 1b       	sub	r26, r26
    2846:	bb 1b       	sub	r27, r27
    2848:	51 e1       	ldi	r21, 0x11	; 17
    284a:	07 c0       	rjmp	.+14     	; 0x285a <__udivmodhi4_ep>

0000284c <__udivmodhi4_loop>:
    284c:	aa 1f       	adc	r26, r26
    284e:	bb 1f       	adc	r27, r27
    2850:	a6 17       	cp	r26, r22
    2852:	b7 07       	cpc	r27, r23
    2854:	10 f0       	brcs	.+4      	; 0x285a <__udivmodhi4_ep>
    2856:	a6 1b       	sub	r26, r22
    2858:	b7 0b       	sbc	r27, r23

0000285a <__udivmodhi4_ep>:
    285a:	88 1f       	adc	r24, r24
    285c:	99 1f       	adc	r25, r25
    285e:	5a 95       	dec	r21
    2860:	a9 f7       	brne	.-22     	; 0x284c <__udivmodhi4_loop>
    2862:	80 95       	com	r24
    2864:	90 95       	com	r25
    2866:	bc 01       	movw	r22, r24
    2868:	cd 01       	movw	r24, r26
    286a:	08 95       	ret

0000286c <_exit>:
    286c:	f8 94       	cli

0000286e <__stop_program>:
    286e:	ff cf       	rjmp	.-2      	; 0x286e <__stop_program>
